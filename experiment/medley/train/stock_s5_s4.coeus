

procedure RIGHT_func12(int[int] .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  assume((.param_2 >= 0));
  .local_3 = 0;
  if (((.param_2 == 0) || (.param_2 == 1)))
  {
    .ret_0 = 0;
  }
  else
  {
    .local_4 = .param_1[0];
    for (.local_5 = 1 to .param_2)
    {
      if ((.param_1[.local_5] < .local_4))
      {
        .local_4 = .param_1[.local_5];
      }
      if (((.param_1[.local_5] - .local_4) > .local_3))
      {
        .local_3 = (.param_1[.local_5] - .local_4);
      }
    }
    .ret_0 = .local_3;
  }
}

procedure LEFT_func8(int[int] .param_1.0, int .param_2.1) returns
 (int .ret_0.2)
{
  int .local_3.3;
  int .local_4.4;
  int .local_5.5;
  assume((.param_2.1 >= 0));
  .local_3.3 = 0;
  .local_4.4 = 0;
  for (.local_5.5 = 1 to .param_2.1)
  {
    if (((.param_1.0[.local_5.5] - .param_1.0[.local_4.4]) > .local_3.3))
    {
      .local_3.3 = (.param_1.0[.local_5.5] - .param_1.0[.local_4.4]);
    }
    else
    {
      if ((.param_1.0[.local_5.5] < .param_1.0[.local_4.4]))
      {
        .local_4.4 = .local_5.5;
      }
    }
  }
  .ret_0.2 = .local_3.3;
}

$lentry LEFT_func8;
$rentry RIGHT_func12;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
ensures (.param_1.0 == .param_1);
ensures (.ret_0.2 == .ret_0);

