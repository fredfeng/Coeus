

procedure RIGHT_func17(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  assume(((1 <= .param_1) && (.param_1 <= 50)));
  .local_4 = 5;
  .local_5 = 2;
  for (.local_2 = .param_1 downto 1)
  {
    .local_3 = (.local_4 / 2);
    .local_4 = (.local_3 + (.local_3 + .local_3));
    .local_5 = (.local_5 + (.local_4 / 2));
  }
  .ret_0 = .local_5;
}

procedure LEFT_func12(int .param_1.0) returns (int .ret_0.1)
{
  int .tmpret_2;
  assume(((1 <= .param_1.0) && (.param_1.0 <= 50)));
  call .tmpret_2 = LEFT_func10(1, .param_1.0, 2, 2);
  .ret_0.1 = .tmpret_2;
}

procedure LEFT_func10(int .param_1.2, int .param_2, int .param_3,
                      int .param_4)
 returns (int .ret_0.3)
{
  int .tmpret_8;
  int .local_5.4;
  int .local_6;
  if ((.param_1.2 == .param_2))
  {
    .ret_0.3 = .param_4;
  }
  else
  {
    .local_5.4 = (.param_3 + (.param_3 + .param_3));
    .local_6 = (.local_5.4 - (.local_5.4 / 2));
    call .tmpret_8 = LEFT_func10((.param_1.2 + 1), .param_2,
     (.local_5.4 / 2), ((.param_4 + .local_5.4) - .local_6));
    .ret_0.3 = .tmpret_8;
  }
}

$lentry LEFT_func12;
$rentry RIGHT_func17;
requires (.param_1.0 == .param_1);
ensures (.ret_0.1 == .ret_0);

