

procedure RIGHT_func8(int .param_1, int .param_2, int[int] .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  assume(((((1 <= .param_2) && (.param_2 <= 1000)) && (1 <= .param_1)) && (.param_1 <= .param_2)));
  .local_4 = 0;
  for (.local_5 = 0 to .param_2)
  {
    if ((.param_3[.local_5] <= 0))
    {
      .local_4 = (.local_4 + 1);
    }
  }
  .ret_0 = (if (.local_4 < .param_1) then 1 else 0);
}

procedure LEFT_func8(int .param_1.0, int .param_2.1, int[int] .param_3.2)
 returns (int .ret_0.3)
{
  int .local_4.4;
  int .local_5.5;
  assume(((((1 <= .param_2.1) && (.param_2.1 <= 1000)) && (1 <= .param_1.0)) && (.param_1.0 <= .param_2.1)));
  .local_4.4 = 0;
  for (.local_5.5 = (.param_2.1 - 1) downto -1)
  {
    if ((.param_3.2[.local_5.5] <= 0))
    {
      .local_4.4 = (.local_4.4 + 1);
    }
  }
  .ret_0.3 = (if ((.local_4.4 >= .param_1.0) == false) then 1 else 0);
}

$lentry LEFT_func8;
$rentry RIGHT_func8;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
requires (.param_3.2 == .param_3);
ensures (.param_3.2 == .param_3);
ensures (.ret_0.3 == .ret_0);

