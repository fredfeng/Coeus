

procedure RIGHT_func9(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .tmpret_4;
  assume(((((((2 <= .param_1) && (.param_1 <= 100000)) && (1 <= .param_2)) && (.param_2 <= .param_1)) && (2 <= .param_3)) && (.param_3 <= .param_1)));
  call .tmpret_4 = RIGHT_func13((.param_1 / .param_2), .param_3);
  .ret_0 = .tmpret_4;
}

procedure RIGHT_func13(int .param_1.0, int .param_2.1) returns (int .ret_0.2)
{
  int .tmpret_3;
  if ((.param_1.0 < .param_2.1))
  {
    .ret_0.2 = .param_1.0;
  }
  else
  {
    call .tmpret_3 = RIGHT_func13(((.param_1.0 - .param_2.1) + 1),
     .param_2.1);
    .ret_0.2 = (.param_2.1 + .tmpret_3);
  }
}

procedure LEFT_func9(int .param_1.3, int .param_2.4, int .param_3.5) returns
 (int .ret_0.6)
{
  int .tmpret_6;
  int .local_4;
  int .local_5;
  assume(((((((2 <= .param_1.3) && (.param_1.3 <= 100000)) && (1 <= .param_2.4)) && (.param_2.4 <= .param_1.3)) && (2 <= .param_3.5)) && (.param_3.5 <= .param_1.3)));
  .local_4 = (.param_1.3 / .param_2.4);
  call .tmpret_6 = LEFT_func5(.local_4, .param_3.5);
  .local_5 = (.local_4 + .tmpret_6);
  .ret_0.6 = .local_5;
}

procedure LEFT_func5(int .param_1.7, int .param_2.8) returns (int .ret_0.9)
{
  int .tmpret_3.10;
  if ((.param_1.7 == .param_2.8))
  {
    .ret_0.9 = 1;
  }
  else
  {
    if ((.param_1.7 < .param_2.8))
    {
      .ret_0.9 = 0;
    }
    else
    {
      call .tmpret_3.10 = LEFT_func5(((.param_1.7 - .param_2.8) + 1),
       .param_2.8);
      .ret_0.9 = (1 + .tmpret_3.10);
    }
  }
}

$lentry LEFT_func9;
$rentry RIGHT_func9;
requires (.param_1.3 == .param_1);
requires (.param_2.4 == .param_2);
requires (.param_3.5 == .param_3);
ensures (.ret_0.6 == .ret_0);

