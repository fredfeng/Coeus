

procedure RIGHT_func13(int .param_1) returns (int .ret_0)
{
  int .tmpret_2;
  assume(((1 <= .param_1) && (.param_1 <= 50)));
  call .tmpret_2 = RIGHT_func12(.param_1, 1, 5);
  .ret_0 = .tmpret_2;
}

procedure RIGHT_func12(int .param_1.0, int .param_2, int .param_3) returns
 (int .ret_0.1)
{
  int .tmpret_4;
  if ((.param_2 > .param_1.0))
  {
    .ret_0.1 = 0;
  }
  else
  {
    call .tmpret_4 = RIGHT_func12(.param_1.0, (.param_2 + 1),
     ((.param_3 / 2) + ((.param_3 / 2) + (.param_3 / 2))));
    .ret_0.1 = ((.param_3 / 2) + .tmpret_4);
  }
}

procedure LEFT_func7(int .param_1.2) returns (int .ret_0.3)
{
  int .tmpret_2.4;
  assume(((1 <= .param_1.2) && (.param_1.2 <= 50)));
  call .tmpret_2.4 = LEFT_func6(5, .param_1.2);
  .ret_0.3 = .tmpret_2.4;
}

procedure LEFT_func6(int .param_1.5, int .param_2.6) returns (int .ret_0.7)
{
  int .tmpret_4.8;
  int .local_3;
  if ((.param_2.6 != 0))
  {
    .local_3 = (.param_1.5 / 2);
    call .tmpret_4.8 = LEFT_func6((.local_3 + (.local_3 + .local_3)),
     (.param_2.6 - 1));
    .ret_0.7 = (.local_3 + .tmpret_4.8);
  }
  else
  {
    .ret_0.7 = 0;
  }
}

$lentry LEFT_func7;
$rentry RIGHT_func13;
requires (.param_1.2 == .param_1);
ensures (.ret_0.3 == .ret_0);

