

procedure RIGHT_func13(int[int] .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  assume((.param_2 >= 1));
  .local_4 = 0;
  for (.local_3 = (.param_2 - 1) downto 0)
  {
    if ((.param_1[.local_3] == .param_1[(.local_3 - 1)]))
    {
      .local_4 = (.local_4 + 1);
    }
  }
  .ret_0 = .local_4;
}

procedure LEFT_func8(int[int] .param_1.0, int .param_2.1) returns
 (int .ret_0.2)
{
  int .tmpret_5;
  int .local_3.3;
  int .local_4.4;
  assume((.param_2.1 >= 1));
  .local_3.3 = 0;
  .local_4.4 = (.param_2.1 - 1);
  call .tmpret_5 = LEFT_func6(.param_1.0, .local_3.3, .local_4.4);
  .ret_0.2 = .tmpret_5;
}

procedure LEFT_func6(int[int] .param_1.5, int .param_2.6, int .param_3)
 returns (int .ret_0.7)
{
  int .tmpret_4;
  int .tmpret_5.8;
  if ((.param_2.6 == .param_3))
  {
    .ret_0.7 = 0;
  }
  else
  {
    if ((.param_1.5[.param_3] == .param_1.5[(.param_3 - 1)]))
    {
      call .tmpret_4 = LEFT_func6(.param_1.5, .param_2.6, (.param_3 - 1));
      .ret_0.7 = (1 + .tmpret_4);
    }
    else
    {
      call .tmpret_5.8 = LEFT_func6(.param_1.5, .param_2.6, (.param_3 - 1));
      .ret_0.7 = .tmpret_5.8;
    }
  }
}

$lentry LEFT_func8;
$rentry RIGHT_func13;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
ensures (.param_1.0 == .param_1);
ensures (.ret_0.2 == .ret_0);

