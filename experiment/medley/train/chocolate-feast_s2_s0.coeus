

procedure RIGHT_func13(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  assume(((((((2 <= .param_1) && (.param_1 <= 100000)) && (1 <= .param_2)) && (.param_2 <= .param_1)) && (2 <= .param_3)) && (.param_3 <= .param_1)));
  .local_4 = (.param_1 / .param_2);
  .local_5 = .local_4;
  while ((.param_3 <= .local_4))
  {
    .local_4 = (.local_4 - .param_3);
    .local_5 = (.local_5 + 1);
    .local_4 = (.local_4 + 1);
  }
  .ret_0 = .local_5;
}

procedure LEFT_func9(int .param_1.0, int .param_2.1, int .param_3.2) returns
 (int .ret_0.3)
{
  int .tmpret_4;
  assume(((((((2 <= .param_1.0) && (.param_1.0 <= 100000)) && (1 <= .param_2.1)) && (.param_2.1 <= .param_1.0)) && (2 <= .param_3.2)) && (.param_3.2 <= .param_1.0)));
  call .tmpret_4 = LEFT_func5((.param_1.0 / .param_2.1), .param_3.2);
  .ret_0.3 = .tmpret_4;
}

procedure LEFT_func5(int .param_1.4, int .param_2.5) returns (int .ret_0.6)
{
  int .tmpret_3;
  if ((.param_1.4 < .param_2.5))
  {
    .ret_0.6 = .param_1.4;
  }
  else
  {
    call .tmpret_3 = LEFT_func5(((.param_1.4 - .param_2.5) + 1), .param_2.5);
    .ret_0.6 = (.param_2.5 + .tmpret_3);
  }
}

$lentry LEFT_func9;
$rentry RIGHT_func13;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
requires (.param_3.2 == .param_3);
ensures (.ret_0.3 == .ret_0);

