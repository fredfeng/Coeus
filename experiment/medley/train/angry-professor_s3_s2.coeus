

procedure RIGHT_func6(int .param_1, int .param_2, int[int] .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  assume(((((1 <= .param_2) && (.param_2 <= 1000)) && (1 <= .param_1)) && (.param_1 <= .param_2)));
  .local_4 = 0;
  for (.local_5 = (.param_2 - 1) downto -1)
  {
    if ((.param_3[.local_5] <= 0))
    {
      .local_4 = (.local_4 + 1);
    }
  }
  .ret_0 = (if ((.local_4 >= .param_1) == false) then 1 else 0);
}

procedure LEFT_func7(int .param_1.0, int .param_2.1, int[int] .param_3.2)
 returns (int .ret_0.3)
{
  int .tmpret_4;
  assume(((((1 <= .param_2.1) && (.param_2.1 <= 1000)) && (1 <= .param_1.0)) && (.param_1.0 <= .param_2.1)));
  call .tmpret_4 = LEFT_func6(.param_1.0, .param_2.1, .param_3.2);
  .ret_0.3 = .tmpret_4;
}

procedure LEFT_func6(int .param_1.4, int .param_2.5, int[int] .param_3.6)
 returns (int .ret_0.7)
{
  int .tmpret_4.8;
  int .tmpret_5;
  if ((.param_1.4 == 0))
  {
    .ret_0.7 = 0;
  }
  else
  {
    if ((.param_2.5 == 0))
    {
      .ret_0.7 = 1;
    }
    else
    {
      if ((.param_3.6[(.param_2.5 - 1)] > 0))
      {
        call .tmpret_4.8 = LEFT_func6(.param_1.4, (.param_2.5 - 1),
         .param_3.6);
        .ret_0.7 = .tmpret_4.8;
      }
      else
      {
        call .tmpret_5 = LEFT_func6((.param_1.4 - 1), (.param_2.5 - 1),
         .param_3.6);
        .ret_0.7 = .tmpret_5;
      }
    }
  }
}

$lentry LEFT_func7;
$rentry RIGHT_func6;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
requires (.param_3.2 == .param_3);
ensures (.param_3.2 == .param_3);
ensures (.ret_0.3 == .ret_0);

