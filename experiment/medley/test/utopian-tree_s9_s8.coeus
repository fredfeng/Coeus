

procedure RIGHT_func14(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  assume(((.param_1 >= 0) && (.param_1 <= 60)));
  .local_2 = 1;
  if (((.param_1 % 2) == 0))
  {
    for (.local_3 = 0 to (.param_1 / 2))
    {
      .local_2 = (.local_2 + .local_2);
      .local_2 = (.local_2 + 1);
    }
  }
  else
  {
    .param_1 = (.param_1 - 1);
    for (.local_4 = 0 to (.param_1 / 2))
    {
      .local_2 = (.local_2 + .local_2);
      .local_2 = (.local_2 + 1);
    }
    .local_2 = (.local_2 + .local_2);
  }
  .ret_0 = .local_2;
}

procedure LEFT_func9(int .param_1.0) returns (int .ret_0.1)
{
  int inlined_.param_1.0;
  int inlined_.param_2.1;
  int inlined_.ret_0.2;
  int inlined_.local_3.3;
  int inlined_.param_1.4;
  int inlined_.param_2.5;
  int inlined_.ret_0.6;
  int inlined_.local_3.7;
  int .tmpret_3;
  int .tmpret_4;
  int .local_2.2;
  assume(((.param_1.0 >= 0) && (.param_1.0 <= 60)));
  if (((.param_1.0 % 2) == 0))
  {
    inlined_.param_1.0 = 2;
    inlined_.param_2.1 = ((.param_1.0 / 2) + 1);
    inlined_.local_3.3 = 1;
    while ((inlined_.param_2.1 != 0))
    {
      inlined_.param_2.1 = (inlined_.param_2.1 - 1);
      inlined_.local_3.3 = (inlined_.local_3.3 * inlined_.param_1.0);
    }
    inlined_.ret_0.2 = inlined_.local_3.3;
    .tmpret_3 = inlined_.ret_0.2;
    .local_2.2 = (.tmpret_3 - 1);
  }
  else
  {
    inlined_.param_1.4 = 2;
    inlined_.param_2.5 = ((.param_1.0 + 1) / 2);
    inlined_.local_3.7 = 1;
    while ((inlined_.param_2.5 != 0))
    {
      inlined_.param_2.5 = (inlined_.param_2.5 - 1);
      inlined_.local_3.7 = (inlined_.local_3.7 * inlined_.param_1.4);
    }
    inlined_.ret_0.6 = inlined_.local_3.7;
    .tmpret_4 = inlined_.ret_0.6;
    .local_2.2 = ((.tmpret_4 - 1) + (.tmpret_4 - 1));
  }
  .ret_0.1 = .local_2.2;
}

$lentry LEFT_func9;
$rentry RIGHT_func14;
requires (.param_1.0 == .param_1);
ensures (.ret_0.1 == .ret_0);

