

procedure RIGHT_func13(int[int, int] .param_1, int .param_2) returns
 (int .ret_0)
{
  int inlined_.param_1.0;
  int inlined_.ret_0.1;
  int .tmpret_7;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  assume((.param_2 >= 0));
  .local_5 = 0;
  .local_6 = 0;
  for (.local_3 = 0 to .param_2)
  {
    for (.local_4 = 0 to .param_2)
    {
      if ((.local_4 == .local_3))
      {
        .local_5 = (.local_5 + .param_1[.local_4, .local_3]);
      }
    }
  }
  for (.local_3 = 0 to .param_2)
  {
    for (.local_4 = 0 to .param_2)
    {
      if ((.local_4 == ((.param_2 - 1) - .local_3)))
      {
        .local_6 = (.local_6 + .param_1[.local_4, .local_3]);
      }
    }
  }
  inlined_.param_1.0 = (.local_5 - .local_6);
  inlined_.ret_0.1 = (if (inlined_.param_1.0 >= 0) then inlined_.param_1.0 else (- inlined_.param_1.0));
  .tmpret_7 = inlined_.ret_0.1;
  .ret_0 = .tmpret_7;
}

procedure LEFT_func13(int[int, int] .param_1.0, int .param_2.1) returns
 (int .ret_0.2)
{
  int .local_3.3;
  int .local_4.4;
  int .local_5.5;
  int .local_6.6;
  int .local_7;
  int .local_8;
  assume((.param_2.1 >= 0));
  .local_5.5 = 0;
  for (.local_3.3 = 0 to .param_2.1)
  {
    for (.local_4.4 = 0 to .param_2.1)
    {
      if ((.local_3.3 == .local_4.4))
      {
        .local_5.5 = (.local_5.5 + .param_1.0[.local_4.4, .local_3.3]);
      }
    }
  }
  .local_7 = 0;
  for (.local_6.6 = 0 to .param_2.1)
  {
    .local_7 = (.local_7 + .param_1.0[((.param_2.1 - .local_6.6) - 1),
     .local_6.6]);
  }
  if ((.local_5.5 > .local_7))
  {
    .local_8 = (.local_5.5 - .local_7);
    .ret_0.2 = .local_8;
  }
  else
  {
    if ((.local_5.5 == .local_7))
    {
      .ret_0.2 = 0;
    }
    else
    {
      .local_8 = (.local_7 - .local_5.5);
      .ret_0.2 = .local_8;
    }
  }
}

$lentry LEFT_func13;
$rentry RIGHT_func13;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
ensures (.param_1.0 == .param_1);
ensures (.ret_0.2 == .ret_0);

