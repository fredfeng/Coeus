

procedure RIGHT_func20(int[int, int] .param_1, int .param_2) returns
 (int .ret_0)
{
  int inlined_.param_1.0;
  int inlined_.ret_0.1;
  int .tmpret_8;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  assume((.param_2 >= 0));
  .local_3 = 0;
  .local_4 = 0;
  for (.local_6 = 0 to .param_2)
  {
    .local_3 = (.local_3 + .param_1[.local_6, .local_6]);
  }
  for (.local_7 = (.param_2 - 1) downto -1)
  {
    .local_4 = (.local_4 + .param_1[((.param_2 - 1) - .local_7), .local_7]);
  }
  inlined_.param_1.0 = (.local_4 - .local_3);
  inlined_.ret_0.1 = (if (inlined_.param_1.0 >= 0) then inlined_.param_1.0 else (- inlined_.param_1.0));
  .tmpret_8 = inlined_.ret_0.1;
  .local_5 = .tmpret_8;
  .ret_0 = .local_5;
}

procedure LEFT_func10(int[int, int] .param_1.0, int .param_2.1) returns
 (int .ret_0.2)
{
  int .local_3.3;
  int .local_4.4;
  int .local_5.5;
  int .local_6.6;
  assume((.param_2.1 >= 0));
  .local_5.5 = 0;
  .local_6.6 = 0;
  for (.local_3.3 = 0 to .param_2.1)
  {
    .local_4.4 = (.param_2.1 - 1);
    .local_5.5 = (.local_5.5 + .param_1.0[.local_3.3, .local_3.3]);
    .local_6.6 = (.local_6.6 + .param_1.0[((.param_2.1 - .local_3.3) - 1),
     .local_3.3]);
    .local_4.4 = (.local_4.4 - 1);
  }
  if ((.local_5.5 > .local_6.6))
  {
    .ret_0.2 = (.local_5.5 - .local_6.6);
  }
  else
  {
    .ret_0.2 = (.local_6.6 - .local_5.5);
  }
}

$lentry LEFT_func10;
$rentry RIGHT_func20;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
ensures (.param_1.0 == .param_1);
ensures (.ret_0.2 == .ret_0);

