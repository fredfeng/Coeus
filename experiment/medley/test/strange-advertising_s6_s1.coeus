

procedure RIGHT_func16(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  assume(((1 <= .param_1) && (.param_1 <= 50)));
  .local_4 = 5;
  .local_5 = 2;
  for (.local_2 = .param_1 downto 1)
  {
    .local_3 = (.local_4 / 2);
    .local_4 = (.local_3 + (.local_3 + .local_3));
    .local_5 = (.local_5 + (.local_4 / 2));
  }
  .ret_0 = .local_5;
}

procedure LEFT_func9(int .param_1.0, int .param_2, int .param_3) returns
 (int .ret_0.1)
{
  int .tmpret_7;
  int .local_4.2;
  int .local_5.3;
  int .local_6;
  if ((.param_2 == 0))
  {
    .ret_0.1 = .param_3;
  }
  else
  {
    .local_4.2 = (.param_3 + (.param_1.0 / 2));
    .local_5.3 = (.param_1.0 / 2);
    .local_6 = (.local_5.3 + (.local_5.3 + .local_5.3));
    call .tmpret_7 = LEFT_func9(.local_6, (.param_2 - 1), .local_4.2);
    .ret_0.1 = .tmpret_7;
  }
}

procedure LEFT_func10(int .param_1.4) returns (int .ret_0.5)
{
  int .tmpret_2;
  assume(((1 <= .param_1.4) && (.param_1.4 <= 50)));
  call .tmpret_2 = LEFT_func9(5, .param_1.4, 0);
  .ret_0.5 = .tmpret_2;
}

$lentry LEFT_func10;
$rentry RIGHT_func16;
requires (.param_1.4 == .param_1);
ensures (.ret_0.5 == .ret_0);

