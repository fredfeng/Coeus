

procedure RIGHT_func15(int[int] .param_1, int .param_2) returns (int .ret_0)
{
  int .tmpret_3;
  assume(((1 <= .param_2) && (.param_2 <= 10000)));
  call .tmpret_3 = RIGHT_func14(.param_1, 0, (.param_2 - 1), 0);
  .ret_0 = .tmpret_3;
}

procedure RIGHT_func14(int[int] .param_1.0, int .param_2.1, int .param_3,
                       int .param_4)
 returns (int .ret_0.2)
{
  int inlined_.param_1.0;
  int inlined_.ret_0.1;
  int .tmpret_5;
  int .tmpret_6;
  if ((.param_2.1 >= .param_3))
  {
    .ret_0.2 = .param_4;
  }
  else
  {
    inlined_.param_1.0 = (.param_1.0[.param_2.1] - .param_1.0[.param_3]);
    inlined_.ret_0.1 = (if (inlined_.param_1.0 >= 0) then inlined_.param_1.0 else (- inlined_.param_1.0));
    .tmpret_5 = inlined_.ret_0.1;
    .param_4 = (.param_4 + .tmpret_5);
    call .tmpret_6 = RIGHT_func14(.param_1.0, (.param_2.1 + 1),
     (.param_3 - 1), .param_4);
    .ret_0.2 = .tmpret_6;
  }
}

procedure LEFT_func7(int[int] .param_1.3, int .param_2.4) returns
 (int .ret_0.5)
{
  int .local_3;
  int .local_4;
  assume(((1 <= .param_2.4) && (.param_2.4 <= 10000)));
  .local_3 = 0;
  .local_4 = 0;
  .param_2.4 = (.param_2.4 - 1);
  while ((.local_3 < .param_2.4))
  {
    if ((.param_1.3[.local_3] > .param_1.3[.param_2.4]))
    {
      .local_4 = (.local_4 + (.param_1.3[.local_3] - .param_1.3[.param_2.4]));
    }
    else
    {
      .local_4 = (.local_4 + (.param_1.3[.param_2.4] - .param_1.3[.local_3]));
    }
    .param_2.4 = (.param_2.4 - 1);
    .local_3 = (.local_3 + 1);
  }
  .ret_0.5 = .local_4;
}

$lentry LEFT_func7;
$rentry RIGHT_func15;
requires (.param_1.3 == .param_1);
requires (.param_2.4 == .param_2);
ensures (.param_1.3 == .param_1);
ensures (.ret_0.5 == .ret_0);

