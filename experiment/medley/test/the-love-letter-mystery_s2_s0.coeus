

procedure RIGHT_func13(int[int] .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  assume(((1 <= .param_2) && (.param_2 <= 10000)));
  .local_3 = 0;
  .local_4 = 0;
  .param_2 = (.param_2 - 1);
  while ((.local_3 < .param_2))
  {
    if ((.param_1[.local_3] > .param_1[.param_2]))
    {
      .local_4 = (.local_4 + (.param_1[.local_3] - .param_1[.param_2]));
    }
    else
    {
      .local_4 = (.local_4 + (.param_1[.param_2] - .param_1[.local_3]));
    }
    .param_2 = (.param_2 - 1);
    .local_3 = (.local_3 + 1);
  }
  .ret_0 = .local_4;
}

procedure LEFT_func9(int[int] .param_1.0, int .param_2.1) returns
 (int .ret_0.2)
{
  int .local_3.3;
  int .local_4.4;
  int .local_5;
  int .local_6;
  assume(((1 <= .param_2.1) && (.param_2.1 <= 10000)));
  .local_5 = 0;
  .local_3.3 = (.param_2.1 - 1);
  for (.local_4.4 = 0 to .local_3.3)
  {
    .local_6 = (.param_1.0[.local_3.3] - .param_1.0[.local_4.4]);
    if ((.local_6 < 0))
    {
      .local_6 = (- .local_6);
    }
    .local_5 = (.local_5 + .local_6);
    .local_3.3 = (.local_3.3 - 1);
  }
  .ret_0.2 = .local_5;
}

$lentry LEFT_func9;
$rentry RIGHT_func13;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
ensures (.param_1.0 == .param_1);
ensures (.ret_0.2 == .ret_0);

