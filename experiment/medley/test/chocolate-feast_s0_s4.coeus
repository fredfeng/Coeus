

procedure RIGHT_func12(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  assume(((((((2 <= .param_1) && (.param_1 <= 100000)) && (1 <= .param_2)) && (.param_2 <= .param_1)) && (2 <= .param_3)) && (.param_3 <= .param_1)));
  .local_4 = (.param_1 / .param_2);
  if ((.local_4 >= .param_3))
  {
    .local_5 = .local_4;
    if ((.local_5 >= .param_3))
    {
      .local_5 = (.local_5 - .param_3);
      .local_4 = (.local_4 + 1);
      .local_5 = (.local_5 + 1);
    }
    while ((.local_5 >= .param_3))
    {
      .local_5 = (.local_5 - .param_3);
      .local_4 = (.local_4 + 1);
      .local_5 = (.local_5 + 1);
    }
  }
  .ret_0 = .local_4;
}

procedure LEFT_func8(int .param_1.0, int .param_2.1, int .param_3.2) returns
 (int .ret_0.3)
{
  int .local_4.4;
  int .local_5.5;
  assume(((((((2 <= .param_1.0) && (.param_1.0 <= 100000)) && (1 <= .param_2.1)) && (.param_2.1 <= .param_1.0)) && (2 <= .param_3.2)) && (.param_3.2 <= .param_1.0)));
  .local_4.4 = (.param_1.0 / .param_2.1);
  .local_5.5 = .local_4.4;
  while ((.param_3.2 <= .local_4.4))
  {
    .local_4.4 = (.local_4.4 - .param_3.2);
    .local_5.5 = (.local_5.5 + 1);
    .local_4.4 = (.local_4.4 + 1);
  }
  .ret_0.3 = .local_5.5;
}

$lentry LEFT_func8;
$rentry RIGHT_func12;
requires (.param_1.0 == .param_1);
requires (.param_2.1 == .param_2);
requires (.param_3.2 == .param_3);
ensures (.ret_0.3 == .ret_0);

