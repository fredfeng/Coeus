

procedure RIGHT_func17(int[int] .param_1, int .param_2) returns (int .ret_0)
{
  int .tmpret_3;
  assume(((1 <= .param_2) && (.param_2 <= 10000)));
  call .tmpret_3 = RIGHT_func16(.param_1, 0, (.param_2 - 1));
  .ret_0 = .tmpret_3;
}

procedure RIGHT_func16(int[int] .param_1.0, int .param_2.1, int .param_3)
 returns (int .ret_0.2)
{
  int inlined_.param_1.0;
  int inlined_.ret_0.1;
  int .tmpret_5;
  int .tmpret_6;
  int .local_4;
  if ((.param_2.1 < .param_3))
  {
    inlined_.param_1.0 = (.param_1.0[.param_2.1] - .param_1.0[.param_3]);
    inlined_.ret_0.1 = (if (inlined_.param_1.0 >= 0) then inlined_.param_1.0 else (- inlined_.param_1.0));
    .tmpret_5 = inlined_.ret_0.1;
    call .tmpret_6 = RIGHT_func16(.param_1.0, (.param_2.1 + 1),
     (.param_3 - 1));
    .local_4 = (.tmpret_5 + .tmpret_6);
    .ret_0.2 = .local_4;
  }
  else
  {
    .ret_0.2 = 0;
  }
}

procedure LEFT_func9(int[int] .param_1.3, int .param_2.4, int .param_3.5,
                     int .param_4)
 returns (int .ret_0.6)
{
  int inlined_.param_1.0.7;
  int inlined_.ret_0.1.8;
  int .tmpret_5.9;
  int .tmpret_6.10;
  if ((.param_2.4 >= .param_3.5))
  {
    .ret_0.6 = .param_4;
  }
  else
  {
    inlined_.param_1.0.7 = (.param_1.3[.param_2.4] - .param_1.3[.param_3.5]);
    inlined_.ret_0.1.8 = (if (inlined_.param_1.0.7 >= 0) then inlined_.param_1.0.7 else (- inlined_.param_1.0.7));
    .tmpret_5.9 = inlined_.ret_0.1.8;
    .param_4 = (.param_4 + .tmpret_5.9);
    call .tmpret_6.10 = LEFT_func9(.param_1.3, (.param_2.4 + 1),
     (.param_3.5 - 1), .param_4);
    .ret_0.6 = .tmpret_6.10;
  }
}

procedure LEFT_func11(int[int] .param_1.11, int .param_2.12) returns
 (int .ret_0.13)
{
  int .tmpret_3.14;
  assume(((1 <= .param_2.12) && (.param_2.12 <= 10000)));
  call .tmpret_3.14 = LEFT_func9(.param_1.11, 0, (.param_2.12 - 1), 0);
  .ret_0.13 = .tmpret_3.14;
}

$lentry LEFT_func11;
$rentry RIGHT_func17;
requires (.param_1.11 == .param_1);
requires (.param_2.12 == .param_2);
ensures (.param_1.11 == .param_1);
ensures (.ret_0.13 == .ret_0);

