declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  .local_6 = 2;
  for (.param_3 = 3 to 9)
  {
    .local_7 = -10;
    .param_4 = ((.local_7 + (.local_7 + .local_7)) % (.param_5 + .param_4));
    .local_6 = .param_4;
    .local_6 = bvand(0, bvand((- .local_6), (- .param_3)));
  }
  while (.param_2)
  {
    .param_3 = (.local_6 + bvand(bvand(.local_6, .param_4), bvand(.local_6,
     .param_4)));
    .local_7 = 1;
    .local_6 = bvor(bvxor(.param_3, .param_4), ((- .local_6) * bvor(.param_3,
     .local_7)));
    .param_2 = ((.local_6 < .param_5) != (! .param_2));
  }
  .ret_1 = .local_6;
}

procedure f1(bool .param_9, int .param_10, int .param_11, int .param_12)
 returns (int .ret_8)
{
  int .local_13;
  int .local_14;
  .local_13 = 2;
  for (.param_10 = 3 to 9 step 2)
  {
    .local_14 = -10;
    .param_11 = ((.local_14 + (.local_14 + .local_14)) % (.param_12 + .param_11));
    .local_13 = .param_11;
    .local_13 = bvand(0, bvand((- .local_13), (- .param_10)));
    if (((1 + .param_10) <= 8))
    {
      .local_14 = -10;
      .param_11 = ((.local_14 + (.local_14 + .local_14)) % (.param_12 + .param_11));
      .local_13 = .param_11;
      .local_13 = bvand(0, bvand((- .local_13), (- (1 + .param_10))));
    }
  }
  while (.param_9)
  {
    .param_10 = (.local_13 + bvand(bvand(.local_13, .param_11),
     bvand(.local_13, .param_11)));
    .local_14 = 1;
    .local_13 = bvor(bvxor(.param_10, .param_11),
     ((- .local_13) * bvor(.param_10, .local_14)));
    .param_9 = ((.local_13 < .param_12) != (! .param_9));
  }
  .ret_8 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
requires (.param_5 == .param_12);
ensures (.ret_1 == .ret_8);

