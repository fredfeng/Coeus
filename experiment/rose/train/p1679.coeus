declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  bool .local_6;
  int .local_7;
  .local_5 = bvor(.param_2, .param_2);
  for (.param_4 = 0 to .local_5)
  {
    .local_6 = (bvand(.param_4, .param_4) < (.local_5 / .param_2));
    for (.local_7 = 0 to 1)
    {
      if ((.local_5 != .param_2))
      {
        .local_5 = bvor(bvand(3, .local_5), (.local_5 % .param_2));
        .local_5 = (64 / bvand(.local_5, bvor(.local_5, .local_5)));
      }
      else
      {
        .local_6 = (.param_3 != false);
      }
    }
    while (.local_6)
    {
      
    }
  }
  .local_5 = bvand(.param_2, .local_5);
  .param_2 = (.local_5 * (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5))))))));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  bool .local_13;
  int .local_14;
  .local_12 = bvor(.param_9, .param_9);
  for (.param_11 = 0 to .local_12)
  {
    .local_13 = (bvand(.param_11, .param_11) < (.local_12 / .param_9));
    for (.local_14 = 0 to 1 step 2)
    {
      if ((.local_12 != .param_9))
      {
        .local_12 = bvor(bvand(3, .local_12), (.local_12 % .param_9));
        .local_12 = (64 / bvand(.local_12, bvor(.local_12, .local_12)));
      }
      else
      {
        .local_13 = (.param_10 != false);
      }
      if (((1 + .local_14) <= 0))
      {
        if ((.local_12 != .param_9))
        {
          .local_12 = bvor(bvand(3, .local_12), (.local_12 % .param_9));
          .local_12 = (64 / bvand(.local_12, bvor(.local_12, .local_12)));
        }
        else
        {
          .local_13 = (.param_10 != false);
        }
      }
    }
    while (.local_13)
    {
      
    }
  }
  .local_12 = bvand(.param_9, .local_12);
  .param_9 = (.local_12 * (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12))))))));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

