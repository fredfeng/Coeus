declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0() returns (int .ret_1)
{
  bool .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_3 = 9;
  .local_2 = true;
  .local_5 = (- bvand(0, .local_3));
  .local_4 = (7 + .local_3);
  .local_7 = 32;
  for (.local_5 = 0 to 64)
  {
    if ((! .local_2))
    {
      .local_6 = bvxor(.local_4, (bvor(.local_5, .local_4) / bvor(.local_5,
       .local_3)));
      for (.local_7 = 4 to 5)
      {
        .local_4 = bvxor(.local_7, 13);
        .local_6 = .local_4;
      }
      while ((.local_4 != .local_3))
      {
        .local_3 = (.local_6 % .local_5);
        .local_4 = bvxor(.local_3, 7);
      }
    }
    else
    {
      .local_3 = bvxor(.local_3, (- .local_5));
    }
  }
  .ret_1 = .local_3;
}

procedure f1() returns (int .ret_8)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_10 = 9;
  .local_9 = true;
  .local_12 = (- bvand(0, .local_10));
  .local_11 = (7 + .local_10);
  .local_14 = 32;
  for (.local_12 = 0 to 64)
  {
    if ((! .local_9))
    {
      .local_13 = bvxor(.local_11, (bvor(.local_12,
       .local_11) / bvor(.local_12, .local_10)));
      for (.local_14 = 4 to 5 step 2)
      {
        .local_11 = bvxor(.local_14, 13);
        .local_13 = .local_11;
        if (((1 + .local_14) <= 4))
        {
          .local_11 = bvxor((1 + .local_14), 13);
          .local_13 = .local_11;
        }
      }
      while ((.local_11 != .local_10))
      {
        .local_10 = (.local_13 % .local_12);
        .local_11 = bvxor(.local_10, 7);
      }
    }
    else
    {
      .local_10 = bvxor(.local_10, (- .local_12));
    }
  }
  .ret_8 = .local_10;
}

$lentry f0;
$rentry f1;

ensures (.ret_1 == .ret_8);

