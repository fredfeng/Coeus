

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  .local_5 = 64;
  .local_5 = .param_4;
  .param_3 = (- .param_3);
  for (.param_3 = 0 to .param_4)
  {
    .local_5 = (- .param_3);
    for (.local_6 = 8 to 32)
    {
      if (.param_2)
      {
        .local_5 = (0 / (.local_5 % 1));
      }
      else
      {
        .local_5 = .param_4;
      }
    }
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_8, int .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  .local_11 = 64;
  .local_11 = .param_10;
  .param_9 = (- .param_9);
  for (.param_9 = 0 to .param_10)
  {
    .local_11 = (- .param_9);
    for (.local_12 = 8 to 32 step 2)
    {
      if (.param_8)
      {
        .local_11 = (0 / (.local_11 % 1));
      }
      else
      {
        .local_11 = .param_10;
      }
      if (((1 + .local_12) <= 31))
      {
        if (.param_8)
        {
          .local_11 = (0 / (.local_11 % 1));
        }
        else
        {
          .local_11 = .param_10;
        }
      }
    }
  }
  .ret_7 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

