declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 4;
  .local_5 = bvor((.local_4 * .local_4), 3);
  if ((! .param_2))
  {
    .local_6 = bvand(((.param_3 / 7) / .param_3), 1);
    if ((.local_5 >= (.local_5 % .local_6)))
    {
      .local_5 = .local_4;
      .local_5 = (.param_3 / (.local_5 * .param_3));
    }
    else
    {
      .local_7 = (.param_3 - 9);
      .local_5 = (((.local_7 * .local_7) / 2) - .local_4);
    }
    .local_4 = (- (bvand(.local_5, .local_5) + (10 - .local_5)));
  }
  else
  {
    for (.local_6 = 32 to 64)
    {
      .local_7 = .local_5;
      .param_3 = (- (.param_3 * 64));
      .local_4 = (16 + (.local_7 + .param_3));
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_9, int .param_10) returns (int .ret_8)
{
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 4;
  .local_12 = bvor((.local_11 * .local_11), 3);
  if ((! .param_9))
  {
    .local_13 = bvand(((.param_10 / 7) / .param_10), 1);
    if ((.local_12 >= (.local_12 % .local_13)))
    {
      .local_12 = .local_11;
      .local_12 = (.param_10 / (.local_12 * .param_10));
    }
    else
    {
      .local_14 = (.param_10 - 9);
      .local_12 = (((.local_14 * .local_14) / 2) - .local_11);
    }
    .local_11 = (- (bvand(.local_12, .local_12) + (10 - .local_12)));
  }
  else
  {
    for (.local_13 = 32 to 64 step 2)
    {
      .local_14 = .local_12;
      .param_10 = (- (.param_10 * 64));
      .local_11 = (16 + (.local_14 + .param_10));
      if (((1 + .local_13) <= 63))
      {
        .local_14 = .local_12;
        .param_10 = (- (.param_10 * 64));
        .local_11 = (16 + (.local_14 + .param_10));
      }
    }
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

