declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = 3;
  .local_4 = false;
  .local_8 = (.local_5 / 5);
  .local_7 = bvxor(((.local_5 + 4) + (.local_5 + (.local_5 + .local_5))),
   bvxor((.local_5 - 2), 32));
  for (.local_8 = 0 to 2)
  {
    for (.param_2 = 1 to 7)
    {
      .local_6 = (.local_8 * .param_2);
      .local_5 = (bvand((.local_5 * 32),
       (.local_6 / .local_7)) + bvand((- .param_3), (.param_2 + .param_3)));
    }
    .local_7 = .local_5;
  }
  .local_5 = .local_7;
  .ret_1 = .local_5;
}

procedure f1(int .param_10, int .param_11) returns (int .ret_9)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = 3;
  .local_12 = false;
  .local_16 = (.local_13 / 5);
  .local_15 = bvxor(((.local_13 + 4) + (.local_13 + (.local_13 + .local_13))),
   bvxor((.local_13 - 2), 32));
  for (.local_16 = 0 to 2)
  {
    for (.param_10 = 1 to 7 step 2)
    {
      .local_14 = (.local_16 * .param_10);
      .local_13 = (bvand((.local_13 * 32),
       (.local_14 / .local_15)) + bvand((- .param_11),
       (.param_10 + .param_11)));
      if (((1 + .param_10) <= 6))
      {
        .local_14 = (.local_16 * (1 + .param_10));
        .local_13 = (bvand((.local_13 * 32),
         (.local_14 / .local_15)) + bvand((- .param_11),
         ((1 + .param_10) + .param_11)));
      }
    }
    .local_15 = .local_13;
  }
  .local_13 = .local_15;
  .ret_9 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

