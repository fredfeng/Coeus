declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  .local_4 = false;
  .local_5 = ((.param_2 / 8) - .param_2);
  if (.local_4)
  {
    .param_2 = (.param_2 + (.param_2 + (.param_2 + (.param_2 + .param_2))));
  }
  else
  {
    .param_3 = 0;
    while ((.param_3 < 10))
    {
      .local_5 = 0;
      while ((.local_5 < .param_2))
      {
        .param_3 = (bvxor(.param_2, .param_2) - bvand(.param_2, 32));
        .param_2 = (bvxor(1, .param_2) * .local_5);
        .local_5 = (.local_5 + 1);
      }
      if (((.local_4 == .local_4) && .local_4))
      {
        .param_2 = (.param_3 * .param_2);
      }
      else
      {
        .param_3 = .param_2;
        .param_2 = (.param_3 + .param_2);
      }
      .param_3 = (.param_3 + 1);
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_7, int .param_8) returns (int .ret_6)
{
  bool .local_9;
  int .local_10;
  .local_9 = false;
  .local_10 = ((.param_7 / 8) - .param_7);
  if (.local_9)
  {
    .param_7 = (.param_7 + (.param_7 + (.param_7 + (.param_7 + .param_7))));
  }
  else
  {
    .param_8 = 0;
    while ((.param_8 <= 9))
    {
      .local_10 = 0;
      while ((.local_10 <= (-1 + .param_7)))
      {
        .param_8 = (bvxor(.param_7, .param_7) - bvand(.param_7, 32));
        .local_10 = (.local_10 + 1);
      }
      .local_10 = 0;
      while ((.local_10 <= (-1 + .param_7)))
      {
        .param_7 = (bvxor(1, .param_7) * .local_10);
        .local_10 = (.local_10 + 1);
      }
      if (((.local_9 == .local_9) && .local_9))
      {
        .param_7 = (.param_8 * .param_7);
      }
      else
      {
        .param_8 = .param_7;
        .param_7 = (.param_8 + .param_7);
      }
      .param_8 = (.param_8 + 1);
    }
  }
  .ret_6 = .param_7;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_7);
requires (.param_3 == .param_8);
ensures (.ret_1 == .ret_6);

