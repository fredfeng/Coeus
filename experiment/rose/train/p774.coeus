declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = true;
  .local_5 = bvxor((- .param_2), bvor(.param_2, .param_2));
  for (.local_5 = 0 to 10)
  {
    if (((.param_3 + .local_5) < (.local_5 + 4)))
    {
      .local_7 = bvxor((.param_2 - .local_5), bvand(7, .param_2));
      .param_3 = (- .local_7);
      if ((.local_4 == (.param_3 <= 8)))
      {
        .param_3 = 0;
      }
      else
      {
        .param_3 = bvand(0, .param_3);
      }
    }
    else
    {
      for (.local_6 = 0 to 0)
      {
        .param_3 = ((.param_3 - .param_2) + .param_3);
      }
    }
    .param_2 = (bvand(0, .param_3) / .param_3);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = true;
  .local_12 = bvxor((- .param_9), bvor(.param_9, .param_9));
  for (.local_12 = 0 to 10)
  {
    if (((.param_10 + .local_12) < (.local_12 + 4)))
    {
      .local_14 = bvxor((.param_9 - .local_12), bvand(7, .param_9));
      .param_10 = (- .local_14);
      if ((.local_11 == (.param_10 <= 8)))
      {
        .param_10 = 0;
      }
      else
      {
        .param_10 = bvand(0, .param_10);
      }
    }
    else
    {
      for (.local_13 = 0 to 0 step 2)
      {
        .param_10 = ((.param_10 - .param_9) + .param_10);
        if (((1 + .local_13) <= -1))
        {
          .param_10 = ((.param_10 - .param_9) + .param_10);
        }
      }
    }
    .param_9 = (bvand(0, .param_10) / .param_10);
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

