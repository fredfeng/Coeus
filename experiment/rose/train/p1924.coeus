declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_6 = .param_2;
  .local_5 = (bvxor(.param_2, .param_2) * (.param_2 % .param_2));
  .local_4 = 1;
  .local_6 = bvor(.param_2, .param_2);
  while ((.local_6 > 4))
  {
    .local_7 = (- .local_5);
    if (.param_3)
    {
      .local_7 = 1;
      while (false)
      {
        .param_2 = .local_4;
      }
    }
    else
    {
      if (.param_3)
      {
        .param_2 = 0;
        .local_6 = (.local_6 - (.local_7 - .local_6));
      }
      else
      {
        .local_6 = .local_5;
        .local_7 = .param_2;
      }
    }
    .local_5 = (7 - (.local_6 - 1));
    .local_4 = ((.param_2 / 2) - bvor(3, .local_7));
    .local_6 = (.local_6 - 1);
  }
  for (.local_5 = 1 to 16)
  {
    .local_4 = (bvxor(.local_5, (64 + .local_5)) - 1);
  }
  .param_2 = (4 - (16 - .param_2));
  .param_2 = ((- .param_2) + bvxor(.param_2, .local_4));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10) returns (int .ret_8)
{
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_13 = .param_9;
  .local_12 = (bvxor(.param_9, .param_9) * (.param_9 % .param_9));
  .local_11 = 1;
  .local_13 = bvor(.param_9, .param_9);
  while ((.local_13 >= 5))
  {
    .local_14 = (- .local_12);
    if (.param_10)
    {
      .local_14 = 1;
      while (false)
      {
        .param_9 = .local_11;
      }
    }
    else
    {
      if (.param_10)
      {
        .param_9 = 0;
        .local_13 = (.local_13 - (.local_14 - .local_13));
      }
      else
      {
        .local_13 = .local_12;
        .local_14 = .param_9;
      }
    }
    .local_12 = (7 - (.local_13 - 1));
    .local_11 = ((.param_9 / 2) - bvor(3, .local_14));
    .local_13 = (.local_13 - 1);
  }
  for (.local_12 = 1 to 16 step 2)
  {
    .local_11 = (bvxor(.local_12, (64 + .local_12)) - 1);
    if (((1 + .local_12) <= 15))
    {
      .local_11 = (bvxor((1 + .local_12), (64 + (1 + .local_12))) - 1);
    }
  }
  .param_9 = (4 - (16 - .param_9));
  .param_9 = ((- .param_9) + bvxor(.param_9, .local_11));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

