declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, bool .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = 32;
  .local_8 = bvand(.local_5, .local_5);
  .local_6 = (6 + bvand(.local_5, .local_5));
  for (.local_6 = 0 to bvxor(.local_5, 4))
  {
    .local_7 = bvor(.param_3, .local_6);
    if ((8 != .local_7))
    {
      .local_7 = 0;
    }
    else
    {
      for (.local_8 = 1 to 7)
      {
        .param_3 = (.local_8 * bvand(bvxor(.local_7, 6), -3));
      }
    }
    if ((! .param_2))
    {
      .param_3 = 0;
    }
    else
    {
      if (.param_4)
      {
        .param_3 = bvand(bvand(.local_5, bvxor(.param_3, 2)), .local_6);
      }
      else
      {
        .local_5 = (((.local_6 + .local_7) - (.local_6 * .param_3)) / .local_7);
      }
    }
  }
  .local_5 = (64 % (.param_3 + .local_5));
  .ret_1 = .local_5;
}

procedure f1(bool .param_10, int .param_11, bool .param_12) returns
 (int .ret_9)
{
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = 32;
  .local_16 = bvand(.local_13, .local_13);
  .local_14 = (6 + bvand(.local_13, .local_13));
  for (.local_14 = 0 to bvxor(.local_13, 4))
  {
    .local_15 = bvor(.param_11, .local_14);
    if ((8 != .local_15))
    {
      .local_15 = 0;
    }
    else
    {
      for (.local_16 = 1 to 7 step 2)
      {
        .param_11 = (.local_16 * bvand(bvxor(.local_15, 6), -3));
        if (((1 + .local_16) <= 6))
        {
          .param_11 = ((1 + .local_16) * bvand(bvxor(.local_15, 6), -3));
        }
      }
    }
    if ((! .param_10))
    {
      .param_11 = 0;
    }
    else
    {
      if (.param_12)
      {
        .param_11 = bvand(bvand(.local_13, bvxor(.param_11, 2)), .local_14);
      }
      else
      {
        .local_13 = (((.local_14 + .local_15) - (.local_14 * .param_11)) / .local_15);
      }
    }
  }
  .local_13 = (64 % (.param_11 + .local_13));
  .ret_9 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

