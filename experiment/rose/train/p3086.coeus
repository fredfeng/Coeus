declare int bvxor(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  .local_4 = (bvxor(.param_2, .param_2) + .param_2);
  for (.local_4 = 1 to 6)
  {
    if (.param_3)
    {
      .local_5 = (- (.local_4 + 32));
      .local_5 = ((- (64 % .local_5)) + (.local_5 % .local_5));
    }
    else
    {
      .local_5 = .local_4;
    }
    .param_2 = (0 / bvxor(.local_5, 2));
    .param_2 = (- (64 - .param_2));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_7, bool .param_8) returns (int .ret_6)
{
  int .local_9;
  int .local_10;
  .local_9 = (bvxor(.param_7, .param_7) + .param_7);
  for (.local_9 = 1 to 6 step 2)
  {
    if (.param_8)
    {
      .local_10 = (- (.local_9 + 32));
      .local_10 = ((- (64 % .local_10)) + (.local_10 % .local_10));
    }
    else
    {
      .local_10 = .local_9;
    }
    .param_7 = (0 / bvxor(.local_10, 2));
    .param_7 = (- (64 - .param_7));
    if (((1 + .local_9) <= 5))
    {
      if (.param_8)
      {
        .local_10 = (- ((1 + .local_9) + 32));
        .local_10 = ((- (64 % .local_10)) + (.local_10 % .local_10));
      }
      else
      {
        .local_10 = (1 + .local_9);
      }
      .param_7 = (0 / bvxor(.local_10, 2));
      .param_7 = (- (64 - .param_7));
    }
  }
  .ret_6 = .param_7;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_7);
requires (.param_3 == .param_8);
ensures (.ret_1 == .ret_6);

