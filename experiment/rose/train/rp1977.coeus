declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = bvor(bvxor(5, .param_2), (.param_2 / 32));
  for (.local_7 = 0 to (2 / .param_5))
  {
    .param_5 = 7;
    .param_2 = .param_4;
  }
  for (.param_4 = 0 to 6)
  {
    .local_7 = (2 % ((.param_2 - .local_6) + .param_2));
    .local_7 = bvand((7 % .local_7), (16 - .param_4));
    if (.param_3)
    {
      .local_8 = (.param_2 * .param_2);
      if (((5 % .local_8) == (.param_4 - .param_5)))
      {
        .local_6 = (.param_5 % (.local_6 + .param_5));
        .param_2 = (- (.local_7 - .local_6));
      }
      else
      {
        .param_2 = (.local_8 * .local_6);
      }
    }
    else
    {
      if (.param_3)
      {
        .param_3 = (((.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + .local_6))))))))) >= 0) && .param_3);
        .param_2 = .param_4;
      }
      else
      {
        .param_3 = (.param_3 != (! .param_3));
      }
      while (.param_3)
      {
        
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = bvor(bvxor(5, .param_10), (.param_10 / 32));
  for (.local_15 = 0 to ((-1 + (2 / .param_13)) + 1))
  {
    .param_13 = 7;
  }
  for (.local_15 = 0 to ((-1 + (2 / .param_13)) + 1))
  {
    .param_10 = .param_12;
  }
  for (.param_12 = 0 to 6)
  {
    .local_15 = (2 % ((.param_10 - .local_14) + .param_10));
    .local_15 = bvand((7 % .local_15), (16 - .param_12));
    if (.param_11)
    {
      .local_16 = (.param_10 * .param_10);
      if (((5 % .local_16) == (.param_12 - .param_13)))
      {
        .local_14 = (.param_13 % (.local_14 + .param_13));
        .param_10 = (- (.local_15 - .local_14));
      }
      else
      {
        .param_10 = (.local_16 * .local_14);
      }
    }
    else
    {
      if (.param_11)
      {
        .param_11 = (((.local_14 + (.local_14 + (.local_14 + (.local_14 + (.local_14 + (.local_14 + (.local_14 + (.local_14 + (.local_14 + .local_14))))))))) >= 0) && .param_11);
        .param_10 = .param_12;
      }
      else
      {
        .param_11 = (.param_11 != (! .param_11));
      }
      while (.param_11)
      {
        
      }
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

