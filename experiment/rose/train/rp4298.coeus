declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_9 = .param_2;
  .local_7 = (bvxor(2, .param_2) * bvxor(.param_2, .param_2));
  .local_4 = 2;
  for (.local_8 = 3 to 32)
  {
    .local_9 = .local_4;
    .param_2 = bvor((.param_2 + .param_2), -3);
  }
  .local_5 = ((- .param_2) >= .local_4);
  .local_6 = (.local_7 - bvor(.param_2, .local_7));
  .local_7 = (8 - .local_4);
  while ((.local_7 < 5))
  {
    .local_8 = .local_6;
    .local_7 = .local_9;
    .local_9 = 0;
    while ((.local_9 < -10))
    {
      .param_3 = (! ((1 % .local_8) == .local_4));
      .local_9 = (.local_9 + 1);
    }
    if (.local_5)
    {
      .param_2 = (9 % (- (.param_2 * .local_7)));
    }
    else
    {
      .local_10 = 31;
      if (.param_3)
      {
        .param_2 = bvor((.local_4 / .local_6), (6 + .local_4));
      }
      else
      {
        .local_8 = 64;
        .param_2 = (16 - (.local_10 - .local_8));
      }
    }
    .local_7 = (.local_7 + 1);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_12, bool .param_13) returns (int .ret_11)
{
  int .local_14;
  bool .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  int .local_19;
  int .local_20;
  .local_19 = .param_12;
  .local_17 = (bvxor(2, .param_12) * bvxor(.param_12, .param_12));
  .local_14 = 2;
  for (.local_18 = 3 to 32)
  {
    .local_19 = .local_14;
  }
  for (.local_18 = 3 to 32)
  {
    .param_12 = bvor((.param_12 + .param_12), -3);
  }
  .local_15 = ((- .param_12) >= .local_14);
  .local_16 = (.local_17 - bvor(.param_12, .local_17));
  for (.local_17 = (8 - .local_14) to 5)
  {
    .local_18 = .local_16;
    if (.local_15)
    {
      .param_12 = (9 % (- (.param_12 * .local_17)));
    }
    else
    {
      .local_20 = 31;
      if (.param_13)
      {
        .param_12 = bvor((.local_14 / .local_16), (6 + .local_14));
      }
      else
      {
        .local_18 = 64;
        .param_12 = (16 - (.local_20 - .local_18));
      }
    }
  }
  .local_17 = (8 - .local_14);
  while ((.local_17 <= 4))
  {
    .local_17 = .local_19;
    .local_17 = (.local_17 + 1);
  }
  .ret_11 = .param_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_12);
requires (.param_3 == .param_13);
ensures (.ret_1 == .ret_11);

