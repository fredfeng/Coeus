declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2) returns (int .ret_1)
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_3 = 5;
  .local_4 = 7;
  .local_3 = (bvand(.local_3, .local_3) + bvor(6, .local_4));
  .local_6 = bvxor(bvxor(0, .local_3), 1);
  .local_3 = 2;
  for (.local_4 = 0 to (4 / .local_3))
  {
    .local_3 = 1;
    for (.local_6 = 0 to 7)
    {
      .local_5 = bvor(bvand(32, .local_6), .local_4);
      .local_3 = (64 - .local_5);
    }
  }
  .ret_1 = .local_3;
}

procedure f1(bool .param_8) returns (int .ret_7)
{
  int .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  .local_9 = 5;
  .local_10 = 7;
  .local_9 = (bvand(.local_9, .local_9) + bvor(6, .local_10));
  .local_12 = bvxor(bvxor(0, .local_9), 1);
  .local_9 = 2;
  for (.local_10 = 0 to (4 / .local_9))
  {
    .local_9 = 1;
    for (.local_12 = 0 to 7 step 2)
    {
      .local_11 = bvor(bvand(32, .local_12), .local_10);
      .local_9 = (64 - .local_11);
      if (((1 + .local_12) <= 6))
      {
        .local_11 = bvor(bvand(32, (1 + .local_12)), .local_10);
        .local_9 = (64 - .local_11);
      }
    }
  }
  .ret_7 = .local_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
ensures (.ret_1 == .ret_7);

