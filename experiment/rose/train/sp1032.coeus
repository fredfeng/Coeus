declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 1;
  .local_5 = bvor(.local_4, .local_4);
  for (.local_6 = 0 to (.local_4 * .local_5))
  {
    .local_7 = (- bvor(.local_4, .local_5));
    for (.param_3 = 0 to 4)
    {
      if (.param_2)
      {
        .local_4 = (- .local_4);
      }
      else
      {
        .local_8 = 0;
        .local_4 = ((bvxor(.local_7, .local_8) - bvand(5, .param_3)) % -160);
      }
    }
    .local_7 = -7;
    .local_5 = (.local_7 % .local_4);
  }
  .local_4 = 0;
  while ((0 <= (32 * .local_4)))
  {
    .local_4 = .local_5;
    .local_4 = bvor(-1, .local_4);
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 1;
  .local_13 = bvor(.local_12, .local_12);
  for (.local_14 = 0 to (.local_12 * .local_13))
  {
    .local_15 = (- bvor(.local_12, .local_13));
    for (.param_11 = 0 to 4 step 2)
    {
      if (.param_10)
      {
        .local_12 = (- .local_12);
      }
      else
      {
        .local_16 = 0;
        .local_12 = ((bvxor(.local_15, .local_16) - bvand(5,
         .param_11)) % -160);
      }
      if (((1 + .param_11) <= 3))
      {
        if (.param_10)
        {
          .local_12 = (- .local_12);
        }
        else
        {
          .local_16 = 0;
          .local_12 = ((bvxor(.local_15, .local_16) - bvand(5,
           (1 + .param_11))) % -160);
        }
      }
    }
    .local_15 = -7;
    .local_13 = (.local_15 % .local_12);
  }
  .local_12 = 0;
  while ((0 <= (32 * .local_12)))
  {
    .local_12 = .local_13;
    .local_12 = bvor(-1, .local_12);
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

