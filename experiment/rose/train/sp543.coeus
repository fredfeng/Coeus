declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  bool .local_6;
  int .local_7;
  int .local_8;
  .local_6 = true;
  .local_7 = 2;
  .local_8 = ((.param_2 + .param_2) + 4);
  if ((! .local_6))
  {
    for (.local_8 = 0 to 9)
    {
      .param_4 = (bvor(.param_5, 32) * bvand(1, .local_8));
    }
    .param_5 = -74;
  }
  else
  {
    .local_7 = 10;
    while ((.local_7 > bvand(.param_2, 7)))
    {
      if (.local_6)
      {
        .param_3 = ((- .local_7) / .param_2);
      }
      else
      {
        .local_7 = 16;
        .param_5 = 2;
      }
      .param_4 = ((8 - .param_3) * (.local_7 + (.local_7 + .local_7)));
      .local_7 = (.local_7 - 1);
    }
  }
  .param_2 = (- (.param_5 / .param_4));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  bool .local_14;
  int .local_15;
  int .local_16;
  .local_14 = true;
  .local_15 = 2;
  .local_16 = ((.param_10 + .param_10) + 4);
  if ((! .local_14))
  {
    for (.local_16 = 0 to 9 step 2)
    {
      .param_12 = (bvor(.param_13, 32) * bvand(1, .local_16));
      if (((1 + .local_16) <= 8))
      {
        .param_12 = (bvor(.param_13, 32) * bvand(1, (1 + .local_16)));
      }
    }
    .param_13 = -74;
  }
  else
  {
    .local_15 = 10;
    while ((.local_15 >= (bvand(.param_10, 7) + 1)))
    {
      if (.local_14)
      {
        .param_11 = ((- .local_15) / .param_10);
      }
      else
      {
        .local_15 = 16;
        .param_13 = 2;
      }
      .param_12 = ((8 - .param_11) * (.local_15 + (.local_15 + .local_15)));
      .local_15 = (.local_15 - 1);
    }
  }
  .param_10 = (- (.param_13 / .param_12));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

