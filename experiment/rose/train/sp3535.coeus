declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_4 = 16;
  .local_7 = .local_4;
  .local_5 = 5;
  .local_6 = .local_7;
  .local_7 = .local_5;
  for (.local_7 = 0 to .local_6)
  {
    while ((0 == bvxor(.param_3, 5)))
    {
      .local_6 = (- bvor((.local_6 * .local_4), bvor(.local_4, .local_7)));
    }
    if ((.param_2 && .param_2))
    {
      .local_8 = bvxor((.local_6 + .local_5), 32);
      .param_3 = bvor((- (.local_8 + (.local_8 + (.local_8 + (.local_8 + (.local_8 + (.local_8 + .local_8))))))),
       .local_6);
    }
    else
    {
      .local_8 = .param_3;
      for (.local_9 = 2 to 3)
      {
        .local_5 = .local_8;
        .param_3 = .local_5;
      }
      .local_5 = (.local_6 / .param_3);
    }
  }
  .local_4 = ((- .local_5) + bvand((- .param_3), bvxor(10, .param_3)));
  .ret_1 = .local_4;
}

procedure f1(bool .param_11, int .param_12) returns (int .ret_10)
{
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_13 = 16;
  .local_16 = .local_13;
  .local_14 = 5;
  .local_15 = .local_16;
  .local_16 = .local_14;
  for (.local_16 = 0 to .local_15)
  {
    while ((0 == bvxor(.param_12, 5)))
    {
      .local_15 = (- bvor((.local_15 * .local_13), bvor(.local_13,
       .local_16)));
    }
    if ((.param_11 && .param_11))
    {
      .local_17 = bvxor((.local_15 + .local_14), 32);
      .param_12 = bvor((- (.local_17 + (.local_17 + (.local_17 + (.local_17 + (.local_17 + (.local_17 + .local_17))))))),
       .local_15);
    }
    else
    {
      .local_17 = .param_12;
      for (.local_18 = 2 to 3 step 2)
      {
        .local_14 = .local_17;
        .param_12 = .local_14;
        if (((1 + .local_18) <= 2))
        {
          .local_14 = .local_17;
          .param_12 = .local_14;
        }
      }
      .local_14 = (.local_15 / .param_12);
    }
  }
  .local_13 = ((- .local_14) + bvand((- .param_12), bvxor(10, .param_12)));
  .ret_10 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
ensures (.ret_1 == .ret_10);

