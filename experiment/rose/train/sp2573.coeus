declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  bool .local_6;
  int .local_7;
  int .local_8;
  .local_8 = 5;
  .local_7 = (2 % .param_2);
  .local_5 = (bvor(.param_4, .local_8) % (64 + .local_8));
  for (.param_4 = 0 to 8)
  {
    .local_6 = true;
    while ((! .param_3))
    {
      .local_7 = bvand(.local_7, bvxor(32, .local_8));
    }
    while ((.local_8 <= (.local_7 / 9)))
    {
      while (((32 >= .local_8) && .local_6))
      {
        .param_2 = .local_8;
        .param_2 = 0;
      }
      .local_8 = (.local_8 + (.local_5 - .param_2));
    }
  }
  for (.local_8 = 0 to 32)
  {
    .local_5 = .param_2;
  }
  .param_2 = .local_5;
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12) returns
 (int .ret_9)
{
  int .local_13;
  bool .local_14;
  int .local_15;
  int .local_16;
  .local_16 = 5;
  .local_15 = (2 % .param_10);
  .local_13 = (bvor(.param_12, .local_16) % (64 + .local_16));
  for (.param_12 = 0 to 8)
  {
    .local_14 = true;
    while ((! .param_11))
    {
      .local_15 = bvand(.local_15, bvxor(32, .local_16));
    }
    while ((.local_16 <= (.local_15 / 9)))
    {
      while (((32 >= .local_16) && .local_14))
      {
        .param_10 = .local_16;
        .param_10 = 0;
      }
      .local_16 = (.local_16 + (.local_13 - .param_10));
    }
  }
  for (.local_16 = 0 to 32 step 2)
  {
    .local_13 = .param_10;
    if (((1 + .local_16) <= 31))
    {
      .local_13 = .param_10;
    }
  }
  .param_10 = .local_13;
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

