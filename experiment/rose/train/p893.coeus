declare int bvxor(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = 1;
  .local_3 = true;
  .local_4 = .param_2;
  for (.local_5 = 1 to 6)
  {
    for (.local_6 = 0 to -32)
    {
      if (.local_3)
      {
        .local_4 = (.local_4 / 10);
        .param_2 = (.local_4 / (- .param_2));
      }
    }
    .local_4 = (- bvxor(16, .param_2));
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_8) returns (int .ret_7)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = 1;
  .local_9 = true;
  .local_10 = .param_8;
  for (.local_11 = 1 to 6)
  {
    for (.local_12 = 0 to -32 step 2)
    {
      if (.local_9)
      {
        .local_10 = (.local_10 / 10);
        .param_8 = (.local_10 / (- .param_8));
      }
      if (((1 + .local_12) <= -33))
      {
        if (.local_9)
        {
          .local_10 = (.local_10 / 10);
          .param_8 = (.local_10 / (- .param_8));
        }
      }
    }
    .local_10 = (- bvxor(16, .param_8));
  }
  .ret_7 = .local_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
ensures (.ret_1 == .ret_7);

