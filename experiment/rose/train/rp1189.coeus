declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  bool .local_7;
  .local_6 = 6;
  .local_5 = true;
  while ((1 >= .param_4))
  {
    .local_7 = .local_5;
    .param_3 = 0;
    while ((.param_3 < .local_6))
    {
      if (.local_7)
      {
        .local_6 = bvxor((bvor(9, .local_6) - .param_2), 4);
      }
      else
      {
        .local_6 = bvor(bvand(.param_3, .param_2), bvand(.local_6, .param_2));
      }
      .param_4 = -32;
      .param_3 = (.param_3 + 1);
    }
    .param_2 = (.param_4 + .local_6);
    while ((.param_2 > 32))
    {
      .param_3 = 2;
      .param_2 = (7 - bvxor(.local_6, 2));
      .param_4 = ((.param_3 + 2) + ((.param_3 + 2) + ((.param_3 + 2) + (.param_3 + 2))));
      if (((1 - .local_6) != bvand(.param_4, 0)))
      {
        .local_6 = ((.param_4 + 16) / .param_2);
      }
      .param_2 = (.param_2 - 1);
    }
    .param_4 = .local_6;
  }
  .local_6 = ((.param_4 % .param_4) * bvand(.param_4, .param_4));
  .ret_1 = .local_6;
}

procedure f1(int .param_9, int .param_10, int .param_11) returns (int .ret_8)
{
  bool .local_12;
  int .local_13;
  bool .local_14;
  .local_13 = 6;
  .local_12 = true;
  while ((1 >= .param_11))
  {
    .local_14 = .local_12;
    .param_10 = 0;
    while ((.param_10 <= (-1 + .local_13)))
    {
      if (.local_14)
      {
        .local_13 = bvxor((bvor(9, .local_13) - .param_9), 4);
      }
      else
      {
        .local_13 = bvor(bvand(.param_10, .param_9), bvand(.local_13,
         .param_9));
      }
      .param_10 = (.param_10 + 1);
    }
    .param_10 = 0;
    while ((.param_10 <= (-1 + .local_13)))
    {
      .param_11 = -32;
      .param_10 = (.param_10 + 1);
    }
    .param_9 = (.param_11 + .local_13);
    while ((.param_9 >= 33))
    {
      .param_10 = 2;
      .param_9 = (7 - bvxor(.local_13, 2));
      .param_11 = ((.param_10 + 2) + ((.param_10 + 2) + ((.param_10 + 2) + (.param_10 + 2))));
      if (((1 - .local_13) != bvand(.param_11, 0)))
      {
        .local_13 = ((.param_11 + 16) / .param_9);
      }
      .param_9 = (.param_9 - 1);
    }
    .param_11 = .local_13;
  }
  .local_13 = ((.param_11 % .param_11) * bvand(.param_11, .param_11));
  .ret_8 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

