declare int bvxor(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_5 = 3;
  .local_4 = false;
  while (.local_4)
  {
    .local_6 = (.param_3 / (- .param_2));
    .local_7 = .param_2;
    .param_3 = (- (.param_3 - .local_5));
    while ((1 != .param_2))
    {
      while ((7 == (- .local_7)))
      {
        .param_3 = (-3 * (.param_3 - .local_6));
      }
    }
  }
  for (.param_2 = 9 to 32)
  {
    .local_6 = (bvxor(bvxor(.local_5, .local_5), 0) + .param_3);
    .local_7 = (9 - .local_6);
    .param_3 = (.param_2 - .local_7);
  }
  .local_5 = (1 / (.local_5 - .param_3));
  .ret_1 = .local_5;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_12 = 3;
  .local_11 = false;
  while (.local_11)
  {
    .local_13 = (.param_10 / (- .param_9));
    .local_14 = .param_9;
    .param_10 = (- (.param_10 - .local_12));
    while ((1 != .param_9))
    {
      while ((7 == (- .local_14)))
      {
        .param_10 = (-3 * (.param_10 - .local_13));
      }
    }
  }
  for (.param_9 = 9 to 32 step 2)
  {
    .local_13 = (bvxor(bvxor(.local_12, .local_12), 0) + .param_10);
    .local_14 = (9 - .local_13);
    .param_10 = (.param_9 - .local_14);
    if (((1 + .param_9) <= 31))
    {
      .local_13 = (bvxor(bvxor(.local_12, .local_12), 0) + .param_10);
      .local_14 = (9 - .local_13);
      .param_10 = ((1 + .param_9) - .local_14);
    }
  }
  .local_12 = (1 / (.local_12 - .param_10));
  .ret_8 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

