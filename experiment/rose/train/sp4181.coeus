declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  .local_4 = 0;
  .local_5 = (bvor(.local_4, .local_4) % 5);
  while (.param_2)
  {
    .param_3 = (- .local_4);
    .param_3 = bvand(((.local_5 + .local_4) - 16), 0);
    .local_5 = .param_3;
  }
  .local_4 = (.local_5 * bvand((.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5)))))),
   (.param_3 * .local_5)));
  for (.local_5 = 0 to 10)
  {
    .local_4 = (- (bvxor(.param_3, 3) * .param_3));
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_7, int .param_8) returns (int .ret_6)
{
  int .local_9;
  int .local_10;
  .local_9 = 0;
  .local_10 = (bvor(.local_9, .local_9) % 5);
  while (.param_7)
  {
    .param_8 = (- .local_9);
    .param_8 = bvand(((.local_10 + .local_9) - 16), 0);
    .local_10 = .param_8;
  }
  .local_9 = (.local_10 * bvand((.local_10 + (.local_10 + (.local_10 + (.local_10 + (.local_10 + (.local_10 + .local_10)))))),
   (.param_8 * .local_10)));
  for (.local_10 = 0 to 10 step 2)
  {
    .local_9 = (- (bvxor(.param_8, 3) * .param_8));
    if (((1 + .local_10) <= 9))
    {
      .local_9 = (- (bvxor(.param_8, 3) * .param_8));
    }
  }
  .ret_6 = .local_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_7);
requires (.param_3 == .param_8);
ensures (.ret_1 == .ret_6);

