declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0() returns (int .ret_1)
{
  bool .local_2;
  int .local_3;
  int .local_4;
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_3 = 3;
  .local_2 = false;
  .local_8 = bvxor(-32, (- .local_3));
  .local_6 = (- .local_3);
  .local_4 = ((.local_3 + .local_3) * bvor(.local_3, (.local_3 + .local_3)));
  .local_5 = (((.local_3 + (.local_3 + (.local_3 + (.local_3 + (.local_3 + (.local_3 + .local_3)))))) + 4) == (bvor(3,
   .local_3) % bvor(.local_3, .local_3)));
  .local_2 = .local_5;
  while ((.local_4 != .local_3))
  {
    if ((.local_5 == (10 != .local_6)))
    {
      .local_7 = ((- .local_4) / 48);
      .local_8 = .local_4;
      if ((.local_2 && .local_2))
      {
        .local_7 = bvand((.local_3 % 9), 0);
        .local_4 = bvand(.local_7, -10);
      }
      else
      {
        .local_8 = bvand(.local_7, .local_6);
      }
    }
    else
    {
      .local_8 = (- (.local_3 + 32));
      .local_3 = bvor((.local_3 % .local_4), -5);
    }
  }
  for (.local_6 = bvand(16, .local_3) to 16)
  {
    for (.local_8 = 16 to 32)
    {
      .local_3 = (- bvor(.local_8, .local_4));
    }
  }
  .ret_1 = .local_3;
}

procedure f1() returns (int .ret_9)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_11 = 3;
  .local_10 = false;
  .local_16 = bvxor(-32, (- .local_11));
  .local_14 = (- .local_11);
  .local_12 = ((.local_11 + .local_11) * bvor(.local_11,
   (.local_11 + .local_11)));
  .local_13 = (((.local_11 + (.local_11 + (.local_11 + (.local_11 + (.local_11 + (.local_11 + .local_11)))))) + 4) == (bvor(3,
   .local_11) % bvor(.local_11, .local_11)));
  .local_10 = .local_13;
  while ((.local_12 != .local_11))
  {
    if ((.local_13 == (10 != .local_14)))
    {
      .local_15 = ((- .local_12) / 48);
      .local_16 = .local_12;
      if ((.local_10 && .local_10))
      {
        .local_15 = bvand((.local_11 % 9), 0);
        .local_12 = bvand(.local_15, -10);
      }
      else
      {
        .local_16 = bvand(.local_15, .local_14);
      }
    }
    else
    {
      .local_16 = (- (.local_11 + 32));
      .local_11 = bvor((.local_11 % .local_12), -5);
    }
  }
  for (.local_14 = bvand(16, .local_11) to 16)
  {
    for (.local_16 = 16 to 32 step 2)
    {
      .local_11 = (- bvor(.local_16, .local_12));
      if (((1 + .local_16) <= 31))
      {
        .local_11 = (- bvor((1 + .local_16), .local_12));
      }
    }
  }
  .ret_9 = .local_11;
}

$lentry f0;
$rentry f1;

ensures (.ret_1 == .ret_9);

