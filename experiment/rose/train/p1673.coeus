declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = false;
  .local_5 = .param_2;
  for (.local_6 = 0 to 16)
  {
    .param_2 = .param_3;
    .local_5 = (- (.param_3 + 3));
  }
  .param_3 = 3;
  while ((.param_3 < 1))
  {
    .local_6 = (((.param_3 - 9) + bvand(8, .param_2)) - bvand(1,
     (- .param_3)));
    while (((.local_4 || .local_4) || (.local_4 == .local_4)))
    {
      .local_4 = (! .local_4);
      .param_3 = ((.param_3 % 2) - .param_2);
    }
    .local_5 = (- .local_6);
    if (.local_4)
    {
      .local_7 = bvand((- .param_3), (.local_5 + .local_5));
      if ((! .local_4))
      {
        .local_5 = (.local_5 + bvor(.local_7, .param_3));
      }
      else
      {
        .local_5 = .local_7;
      }
    }
    else
    {
      .local_7 = (- (3 - .local_5));
      .local_7 = 2;
      while ((.local_7 < 2))
      {
        .local_6 = bvor(.local_5, (.local_7 / 3));
        .local_5 = (bvand(.local_6, .local_6) % 3);
        .local_7 = (.local_7 + 1);
      }
    }
    .param_3 = (.param_3 + 1);
  }
  .param_2 = .local_5;
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = false;
  .local_12 = .param_9;
  for (.local_13 = 0 to 16 step 2)
  {
    .param_9 = .param_10;
    .local_12 = (- (.param_10 + 3));
    if (((1 + .local_13) <= 15))
    {
      .param_9 = .param_10;
      .local_12 = (- (.param_10 + 3));
    }
  }
  .param_10 = 3;
  while ((.param_10 <= 0))
  {
    .local_13 = (((.param_10 - 9) + bvand(8, .param_9)) - bvand(1,
     (- .param_10)));
    while (((.local_11 || .local_11) || (.local_11 == .local_11)))
    {
      .local_11 = (! .local_11);
      .param_10 = ((.param_10 % 2) - .param_9);
    }
    .local_12 = (- .local_13);
    if (.local_11)
    {
      .local_14 = bvand((- .param_10), (.local_12 + .local_12));
      if ((! .local_11))
      {
        .local_12 = (.local_12 + bvor(.local_14, .param_10));
      }
      else
      {
        .local_12 = .local_14;
      }
    }
    else
    {
      .local_14 = (- (3 - .local_12));
      .local_14 = 2;
      while ((.local_14 <= 1))
      {
        .local_13 = bvor(.local_12, (.local_14 / 3));
        .local_12 = (bvand(.local_13, .local_13) % 3);
        if (((1 + .local_14) <= 1))
        {
          .local_13 = bvor(.local_12, ((1 + .local_14) / 3));
          .local_12 = (bvand(.local_13, .local_13) % 3);
        }
        .local_14 = (.local_14 + 2);
      }
    }
    .param_10 = (.param_10 + 1);
  }
  .param_9 = .local_12;
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

