declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = .param_2;
  .local_5 = .param_2;
  .local_4 = (- .param_2);
  .local_5 = ((.local_5 + 64) - (.local_4 + .param_2));
  .local_4 = bvor(.local_5, 32);
  for (.local_5 = 0 to .local_4)
  {
    .local_4 = bvor(8, (.local_5 + (.param_2 / 2)));
    for (.local_6 = 0 to .param_2)
    {
      .local_7 = .local_4;
      for (.local_8 = 0 to 1)
      {
        .local_4 = 0;
      }
      .param_2 = (bvor(16, .local_6) + bvand(.local_4, .local_7));
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = .param_10;
  .local_13 = .param_10;
  .local_12 = (- .param_10);
  .local_13 = ((.local_13 + 64) - (.local_12 + .param_10));
  .local_12 = bvor(.local_13, 32);
  for (.local_13 = 0 to ((-1 + .local_12) + 1))
  {
    .local_12 = bvor(8, (.local_13 + (.param_10 / 2)));
    for (.local_14 = 0 to ((-1 + .param_10) + 1))
    {
      .local_15 = .local_12;
    }
    for (.local_14 = 0 to ((-1 + .param_10) + 1))
    {
      .local_16 = 0;
      .local_12 = 0;
    }
    for (.local_14 = 0 to ((-1 + .param_10) + 1))
    {
      .param_10 = (bvor(16, .local_14) + bvand(.local_12, .local_15));
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

