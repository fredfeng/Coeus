declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = false;
  .local_6 = (7 - .param_2);
  for (.param_3 = 0 to .param_2)
  {
    .param_2 = bvxor(.param_4, .param_2);
    .local_7 = .local_6;
    for (.local_7 = 6 to 9)
    {
      .local_8 = (bvxor(32, .param_4) + (bvxor(32, .param_4) + (bvxor(32,
       .param_4) + bvxor(32, .param_4))));
      .param_4 = (bvxor(bvor(.param_3, .local_7), .local_8) % .param_2);
    }
  }
  .param_2 = .param_4;
  .local_6 = .param_2;
  .param_2 = (bvor(.local_6, .local_6) + .param_2);
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11, int .param_12) returns
 (int .ret_9)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = false;
  .local_14 = (7 - .param_10);
  for (.param_11 = 0 to ((-1 + .param_10) + 1))
  {
    .param_10 = bvxor(.param_12, .param_10);
    for (.local_15 = 6 to 9)
    {
      .local_16 = (bvxor(32, .param_12) + (bvxor(32, .param_12) + (bvxor(32,
       .param_12) + bvxor(32, .param_12))));
    }
    for (.local_15 = 6 to 9)
    {
      .param_12 = (bvxor(bvor(.param_11, .local_15), .local_16) % .param_10);
    }
  }
  for (.param_11 = 0 to ((-1 + .param_10) + 1))
  {
    .local_15 = .local_14;
  }
  .param_10 = .param_12;
  .local_14 = .param_10;
  .param_10 = (bvor(.local_14, .local_14) + .param_10);
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

