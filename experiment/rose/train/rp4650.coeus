declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_7 = (- .param_2);
  .local_5 = bvand((.param_2 - 7), (- .param_2));
  .local_4 = (- .param_2);
  .param_3 = ((.local_4 >= 1) && (.param_3 || .param_3));
  for (.local_5 = 0 to 5)
  {
    .local_6 = bvor(9, (- .local_4));
    for (.local_7 = 0 to (- .param_2))
    {
      .local_8 = bvxor(bvor((.local_5 * .local_7), 12), (8 - (.local_7 + 8)));
      .local_9 = (.local_5 % 1);
      if (.param_3)
      {
        .local_4 = ((bvxor(.local_6, .local_8) * .local_5) * .local_9);
      }
      else
      {
        .param_2 = 2;
      }
    }
    if ((5 <= .param_2))
    {
      .local_7 = .param_2;
      .local_4 = .local_5;
      if (.param_3)
      {
        .local_7 = ((.local_7 + (.local_7 + (.local_7 + (.local_7 + (.local_7 + .local_7))))) % bvor(.param_2,
         .local_7));
        .param_2 = ((- .param_2) * (.local_7 + .local_5));
      }
      else
      {
        .local_4 = -34;
      }
    }
    else
    {
      .param_2 = .local_5;
      .local_4 = bvxor(bvxor((.local_4 - 9), bvxor(5, .param_2)), .param_2);
    }
  }
  .param_2 = (.param_2 % .local_4);
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12) returns (int .ret_10)
{
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_16 = (- .param_11);
  .local_14 = bvand((.param_11 - 7), (- .param_11));
  .local_13 = (- .param_11);
  .param_12 = ((.local_13 >= 1) && (.param_12 || .param_12));
  for (.local_14 = 0 to 5)
  {
    .local_15 = bvor(9, (- .local_13));
    for (.local_16 = 0 to ((-1 - .param_11) + 1))
    {
      .local_17 = bvxor(bvor((.local_14 * .local_16), 12),
       (8 - (.local_16 + 8)));
    }
    for (.local_16 = 0 to ((-1 - .param_11) + 1))
    {
      .local_18 = (.local_14 % 1);
    }
    for (.local_16 = 0 to ((-1 - .param_11) + 1))
    {
      if (.param_12)
      {
        .local_13 = ((bvxor(.local_15, .local_17) * .local_14) * .local_18);
      }
      else
      {
        .param_11 = 2;
      }
    }
    if ((5 <= .param_11))
    {
      .local_16 = .param_11;
      .local_13 = .local_14;
      if (.param_12)
      {
        .local_16 = ((.local_16 + (.local_16 + (.local_16 + (.local_16 + (.local_16 + .local_16))))) % bvor(.param_11,
         .local_16));
        .param_11 = ((- .param_11) * (.local_16 + .local_14));
      }
      else
      {
        .local_13 = -34;
      }
    }
    else
    {
      .param_11 = .local_14;
      .local_13 = bvxor(bvxor((.local_13 - 9), bvxor(5, .param_11)),
       .param_11);
    }
  }
  .param_11 = (.param_11 % .local_13);
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
ensures (.ret_1 == .ret_10);

