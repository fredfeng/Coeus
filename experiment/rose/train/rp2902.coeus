declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = false;
  .local_7 = (bvor(.param_2, .param_2) - 8);
  .local_5 = .param_2;
  while (.local_4)
  {
    .local_6 = .local_5;
    if (.local_4)
    {
      .local_6 = bvand(4, .local_5);
      if ((.param_3 == .param_3))
      {
        .param_2 = bvor(.local_5, bvxor(.param_2, .local_6));
      }
      else
      {
        .param_2 = 64;
      }
    }
    else
    {
      .local_7 = bvor(.local_5, .param_3);
      .param_3 = .param_2;
      if (.local_4)
      {
        .local_5 = bvor((.local_6 / .local_7), (.param_3 + .local_6));
      }
      else
      {
        .local_6 = bvor((.param_2 / .local_6), 2);
        .local_5 = bvor(.param_3, .local_6);
      }
    }
    .local_7 = (- (.param_2 % .param_2));
  }
  .param_3 = (- bvor(.param_2, (.param_2 - .local_5)));
  for (.param_3 = 0 to (.param_2 + .local_5))
  {
    for (.local_7 = 0 to bvxor(16, .param_3))
    {
      .local_8 = .local_5;
      .local_5 = ((.local_8 + .param_3) + (.local_7 - 64));
    }
    .param_2 = bvxor((- (.local_5 - .param_2)), bvor(.local_5, .local_5));
  }
  .param_2 = bvor((- .param_2), (.param_2 + .param_2));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11) returns (int .ret_9)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = false;
  .local_15 = (bvor(.param_10, .param_10) - 8);
  .local_13 = .param_10;
  while (.local_12)
  {
    .local_14 = .local_13;
    if (.local_12)
    {
      .local_14 = bvand(4, .local_13);
      if ((.param_11 == .param_11))
      {
        .param_10 = bvor(.local_13, bvxor(.param_10, .local_14));
      }
      else
      {
        .param_10 = 64;
      }
    }
    else
    {
      .local_15 = bvor(.local_13, .param_11);
      .param_11 = .param_10;
      if (.local_12)
      {
        .local_13 = bvor((.local_14 / .local_15), (.param_11 + .local_14));
      }
      else
      {
        .local_14 = bvor((.param_10 / .local_14), 2);
        .local_13 = bvor(.param_11, .local_14);
      }
    }
    .local_15 = (- (.param_10 % .param_10));
  }
  .param_11 = (- bvor(.param_10, (.param_10 - .local_13)));
  for (.param_11 = 0 to (.param_10 + .local_13))
  {
    for (.local_15 = 0 to ((-1 + bvxor(16, .param_11)) + 1))
    {
      .local_16 = .local_13;
    }
    for (.local_15 = 0 to ((-1 + bvxor(16, .param_11)) + 1))
    {
      .local_13 = ((.local_16 + .param_11) + (.local_15 - 64));
    }
    .param_10 = bvxor((- (.local_13 - .param_10)), bvor(.local_13,
     .local_13));
  }
  .param_10 = bvor((- .param_10), (.param_10 + .param_10));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

