declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5,
             bool .param_6)
 returns (int .ret_1)
{
  int .local_7;
  int .local_8;
  int .local_9;
  .local_7 = .param_2;
  .param_5 = 0;
  while ((.param_5 < (.param_4 + 6)))
  {
    .local_8 = (-7 + .param_5);
    while ((.param_6 && (.param_2 >= .param_2)))
    {
      .local_9 = .local_7;
      .param_2 = (- .local_8);
      if ((.param_6 == .param_6))
      {
        .param_5 = 4;
        .local_7 = (((.param_5 + (.param_5 + (.param_5 + (.param_5 + (.param_5 + .param_5))))) + (.local_7 / .param_2)) + .param_4);
      }
      else
      {
        .param_2 = (.param_4 - .local_9);
      }
    }
    .local_7 = ((.local_7 + 7) % 64);
    .param_5 = (.param_5 + 1);
  }
  for (.param_4 = 0 to 10)
  {
    .param_5 = 10;
    if ((.param_5 == .param_5))
    {
      .local_8 = (.param_4 * bvor(64, .local_7));
      for (.local_8 = 3 to 2)
      {
        .param_2 = (- .local_8);
      }
    }
    else
    {
      .local_8 = ((- .param_2) / (6 + .param_4));
      .local_9 = bvand(.param_4, 2);
      if (.param_6)
      {
        .param_2 = .local_8;
      }
      else
      {
        .param_5 = bvand(bvxor(.param_2, (- .param_4)), bvand(bvor(.local_9,
         .local_7), (32 - .local_7)));
        .param_2 = (9 + (.param_5 % 1));
      }
    }
  }
  .param_2 = ((32 + .param_2) / 12);
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12, int .param_13, int .param_14,
             bool .param_15)
 returns (int .ret_10)
{
  int .local_16;
  int .local_17;
  int .local_18;
  .local_16 = .param_11;
  .param_14 = 0;
  while ((.param_14 <= (.param_13 + 5)))
  {
    .local_17 = (-7 + .param_14);
    while ((.param_15 && (.param_11 >= .param_11)))
    {
      .local_18 = .local_16;
      .param_11 = (- .local_17);
      if ((.param_15 == .param_15))
      {
        .param_14 = 4;
        .local_16 = (((.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + .param_14))))) + (.local_16 / .param_11)) + .param_13);
      }
      else
      {
        .param_11 = (.param_13 - .local_18);
      }
    }
    .local_16 = ((.local_16 + 7) % 64);
    .param_14 = (.param_14 + 1);
  }
  for (.param_13 = 0 to 10)
  {
    .param_14 = 10;
    if ((.param_14 == .param_14))
    {
      .local_17 = (.param_13 * bvor(64, .local_16));
      for (.local_17 = 3 to 2 step 2)
      {
        .param_11 = (- .local_17);
        if (((1 + .local_17) <= 1))
        {
          .param_11 = (- (1 + .local_17));
        }
      }
    }
    else
    {
      .local_17 = ((- .param_11) / (6 + .param_13));
      .local_18 = bvand(.param_13, 2);
      if (.param_15)
      {
        .param_11 = .local_17;
      }
      else
      {
        .param_14 = bvand(bvxor(.param_11, (- .param_13)),
         bvand(bvor(.local_18, .local_16), (32 - .local_16)));
        .param_11 = (9 + (.param_14 % 1));
      }
    }
  }
  .param_11 = ((32 + .param_11) / 12);
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
requires (.param_6 == .param_15);
ensures (.ret_1 == .ret_10);

