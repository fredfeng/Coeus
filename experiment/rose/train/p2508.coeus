declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5,
             int .param_6)
 returns (int .ret_1)
{
  int .local_7;
  int .local_8;
  for (.param_5 = 0 to 5)
  {
    .local_7 = .param_2;
    .local_8 = ((.param_5 % 8) * (.param_6 + .param_6));
    for (.param_4 = 0 to 6)
    {
      if (.param_3)
      {
        .param_2 = (2 + .param_6);
        .param_6 = 2;
      }
      else
      {
        .param_2 = bvxor((.param_2 / .param_5), bvand((9 % .param_2),
         (.param_4 * .param_6)));
        .param_6 = (.local_8 - .local_7);
      }
    }
  }
  .param_6 = ((.param_6 * .param_6) + .param_2);
  .param_2 = .param_6;
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, int .param_13,
             int .param_14)
 returns (int .ret_9)
{
  int .local_15;
  int .local_16;
  for (.param_13 = 0 to 5)
  {
    .local_15 = .param_10;
    .local_16 = ((.param_13 % 8) * (.param_14 + .param_14));
    for (.param_12 = 0 to 6 step 2)
    {
      if (.param_11)
      {
        .param_10 = (2 + .param_14);
        .param_14 = 2;
      }
      else
      {
        .param_10 = bvxor((.param_10 / .param_13), bvand((9 % .param_10),
         (.param_12 * .param_14)));
        .param_14 = (.local_16 - .local_15);
      }
      if (((1 + .param_12) <= 5))
      {
        if (.param_11)
        {
          .param_10 = (2 + .param_14);
          .param_14 = 2;
        }
        else
        {
          .param_10 = bvxor((.param_10 / .param_13), bvand((9 % .param_10),
           ((1 + .param_12) * .param_14)));
          .param_14 = (.local_16 - .local_15);
        }
      }
    }
  }
  .param_14 = ((.param_14 * .param_14) + .param_10);
  .param_10 = .param_14;
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
requires (.param_6 == .param_14);
ensures (.ret_1 == .ret_9);

