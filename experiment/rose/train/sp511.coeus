declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  bool .local_6;
  int .local_7;
  int .local_8;
  .local_8 = .param_2;
  .local_7 = bvand(bvor(.param_2, .param_2), (4 % .param_2));
  .local_8 = (- (8 - .local_8));
  .param_4 = 0;
  while ((.param_4 < (.local_7 - .param_5)))
  {
    .local_6 = ((1 == .local_7) != (! .param_3));
    .param_4 = .param_4;
    while ((.local_6 == .param_3))
    {
      .local_7 = (.param_4 / .param_2);
      if ((.local_6 && .param_3))
      {
        .param_2 = (.local_8 % .local_8);
      }
      else
      {
        .param_2 = bvor((.local_8 + .param_4), 32);
      }
    }
    .param_4 = (.param_4 + 1);
  }
  for (.local_8 = 0 to 22)
  {
    .param_2 = (- bvand(.param_2, .local_7));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  bool .local_14;
  int .local_15;
  int .local_16;
  .local_16 = .param_10;
  .local_15 = bvand(bvor(.param_10, .param_10), (4 % .param_10));
  .local_16 = (- (8 - .local_16));
  .param_12 = 0;
  while ((.param_12 <= ((.local_15 - .param_13) - 1)))
  {
    .local_14 = ((1 == .local_15) != (! .param_11));
    .param_12 = .param_12;
    while ((.local_14 == .param_11))
    {
      .local_15 = (.param_12 / .param_10);
      if ((.local_14 && .param_11))
      {
        .param_10 = (.local_16 % .local_16);
      }
      else
      {
        .param_10 = bvor((.local_16 + .param_12), 32);
      }
    }
    .param_12 = (.param_12 + 1);
  }
  for (.local_16 = 0 to 22 step 2)
  {
    .param_10 = (- bvand(.param_10, .local_15));
    if (((1 + .local_16) <= 21))
    {
      .param_10 = (- bvand(.param_10, .local_15));
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

