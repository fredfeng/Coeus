declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, bool .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = 16;
  .local_5 = false;
  .local_7 = .local_6;
  if (.param_4)
  {
    .param_2 = .local_7;
  }
  else
  {
    for (.local_8 = 0 to (1 + .param_2))
    {
      .local_6 = (.local_6 / .param_2);
      for (.param_3 = 0 to 0)
      {
        .local_6 = bvand(bvand(.param_2, .local_7), .param_3);
      }
    }
  }
  for (.param_2 = 0 to 0)
  {
    .local_7 = -1;
    .local_6 = (.param_2 / ((.param_2 * .local_7) - 1));
  }
  .ret_1 = .local_6;
}

procedure f1(int .param_10, int .param_11, bool .param_12) returns
 (int .ret_9)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = 16;
  .local_13 = false;
  .local_15 = .local_14;
  if (.param_12)
  {
    .param_10 = .local_15;
  }
  else
  {
    for (.local_16 = 0 to (1 + .param_10))
    {
      .local_14 = (.local_14 / .param_10);
      for (.param_11 = 0 to 0 step 2)
      {
        .local_14 = bvand(bvand(.param_10, .local_15), .param_11);
        if (((1 + .param_11) <= -1))
        {
          .local_14 = bvand(bvand(.param_10, .local_15), (1 + .param_11));
        }
      }
    }
  }
  for (.param_10 = 0 to 0 step 2)
  {
    .local_15 = -1;
    .local_14 = (.param_10 / ((.param_10 * .local_15) - 1));
    if (((1 + .param_10) <= -1))
    {
      .local_15 = -1;
      .local_14 = ((1 + .param_10) / (((1 + .param_10) * .local_15) - 1));
    }
  }
  .ret_9 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

