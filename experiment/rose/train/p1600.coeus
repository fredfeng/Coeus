declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = true;
  .local_8 = .param_2;
  .local_6 = 2;
  .local_7 = (bvand(6, .local_6) * (.param_3 % .param_3));
  for (.local_6 = 0 to 0)
  {
    .local_7 = 0;
    while ((.local_7 < (- .param_2)))
    {
      .local_8 = 0;
      while ((.local_8 < bvxor(.local_7, .param_2)))
      {
        .local_7 = .local_8;
        .local_8 = (.local_8 + 1);
      }
      .local_7 = (.local_7 + 1);
    }
  }
  for (.param_3 = 0 to .param_4)
  {
    .local_6 = ((- .param_2) + (.param_2 + .param_4));
    for (.local_7 = 0 to 4)
    {
      .local_6 = 0;
    }
    .param_2 = (.param_2 - (.param_4 - .local_6));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11, int .param_12) returns
 (int .ret_9)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = true;
  .local_16 = .param_10;
  .local_14 = 2;
  .local_15 = (bvand(6, .local_14) * (.param_11 % .param_11));
  for (.local_14 = 0 to 0)
  {
    .local_15 = 0;
    while ((.local_15 <= ((- .param_10) - 1)))
    {
      .local_16 = 0;
      while ((.local_16 <= (-1 + bvxor(.local_15, .param_10))))
      {
        .local_15 = .local_16;
        if (((1 + .local_16) <= (-1 + bvxor(.local_15, .param_10))))
        {
          .local_15 = (1 + .local_16);
        }
        .local_16 = (.local_16 + 2);
      }
      if ((.local_16 <= (-1 + bvxor(.local_15, .param_10))))
      {
        .local_15 = .local_16;
        if (((1 + .local_16) <= (-1 + bvxor(.local_15, .param_10))))
        {
          .local_15 = (1 + .local_16);
        }
      }
      .local_15 = (.local_15 + 1);
    }
  }
  for (.param_11 = 0 to .param_12)
  {
    .local_14 = ((- .param_10) + (.param_10 + .param_12));
    for (.local_15 = 0 to 4 step 2)
    {
      .local_14 = 0;
      if (((1 + .local_15) <= 3))
      {
        .local_14 = 0;
      }
    }
    .param_10 = (.param_10 - (.param_12 - .local_14));
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

