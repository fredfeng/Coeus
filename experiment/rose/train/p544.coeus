declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_3 = true;
  .local_5 = .param_2;
  .local_4 = ((bvxor(16, .param_2) % .param_2) - 16);
  for (.local_5 = 0 to (.param_2 * 64))
  {
    for (.local_6 = 8 to 5)
    {
      .local_7 = .local_5;
      .local_4 = bvxor(.local_7, .local_4);
    }
  }
  .local_3 = ((.param_2 <= .local_4) || (! .local_3));
  if (.local_3)
  {
    .local_4 = bvxor(.local_4, bvor(7, .local_4));
    .param_2 = (bvand(.local_4, .param_2) - .local_4);
  }
  else
  {
    .local_5 = .param_2;
    .param_2 = ((.local_5 - 10) + .local_5);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9) returns (int .ret_8)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_10 = true;
  .local_12 = .param_9;
  .local_11 = ((bvxor(16, .param_9) % .param_9) - 16);
  for (.local_12 = 0 to (.param_9 * 64))
  {
    for (.local_13 = 8 to 5 step 2)
    {
      .local_14 = .local_12;
      .local_11 = bvxor(.local_14, .local_11);
      if (((1 + .local_13) <= 4))
      {
        .local_14 = .local_12;
        .local_11 = bvxor(.local_14, .local_11);
      }
    }
  }
  .local_10 = ((.param_9 <= .local_11) || (! .local_10));
  if (.local_10)
  {
    .local_11 = bvxor(.local_11, bvor(7, .local_11));
    .param_9 = (bvand(.local_11, .param_9) - .local_11);
  }
  else
  {
    .local_12 = .param_9;
    .param_9 = ((.local_12 - 10) + .local_12);
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

