declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  .param_4 = bvxor(bvxor(0, .param_4), (10 / .param_4));
  .param_2 = .param_4;
  .param_4 = 2;
  .param_2 = (.param_2 - ((- .param_4) * (.param_4 % .param_4)));
  while (.param_3)
  {
    .local_5 = bvand((- .param_4), .param_4);
    .param_4 = ((.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5)))))) + .param_2);
    while (.param_3)
    {
      .local_7 = 0;
      while ((.local_7 < 1))
      {
        .param_4 = (- .param_2);
        .param_2 = 3;
        .local_7 = (.local_7 + 1);
      }
      .local_6 = 0;
      while ((.local_6 < (4 + .local_5)))
      {
        .param_2 = 4;
        .param_3 = (! .param_3);
        .local_6 = (.local_6 + 1);
      }
    }
  }
  .param_2 = bvor(.param_4, ((- .param_2) - (.param_4 + .param_2)));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  int .local_13;
  int .local_14;
  .param_11 = bvxor(bvxor(0, .param_11), (10 / .param_11));
  .param_9 = .param_11;
  .param_11 = 2;
  .param_9 = (.param_9 - ((- .param_11) * (.param_11 % .param_11)));
  while (.param_10)
  {
    .local_12 = bvand((- .param_11), .param_11);
    .param_11 = ((.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12)))))) + .param_9);
    while (.param_10)
    {
      .local_14 = 0;
      while ((.local_14 <= 0))
      {
        .param_11 = (- .param_9);
        .param_9 = 3;
        .local_14 = (.local_14 + 1);
      }
      .local_13 = 0;
      while ((.local_13 <= (.local_12 + 3)))
      {
        .param_9 = 4;
        .local_13 = (.local_13 + 1);
      }
      .local_13 = 0;
      while ((.local_13 <= (.local_12 + 3)))
      {
        .param_10 = (! .param_10);
        .local_13 = (.local_13 + 1);
      }
    }
  }
  .param_9 = bvor(.param_11, ((- .param_9) - (.param_11 + .param_9)));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

