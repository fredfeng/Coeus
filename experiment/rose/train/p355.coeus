

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = 5;
  .local_6 = (.local_5 * .local_5);
  for (.local_7 = 0 to 9)
  {
    .local_8 = 1;
    .param_2 = (! (.param_2 == .param_2));
    .local_6 = .local_5;
    if ((.local_8 > .param_4))
    {
      for (.local_9 = 10 to 32)
      {
        .local_6 = (.param_4 / .local_5);
      }
      .param_2 = (! (.param_2 || .param_2));
    }
    else
    {
      .local_5 = -4;
    }
  }
  .param_3 = 0;
  while ((.param_3 < .local_5))
  {
    while ((0 != (- .local_5)))
    {
      if (.param_2)
      {
        .local_6 = (2 / .local_6);
        .local_5 = (.param_3 - .local_6);
      }
      else
      {
        .param_3 = 0;
        .local_5 = .param_3;
      }
    }
    .param_3 = (.param_3 + 1);
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_11, int .param_12, int .param_13) returns
 (int .ret_10)
{
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_14 = 5;
  .local_15 = (.local_14 * .local_14);
  for (.local_16 = 0 to 9)
  {
    .local_17 = 1;
    .param_11 = (! (.param_11 == .param_11));
    .local_15 = .local_14;
    if ((.local_17 > .param_13))
    {
      for (.local_18 = 10 to 32 step 2)
      {
        .local_15 = (.param_13 / .local_14);
        if (((1 + .local_18) <= 31))
        {
          .local_15 = (.param_13 / .local_14);
        }
      }
      .param_11 = (! (.param_11 || .param_11));
    }
    else
    {
      .local_14 = -4;
    }
  }
  .param_12 = 0;
  while ((.param_12 <= (.local_14 - 1)))
  {
    while ((0 != (- .local_14)))
    {
      if (.param_11)
      {
        .local_15 = (2 / .local_15);
        .local_14 = (.param_12 - .local_15);
      }
      else
      {
        .param_12 = 0;
        .local_14 = .param_12;
      }
    }
    .param_12 = (.param_12 + 1);
  }
  .ret_10 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
ensures (.ret_1 == .ret_10);

