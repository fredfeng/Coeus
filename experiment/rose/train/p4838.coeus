declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  while (((.param_5 > 7) == .param_3))
  {
    .local_7 = .param_5;
    .local_9 = .param_5;
    while (.param_3)
    {
      .param_5 = (bvxor(.param_2, 0) - (.local_9 + .local_9));
      if (((.param_5 + .param_2) != 3))
      {
        .param_5 = bvor(.param_2, bvor(.param_2, .local_7));
      }
    }
  }
  for (.local_6 = 0 to .param_5)
  {
    for (.local_8 = 0 to 7)
    {
      .param_2 = bvor(.param_5, .param_5);
      .param_2 = bvor(1, .param_2);
    }
    .param_4 = (- bvand(.param_2, .param_2));
  }
  .param_2 = ((.param_4 + bvand(.param_4, .param_2)) / (- bvxor(.param_4,
   64)));
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12, int .param_13, int .param_14)
 returns (int .ret_10)
{
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  while (((.param_14 > 7) == .param_12))
  {
    .local_16 = .param_14;
    .local_18 = .param_14;
    while (.param_12)
    {
      .param_14 = (bvxor(.param_11, 0) - (.local_18 + .local_18));
      if (((.param_14 + .param_11) != 3))
      {
        .param_14 = bvor(.param_11, bvor(.param_11, .local_16));
      }
    }
  }
  for (.local_15 = 0 to .param_14)
  {
    for (.local_17 = 0 to 7 step 2)
    {
      .param_11 = bvor(.param_14, .param_14);
      .param_11 = bvor(1, .param_11);
      if (((1 + .local_17) <= 6))
      {
        .param_11 = bvor(.param_14, .param_14);
        .param_11 = bvor(1, .param_11);
      }
    }
    .param_13 = (- bvand(.param_11, .param_11));
  }
  .param_11 = ((.param_13 + bvand(.param_13,
   .param_11)) / (- bvxor(.param_13, 64)));
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
ensures (.ret_1 == .ret_10);

