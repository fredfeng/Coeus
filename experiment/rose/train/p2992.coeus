declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 2;
  .local_5 = .local_4;
  for (.local_7 = 0 to 64)
  {
    .local_8 = (- (.local_5 % .local_4));
    .local_5 = .local_8;
  }
  while ((.local_5 > .local_4))
  {
    .local_6 = 64;
    while (.param_2)
    {
      .local_7 = (.local_4 + .local_6);
      .local_5 = bvand(2, (.param_3 + .local_5));
      .local_4 = (- .local_7);
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 2;
  .local_13 = .local_12;
  for (.local_15 = 0 to 64 step 2)
  {
    .local_16 = (- (.local_13 % .local_12));
    .local_13 = .local_16;
    if (((1 + .local_15) <= 63))
    {
      .local_16 = (- (.local_13 % .local_12));
      .local_13 = .local_16;
    }
  }
  while ((.local_13 > .local_12))
  {
    .local_14 = 64;
    while (.param_10)
    {
      .local_15 = (.local_12 + .local_14);
      .local_13 = bvand(2, (.param_11 + .local_13));
      .local_12 = (- .local_15);
    }
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

