declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_3 = true;
  .local_5 = bvand(.param_2, (64 / .param_2));
  .local_4 = .param_2;
  .local_4 = (((.param_2 / .local_5) * (.local_4 + 4)) * .param_2);
  for (.local_5 = 0 to 4)
  {
    .local_6 = .local_4;
    .local_4 = bvxor(12, (.param_2 + .local_6));
    .param_2 = .local_4;
  }
  .param_2 = (.param_2 / 2);
  .ret_1 = .param_2;
}

procedure f1(int .param_8) returns (int .ret_7)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  .local_9 = true;
  .local_11 = bvand(.param_8, (64 / .param_8));
  .local_10 = .param_8;
  .local_10 = (((.param_8 / .local_11) * (.local_10 + 4)) * .param_8);
  for (.local_11 = 0 to 4 step 2)
  {
    .local_12 = .local_10;
    .local_10 = bvxor(12, (.param_8 + .local_12));
    .param_8 = .local_10;
    if (((1 + .local_11) <= 3))
    {
      .local_12 = .local_10;
      .local_10 = bvxor(12, (.param_8 + .local_12));
      .param_8 = .local_10;
    }
  }
  .param_8 = (.param_8 / 2);
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
ensures (.ret_1 == .ret_7);

