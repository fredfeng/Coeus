declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 1;
  .local_3 = false;
  .local_5 = 8;
  .local_6 = 0;
  while (((.param_2 != .param_2) && .local_3))
  {
    .local_5 = 4;
  }
  while (((.local_6 * .local_5) < 11))
  {
    .local_4 = (-1 - ((.local_4 - 2) + (.local_4 + 5)));
  }
  for (.param_2 = 0 to 5)
  {
    .local_7 = (.local_6 * (- .local_6));
    if (((.local_7 / 9) > 7))
    {
      .local_8 = bvand(.local_6, 6);
      .local_6 = ((.local_6 % .local_7) * (.local_8 * .local_7));
      .local_4 = .local_6;
    }
    else
    {
      .local_4 = .local_7;
    }
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_10) returns (int .ret_9)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 1;
  .local_11 = false;
  .local_13 = 8;
  .local_14 = 0;
  while (((.param_10 != .param_10) && .local_11))
  {
    .local_13 = 4;
  }
  while (((.local_14 * .local_13) < 11))
  {
    .local_12 = (-1 - ((.local_12 - 2) + (.local_12 + 5)));
  }
  for (.param_10 = 0 to 5 step 2)
  {
    .local_15 = (.local_14 * (- .local_14));
    if (((.local_15 / 9) > 7))
    {
      .local_16 = bvand(.local_14, 6);
      .local_14 = ((.local_14 % .local_15) * (.local_16 * .local_15));
      .local_12 = .local_14;
    }
    else
    {
      .local_12 = .local_15;
    }
    if (((1 + .param_10) <= 4))
    {
      .local_15 = (.local_14 * (- .local_14));
      if (((.local_15 / 9) > 7))
      {
        .local_16 = bvand(.local_14, 6);
        .local_14 = ((.local_14 % .local_15) * (.local_16 * .local_15));
        .local_12 = .local_14;
      }
      else
      {
        .local_12 = .local_15;
      }
    }
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
ensures (.ret_1 == .ret_9);

