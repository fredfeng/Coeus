declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 6;
  .local_5 = 16;
  .local_4 = ((.local_4 - .local_5) - ((2 % .local_5) / bvand(.param_3,
   .local_4)));
  .local_5 = 4;
  for (.local_5 = 0 to 5)
  {
    .local_6 = .local_5;
    if (.param_2)
    {
      .local_7 = ((- .local_6) / (16 * .param_3));
      .local_4 = (- .local_7);
      .param_3 = bvxor(.param_3, (- .local_7));
    }
    else
    {
      .local_4 = bvand(2, .local_4);
    }
  }
  while (.param_2)
  {
    .local_4 = bvand(.local_4, .param_3);
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_9, int .param_10) returns (int .ret_8)
{
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 6;
  .local_12 = 16;
  .local_11 = ((.local_11 - .local_12) - ((2 % .local_12) / bvand(.param_10,
   .local_11)));
  .local_12 = 4;
  for (.local_12 = 0 to 5 step 2)
  {
    .local_13 = .local_12;
    if (.param_9)
    {
      .local_14 = ((- .local_13) / (16 * .param_10));
      .local_11 = (- .local_14);
      .param_10 = bvxor(.param_10, (- .local_14));
    }
    else
    {
      .local_11 = bvand(2, .local_11);
    }
    if (((1 + .local_12) <= 4))
    {
      .local_13 = (1 + .local_12);
      if (.param_9)
      {
        .local_14 = ((- .local_13) / (16 * .param_10));
        .local_11 = (- .local_14);
        .param_10 = bvxor(.param_10, (- .local_14));
      }
      else
      {
        .local_11 = bvand(2, .local_11);
      }
    }
  }
  while (.param_9)
  {
    .local_11 = bvand(.local_11, .param_10);
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

