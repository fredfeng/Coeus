declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_4 = 4;
  .local_9 = bvxor(bvor(.local_4, 1), bvxor(.local_4, .local_4));
  .local_5 = bvxor(.local_4, bvor(.local_4, .local_4));
  .local_6 = (.local_4 / (.local_5 - .param_3));
  for (.local_6 = 0 to bvor(.local_4, .param_3))
  {
    .local_7 = (.local_6 + 8);
    .local_8 = (bvand(4, bvand(.param_3, 6)) * .local_5);
    for (.local_9 = 0 to 0)
    {
      if ((.param_2 != .param_2))
      {
        .local_7 = bvand(bvand(.local_7, 32), 6);
      }
      else
      {
        .param_3 = bvand(bvand((- .local_4), (.local_9 * .local_8)),
         (- (.local_5 + .local_9)));
      }
      .local_4 = (6 - (.local_7 - .local_5));
    }
  }
  for (.local_5 = 0 to 4)
  {
    if (.param_2)
    {
      .param_3 = .local_4;
    }
    else
    {
      .local_6 = (- .local_5);
      .param_3 = bvand(bvor(.local_6, 0), bvxor(.param_3, .local_5));
    }
    .local_4 = (.param_3 + .local_5);
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_11, int .param_12) returns (int .ret_10)
{
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_13 = 4;
  .local_18 = bvxor(bvor(.local_13, 1), bvxor(.local_13, .local_13));
  .local_14 = bvxor(.local_13, bvor(.local_13, .local_13));
  .local_15 = (.local_13 / (.local_14 - .param_12));
  for (.local_15 = 0 to bvor(.local_13, .param_12))
  {
    .local_16 = (.local_15 + 8);
    .local_17 = (bvand(4, bvand(.param_12, 6)) * .local_14);
    for (.local_18 = 0 to 0 step 2)
    {
      if ((.param_11 != .param_11))
      {
        .local_16 = bvand(bvand(.local_16, 32), 6);
      }
      else
      {
        .param_12 = bvand(bvand((- .local_13), (.local_18 * .local_17)),
         (- (.local_14 + .local_18)));
      }
      .local_13 = (6 - (.local_16 - .local_14));
      if (((1 + .local_18) <= -1))
      {
        if ((.param_11 != .param_11))
        {
          .local_16 = bvand(bvand(.local_16, 32), 6);
        }
        else
        {
          .param_12 = bvand(bvand((- .local_13),
           ((1 + .local_18) * .local_17)),
           (- (.local_14 + (1 + .local_18))));
        }
        .local_13 = (6 - (.local_16 - .local_14));
      }
    }
  }
  for (.local_14 = 0 to 4 step 2)
  {
    if (.param_11)
    {
      .param_12 = .local_13;
    }
    else
    {
      .local_15 = (- .local_14);
      .param_12 = bvand(bvor(.local_15, 0), bvxor(.param_12, .local_14));
    }
    .local_13 = (.param_12 + .local_14);
    if (((1 + .local_14) <= 3))
    {
      if (.param_11)
      {
        .param_12 = .local_13;
      }
      else
      {
        .local_15 = (- (1 + .local_14));
        .param_12 = bvand(bvor(.local_15, 0), bvxor(.param_12,
         (1 + .local_14)));
      }
      .local_13 = (.param_12 + (1 + .local_14));
    }
  }
  .ret_10 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
ensures (.ret_1 == .ret_10);

