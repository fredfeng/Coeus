declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5,
             int .param_6, int .param_7)
 returns (int .ret_1)
{
  int .local_8;
  int .local_9;
  .local_9 = (bvor(.param_2, 16) + (bvor(.param_2, 16) + (bvor(.param_2,
   16) + (bvor(.param_2, 16) + (bvor(.param_2, 16) + (bvor(.param_2,
   16) + bvor(.param_2, 16)))))));
  for (.param_5 = 0 to (10 - .param_2))
  {
    .local_8 = (.param_6 + .param_7);
    .param_7 = .param_5;
    for (.local_9 = 1 to 5)
    {
      .param_4 = .local_9;
      if (((.local_8 != .param_2) != (.local_9 == 5)))
      {
        .param_7 = .local_8;
      }
      else
      {
        .param_4 = 2;
        .param_7 = 0;
      }
    }
  }
  for (.param_4 = 0 to bvand(.param_7, 3))
  {
    while ((16 < (.param_7 * .param_7)))
    {
      .param_5 = (- .param_4);
      .param_2 = (.param_5 * .param_5);
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12, int .param_13, int .param_14,
             int .param_15, int .param_16)
 returns (int .ret_10)
{
  int .local_17;
  int .local_18;
  .local_18 = (bvor(.param_11, 16) + (bvor(.param_11, 16) + (bvor(.param_11,
   16) + (bvor(.param_11, 16) + (bvor(.param_11, 16) + (bvor(.param_11,
   16) + bvor(.param_11, 16)))))));
  for (.param_14 = 0 to (10 - .param_11))
  {
    .local_17 = (.param_15 + .param_16);
    .param_16 = .param_14;
    for (.local_18 = 1 to 5 step 2)
    {
      .param_13 = .local_18;
      if (((.local_17 != .param_11) != (.local_18 == 5)))
      {
        .param_16 = .local_17;
      }
      else
      {
        .param_13 = 2;
        .param_16 = 0;
      }
      if (((1 + .local_18) <= 4))
      {
        .param_13 = (1 + .local_18);
        if (((.local_17 != .param_11) != ((1 + .local_18) == 5)))
        {
          .param_16 = .local_17;
        }
        else
        {
          .param_13 = 2;
          .param_16 = 0;
        }
      }
    }
  }
  for (.param_13 = 0 to bvand(.param_16, 3))
  {
    while ((16 < (.param_16 * .param_16)))
    {
      .param_14 = (- .param_13);
      .param_11 = (.param_14 * .param_14);
    }
  }
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
requires (.param_6 == .param_15);
requires (.param_7 == .param_16);
ensures (.ret_1 == .ret_10);

