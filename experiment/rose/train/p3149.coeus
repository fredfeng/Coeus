declare int bvxor(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_3 = true;
  .local_7 = bvxor(.param_2, 0);
  .local_4 = (.param_2 + .param_2);
  .local_5 = 16;
  for (.local_6 = 0 to .local_5)
  {
    for (.local_7 = 0 to 4)
    {
      .local_8 = 0;
      if (.local_3)
      {
        .local_5 = (31 + (64 + .local_7));
        .param_2 = 7;
      }
      .local_4 = (.local_4 * (.local_8 - .param_2));
    }
    .local_5 = ((- .local_5) - (.local_5 / .param_2));
    .local_4 = 0;
  }
  .param_2 = (.local_5 + (.local_4 - .param_2));
  .ret_1 = .param_2;
}

procedure f1(int .param_10) returns (int .ret_9)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_11 = true;
  .local_15 = bvxor(.param_10, 0);
  .local_12 = (.param_10 + .param_10);
  .local_13 = 16;
  for (.local_14 = 0 to .local_13)
  {
    for (.local_15 = 0 to 4 step 2)
    {
      .local_16 = 0;
      if (.local_11)
      {
        .local_13 = (31 + (64 + .local_15));
        .param_10 = 7;
      }
      .local_12 = (.local_12 * (.local_16 - .param_10));
      if (((1 + .local_15) <= 3))
      {
        .local_16 = 0;
        if (.local_11)
        {
          .local_13 = (31 + (64 + (1 + .local_15)));
          .param_10 = 7;
        }
        .local_12 = (.local_12 * (.local_16 - .param_10));
      }
    }
    .local_13 = ((- .local_13) - (.local_13 / .param_10));
    .local_12 = 0;
  }
  .param_10 = (.local_13 + (.local_12 - .param_10));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
ensures (.ret_1 == .ret_9);

