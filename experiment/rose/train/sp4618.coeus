declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 64;
  .local_5 = (.local_4 + .local_4);
  .param_3 = (.local_5 - .param_3);
  for (.local_5 = 0 to .local_4)
  {
    .local_6 = 0;
    .local_7 = ((.param_3 % -1) + bvand(bvor(.local_5, 1), bvxor(.local_4,
     .param_3)));
    for (.local_8 = 0 to 0)
    {
      .local_6 = bvor(1, .local_6);
    }
    if ((bvor(.local_6, 4) < (3 - .param_3)))
    {
      .local_4 = .local_6;
    }
    else
    {
      .local_4 = (.local_7 - .local_4);
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 64;
  .local_13 = (.local_12 + .local_12);
  .param_11 = (.local_13 - .param_11);
  for (.local_13 = 0 to .local_12)
  {
    .local_14 = 0;
    .local_15 = ((.param_11 % -1) + bvand(bvor(.local_13, 1),
     bvxor(.local_12, .param_11)));
    for (.local_16 = 0 to 0 step 2)
    {
      .local_14 = bvor(1, .local_14);
      if (((1 + .local_16) <= -1))
      {
        .local_14 = bvor(1, .local_14);
      }
    }
    if ((bvor(.local_14, 4) < (3 - .param_11)))
    {
      .local_12 = .local_14;
    }
    else
    {
      .local_12 = (.local_15 - .local_12);
    }
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

