declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  .local_5 = 1;
  .local_6 = (.local_5 + bvxor(.local_5, .local_5));
  .param_2 = ((5 >= .param_4) != (! .param_2));
  .param_2 = (((.param_2 != .param_2) == (.param_3 != .param_4)) != .param_2);
  for (.param_3 = 7 to 64)
  {
    if (false)
    {
      .param_4 = bvxor((.param_3 + bvand(.local_5, 6)),
       bvand((.param_4 / .local_6), (.param_4 + .param_3)));
      .param_4 = bvor(-10, bvor(.param_4, 5));
    }
    else
    {
      .param_4 = (.local_6 * .local_5);
    }
  }
  .local_5 = .param_4;
  .ret_1 = .local_5;
}

procedure f1(bool .param_8, int .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  .local_11 = 1;
  .local_12 = (.local_11 + bvxor(.local_11, .local_11));
  .param_8 = ((5 >= .param_10) != (! .param_8));
  .param_8 = (((.param_8 != .param_8) == (.param_9 != .param_10)) != .param_8);
  for (.param_9 = 7 to 64 step 2)
  {
    if (false)
    {
      .param_10 = bvxor((.param_9 + bvand(.local_11, 6)),
       bvand((.param_10 / .local_12), (.param_10 + .param_9)));
      .param_10 = bvor(-10, bvor(.param_10, 5));
    }
    else
    {
      .param_10 = (.local_12 * .local_11);
    }
    if (((1 + .param_9) <= 63))
    {
      if (false)
      {
        .param_10 = bvxor(((1 + .param_9) + bvand(.local_11, 6)),
         bvand((.param_10 / .local_12), (.param_10 + (1 + .param_9))));
        .param_10 = bvor(-10, bvor(.param_10, 5));
      }
      else
      {
        .param_10 = (.local_12 * .local_11);
      }
    }
  }
  .local_11 = .param_10;
  .ret_7 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

