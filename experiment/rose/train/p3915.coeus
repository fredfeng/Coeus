declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = false;
  .local_6 = 1;
  for (.local_6 = (.param_2 - .param_3) to 64)
  {
    .local_7 = (bvor((- .param_3), .local_6) % (9 + (3 - .param_4)));
    while ((bvand(.param_4, .param_2) != (.param_2 % 9)))
    {
      .param_2 = 0;
      if (.local_5)
      {
        .param_4 = bvor(7, bvor(.param_3, .param_2));
        .param_4 = bvor(.param_4, bvand(1, .local_7));
      }
      else
      {
        .param_4 = (bvor(.param_3, .local_7) % (1 / .param_3));
        .param_2 = bvxor(.param_4, (- .param_2));
      }
    }
    if (((.local_6 <= 32) != .local_5))
    {
      .param_4 = ((.param_4 + .param_2) + bvxor(1, .param_4));
    }
    else
    {
      .param_4 = bvor((- .local_6), bvxor(8, .local_6));
      for (.local_8 = 3 to 1)
      {
        .param_4 = (- bvand(.local_6, 1));
      }
    }
  }
  .param_2 = bvxor(.param_4, 1);
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11, int .param_12) returns
 (int .ret_9)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = false;
  .local_14 = 1;
  for (.local_14 = (.param_10 - .param_11) to 64)
  {
    .local_15 = (bvor((- .param_11), .local_14) % (9 + (3 - .param_12)));
    while ((bvand(.param_12, .param_10) != (.param_10 % 9)))
    {
      .param_10 = 0;
      if (.local_13)
      {
        .param_12 = bvor(7, bvor(.param_11, .param_10));
        .param_12 = bvor(.param_12, bvand(1, .local_15));
      }
      else
      {
        .param_12 = (bvor(.param_11, .local_15) % (1 / .param_11));
        .param_10 = bvxor(.param_12, (- .param_10));
      }
    }
    if (((.local_14 <= 32) != .local_13))
    {
      .param_12 = ((.param_12 + .param_10) + bvxor(1, .param_12));
    }
    else
    {
      .param_12 = bvor((- .local_14), bvxor(8, .local_14));
      for (.local_16 = 3 to 1 step 2)
      {
        .param_12 = (- bvand(.local_14, 1));
        if (((1 + .local_16) <= 0))
        {
          .param_12 = (- bvand(.local_14, 1));
        }
      }
    }
  }
  .param_10 = bvxor(.param_12, 1);
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

