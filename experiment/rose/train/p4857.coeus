declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  .local_6 = .param_2;
  for (.local_6 = 32 to 64)
  {
    .local_5 = .param_2;
    if (((.param_2 - .param_4) == 21))
    {
      .param_4 = (bvxor(.local_5, 9) / bvor(.local_6, .local_5));
    }
    else
    {
      .param_4 = .param_2;
    }
  }
  .param_2 = .param_4;
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  .local_12 = .param_8;
  for (.local_12 = 32 to 64 step 2)
  {
    .local_11 = .param_8;
    if (((.param_8 - .param_10) == 21))
    {
      .param_10 = (bvxor(.local_11, 9) / bvor(.local_12, .local_11));
    }
    else
    {
      .param_10 = .param_8;
    }
    if (((1 + .local_12) <= 63))
    {
      .local_11 = .param_8;
      if (((.param_8 - .param_10) == 21))
      {
        .param_10 = (bvxor(.local_11, 9) / bvor((1 + .local_12), .local_11));
      }
      else
      {
        .param_10 = .param_8;
      }
    }
  }
  .param_8 = .param_10;
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

