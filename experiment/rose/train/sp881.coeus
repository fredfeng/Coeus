declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 9;
  .local_3 = true;
  .local_7 = (10 / .local_4);
  .local_5 = bvand(.local_4, .local_4);
  .local_6 = -12;
  for (.param_2 = 0 to bvand(.local_4, 8))
  {
    while ((.local_6 >= (1 % .local_4)))
    {
      .local_5 = ((.local_7 * .local_6) - (.local_5 * .param_2));
    }
    .local_4 = ((.local_4 / .local_7) * (- .local_6));
  }
  .local_7 = (.local_6 + 32);
  .local_4 = bvor(.local_4, (- bvor(.local_5, .local_6)));
  for (.local_7 = 3 to 6)
  {
    .local_4 = ((6 % .local_7) + bvor(.local_5, .local_5));
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_9) returns (int .ret_8)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 9;
  .local_10 = true;
  .local_14 = (10 / .local_11);
  .local_12 = bvand(.local_11, .local_11);
  .local_13 = -12;
  for (.param_9 = 0 to bvand(.local_11, 8))
  {
    while ((.local_13 >= (1 % .local_11)))
    {
      .local_12 = ((.local_14 * .local_13) - (.local_12 * .param_9));
    }
    .local_11 = ((.local_11 / .local_14) * (- .local_13));
  }
  .local_14 = (.local_13 + 32);
  .local_11 = bvor(.local_11, (- bvor(.local_12, .local_13)));
  for (.local_14 = 3 to 6 step 2)
  {
    .local_11 = ((6 % .local_14) + bvor(.local_12, .local_12));
    if (((1 + .local_14) <= 5))
    {
      .local_11 = ((6 % (1 + .local_14)) + bvor(.local_12, .local_12));
    }
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

