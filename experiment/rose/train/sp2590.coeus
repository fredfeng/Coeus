declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  bool .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = 1;
  .local_4 = true;
  .local_6 = (bvand(.local_5, (- .local_5)) > bvxor(5, bvand(.local_5, 5)));
  for (.local_7 = 3 downto 64)
  {
    .local_8 = 32;
    while (.local_4)
    {
      .local_9 = -48;
      if ((! .local_6))
      {
        .local_8 = 1;
        .local_9 = 0;
      }
      else
      {
        .param_2 = .local_9;
      }
      .param_3 = ((- .local_9) * (.local_8 % .local_5));
    }
  }
  for (.param_2 = 0 to bvor(2, .param_3))
  {
    .local_7 = ((.local_5 - .param_3) - .param_2);
    for (.local_8 = 6 to 1)
    {
      .param_3 = (- bvand(2, .param_2));
    }
    .local_5 = (.local_7 / (- .param_3));
  }
  .local_5 = bvand((- .local_5), ((.local_5 - 64) * (.param_3 - .local_5)));
  .ret_1 = .local_5;
}

procedure f1(int .param_11, int .param_12) returns (int .ret_10)
{
  bool .local_13;
  int .local_14;
  bool .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_14 = 1;
  .local_13 = true;
  .local_15 = (bvand(.local_14, (- .local_14)) > bvxor(5, bvand(.local_14,
   5)));
  for (.local_16 = 3 downto 64)
  {
    .local_17 = 32;
    while (.local_13)
    {
      .local_18 = -48;
      if ((! .local_15))
      {
        .local_17 = 1;
        .local_18 = 0;
      }
      else
      {
        .param_11 = .local_18;
      }
      .param_12 = ((- .local_18) * (.local_17 % .local_14));
    }
  }
  for (.param_11 = 0 to bvor(2, .param_12))
  {
    .local_16 = ((.local_14 - .param_12) - .param_11);
    for (.local_17 = 6 to 1 step 2)
    {
      .param_12 = (- bvand(2, .param_11));
      if (((1 + .local_17) <= 0))
      {
        .param_12 = (- bvand(2, .param_11));
      }
    }
    .local_14 = (.local_16 / (- .param_12));
  }
  .local_14 = bvand((- .local_14),
   ((.local_14 - 64) * (.param_12 - .local_14)));
  .ret_10 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
ensures (.ret_1 == .ret_10);

