declare int bvxor(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  .local_4 = false;
  for (.local_5 = 0 to (.param_2 + .param_2))
  {
    for (.param_3 = 0 to 3)
    {
      if (.local_4)
      {
        
      }
      else
      {
        .local_6 = (.param_3 - 2);
        .param_2 = bvxor((.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + .local_6))))))),
         (- .param_3));
      }
    }
    .param_2 = (- (.param_2 % 64));
  }
  while ((32 <= (.param_2 + .param_2)))
  {
    
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, int .param_9) returns (int .ret_7)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  .local_10 = false;
  for (.local_11 = 0 to (.param_8 + .param_8))
  {
    for (.param_9 = 0 to 3 step 2)
    {
      if (.local_10)
      {
        
      }
      else
      {
        .local_12 = (.param_9 - 2);
        .param_8 = bvxor((.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12))))))),
         (- .param_9));
      }
      if (((1 + .param_9) <= 2))
      {
        if (.local_10)
        {
          
        }
        else
        {
          .local_12 = ((1 + .param_9) - 2);
          .param_8 = bvxor((.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12))))))),
           (- (1 + .param_9)));
        }
      }
    }
    .param_8 = (- (.param_8 % 64));
  }
  while ((32 <= (.param_8 + .param_8)))
  {
    
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

