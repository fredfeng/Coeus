declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_3 = true;
  .local_7 = (1 - .param_2);
  .local_6 = ((16 - .param_2) / bvxor(.param_2, 0));
  .local_4 = 1;
  .local_5 = .param_2;
  for (.local_8 = 0 to 5)
  {
    for (.local_9 = 0 to .local_6)
    {
      .local_4 = (.local_4 % .local_7);
      .local_7 = 64;
    }
    .local_6 = (.param_2 - 64);
  }
  .local_7 = (- .param_2);
  while ((.local_7 > .local_5))
  {
    while (((! .local_3) != .local_3))
    {
      .local_5 = 2;
      .param_2 = ((32 * .local_7) - .param_2);
    }
    while ((-64 > (.param_2 % .local_6)))
    {
      .local_7 = bvor((- .local_6), (- .local_5));
      .local_6 = bvor(67, .local_4);
    }
    .local_6 = (- .local_7);
    .local_7 = (.local_7 - 1);
  }
  for (.local_6 = 0 to .param_2)
  {
    .local_7 = (4 / ((3 - .local_6) + (2 + .local_6)));
    .local_4 = .local_7;
  }
  .param_2 = (1 / bvxor(4, .local_4));
  .ret_1 = .param_2;
}

procedure f1(int .param_11) returns (int .ret_10)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_12 = true;
  .local_16 = (1 - .param_11);
  .local_15 = ((16 - .param_11) / bvxor(.param_11, 0));
  .local_13 = 1;
  .local_14 = .param_11;
  for (.local_17 = 0 to 5)
  {
    for (.local_18 = 0 to ((-1 + .local_15) + 1))
    {
      .local_13 = (.local_13 % .local_16);
      .local_16 = 64;
    }
  }
  for (.local_17 = 0 to 5)
  {
    .local_15 = (.param_11 - 64);
  }
  .local_16 = (- .param_11);
  while ((.local_16 >= (.local_14 + 1)))
  {
    while (((! .local_12) != .local_12))
    {
      .local_14 = 2;
      .param_11 = ((32 * .local_16) - .param_11);
    }
    while ((-64 > (.param_11 % .local_15)))
    {
      .local_16 = bvor((- .local_15), (- .local_14));
      .local_15 = bvor(67, .local_13);
    }
    .local_15 = (- .local_16);
    .local_16 = (.local_16 - 1);
  }
  for (.local_15 = 0 to ((-1 + .param_11) + 1))
  {
    .local_16 = (4 / ((3 - .local_15) + (2 + .local_15)));
    .local_13 = .local_16;
  }
  .param_11 = (1 / bvxor(4, .local_13));
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
ensures (.ret_1 == .ret_10);

