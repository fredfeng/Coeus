declare int bvxor(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  .local_5 = 3;
  for (.param_3 = 0 to bvxor(1, .local_5))
  {
    .local_6 = (- bvxor((16 - .param_3), (.param_4 + .param_3)));
    .local_5 = ((.local_5 + .param_3) / (- .param_4));
    for (.local_7 = 0 to 16)
    {
      .local_5 = (bvxor(64, .local_6) + .local_5);
    }
    while ((! .param_2))
    {
      .param_2 = (! .param_2);
      .local_5 = .param_3;
    }
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_9, int .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  int .local_13;
  int .local_14;
  .local_12 = 3;
  for (.param_10 = 0 to bvxor(1, .local_12))
  {
    .local_13 = (- bvxor((16 - .param_10), (.param_11 + .param_10)));
    .local_12 = ((.local_12 + .param_10) / (- .param_11));
    for (.local_14 = 0 to 16 step 2)
    {
      .local_12 = (bvxor(64, .local_13) + .local_12);
      if (((1 + .local_14) <= 15))
      {
        .local_12 = (bvxor(64, .local_13) + .local_12);
      }
    }
    while ((! .param_9))
    {
      .param_9 = (! .param_9);
      .local_12 = .param_10;
    }
  }
  .ret_8 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

