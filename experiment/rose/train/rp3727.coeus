declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 2;
  .local_3 = false;
  .local_5 = ((.local_4 + .local_4) * bvxor(.local_4, 0));
  .local_6 = (.local_4 + bvor(.local_4, .local_4));
  for (.local_7 = 0 to (64 + .local_6))
  {
    .param_2 = 10;
    .local_6 = bvxor((.param_2 * .local_4), (.local_5 % .local_5));
  }
  while (.local_3)
  {
    for (.param_2 = 0 to (6 - .local_5))
    {
      .local_4 = .param_2;
      .local_5 = 16;
    }
    .local_4 = (.local_6 - .local_4);
  }
  if (.local_3)
  {
    .local_4 = bvand(.local_5, .local_4);
  }
  else
  {
    for (.local_7 = 0 to bvxor(0, .local_4))
    {
      .local_4 = ((- .local_5) * (- .local_4));
    }
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_9) returns (int .ret_8)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 2;
  .local_10 = false;
  .local_12 = ((.local_11 + .local_11) * bvxor(.local_11, 0));
  .local_13 = (.local_11 + bvor(.local_11, .local_11));
  for (.local_14 = 0 to (.local_13 + 64))
  {
    .param_9 = 10;
    .local_13 = bvxor((.param_9 * .local_11), (.local_12 % .local_12));
  }
  while (.local_10)
  {
    for (.param_9 = 0 to ((5 - .local_12) + 1))
    {
      .local_11 = .param_9;
    }
    for (.param_9 = 0 to ((5 - .local_12) + 1))
    {
      .local_12 = 16;
    }
    .local_11 = (.local_13 - .local_11);
  }
  if (.local_10)
  {
    .local_11 = bvand(.local_12, .local_11);
  }
  else
  {
    for (.local_14 = 0 to ((-1 + bvxor(0, .local_11)) + 1))
    {
      .local_11 = ((- .local_12) * (- .local_11));
    }
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

