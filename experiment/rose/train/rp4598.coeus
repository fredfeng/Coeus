declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, int .param_5,
             int .param_6)
 returns (int .ret_1)
{
  bool .local_7;
  int .local_8;
  .local_7 = true;
  .local_8 = (- .param_2);
  .param_4 = 64;
  while ((.param_4 > 4))
  {
    .param_3 = 0;
    while ((.param_3 < .param_6))
    {
      .local_8 = 0;
      .param_2 = bvor(.param_4, 5);
      if ((! .local_7))
      {
        .param_5 = .param_3;
        .param_4 = ((- .param_5) % bvor(32, (.param_4 + .param_3)));
      }
      else
      {
        .param_2 = (- bvxor(.param_2, 7));
      }
      .param_3 = (.param_3 + 1);
    }
    if (.local_7)
    {
      .param_5 = bvand(.param_5, 64);
      .param_6 = (-32 - ((.param_2 % 64) % .param_5));
    }
    else
    {
      .param_6 = bvor(bvor(.local_8, .param_4), (.param_5 - .local_8));
      .local_8 = 0;
      while ((.local_8 < .param_4))
      {
        .param_6 = bvor((.param_6 + (.param_6 + (.param_6 + (.param_6 + (.param_6 + (.param_6 + (.param_6 + .param_6))))))),
         288);
        .local_8 = (.local_8 + 1);
      }
    }
    .param_4 = (.param_4 - 1);
  }
  .param_2 = (.param_6 + 16);
  .param_2 = (.param_2 / (.param_2 - 2));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11, int .param_12, int .param_13,
             int .param_14)
 returns (int .ret_9)
{
  bool .local_15;
  int .local_16;
  .local_15 = true;
  .local_16 = (- .param_10);
  .param_12 = 64;
  while ((.param_12 >= 5))
  {
    .param_11 = 0;
    while ((.param_11 <= (-1 + .param_14)))
    {
      .local_16 = 0;
      .param_11 = (.param_11 + 1);
    }
    .param_11 = 0;
    while ((.param_11 <= (-1 + .param_14)))
    {
      .param_10 = bvor(.param_12, 5);
      if ((! .local_15))
      {
        .param_13 = .param_11;
        .param_12 = ((- .param_13) % bvor(32, (.param_12 + .param_11)));
      }
      else
      {
        .param_10 = (- bvxor(.param_10, 7));
      }
      .param_11 = (.param_11 + 1);
    }
    if (.local_15)
    {
      .param_13 = bvand(.param_13, 64);
      .param_14 = (-32 - ((.param_10 % 64) % .param_13));
    }
    else
    {
      .param_14 = bvor(bvor(.local_16, .param_12), (.param_13 - .local_16));
      .local_16 = 0;
      while ((.local_16 <= (.param_12 - 1)))
      {
        .param_14 = bvor((.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + .param_14))))))),
         288);
        .local_16 = (.local_16 + 1);
      }
    }
    .param_12 = (.param_12 - 1);
  }
  .param_10 = (.param_14 + 16);
  .param_10 = (.param_10 / (.param_10 - 2));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
requires (.param_6 == .param_14);
ensures (.ret_1 == .ret_9);

