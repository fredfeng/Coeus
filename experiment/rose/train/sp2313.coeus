declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  for (.local_5 = 0 to (- .param_2))
  {
    while ((32 <= .param_4))
    {
      .local_6 = .param_2;
      .param_4 = (- ((.param_2 / .local_6) * bvor(.param_2, 10)));
    }
    .param_2 = bvor((.param_2 - 8), (.param_4 * .param_4));
  }
  .local_5 = bvand(.param_2, .param_2);
  for (.param_4 = 0 to 9)
  {
    for (.local_5 = 16 to 1)
    {
      .param_2 = (bvand(bvor(.local_5, .local_5),
       5) + ((1 - .local_5) + bvor(.param_2, .param_4)));
    }
    .param_2 = ((8 / (- .param_2)) * .param_2);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  for (.local_11 = 0 to (- .param_8))
  {
    while ((32 <= .param_10))
    {
      .local_12 = .param_8;
      .param_10 = (- ((.param_8 / .local_12) * bvor(.param_8, 10)));
    }
    .param_8 = bvor((.param_8 - 8), (.param_10 * .param_10));
  }
  .local_11 = bvand(.param_8, .param_8);
  for (.param_10 = 0 to 9)
  {
    for (.local_11 = 16 to 1 step 2)
    {
      .param_8 = (bvand(bvor(.local_11, .local_11),
       5) + ((1 - .local_11) + bvor(.param_8, .param_10)));
      if (((1 + .local_11) <= 0))
      {
        .param_8 = (bvand(bvor((1 + .local_11), (1 + .local_11)),
         5) + ((1 - (1 + .local_11)) + bvor(.param_8, .param_10)));
      }
    }
    .param_8 = ((8 / (- .param_8)) * .param_8);
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

