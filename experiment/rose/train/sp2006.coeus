declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 6;
  .local_7 = bvor((.local_4 * .local_4), 9);
  .local_5 = 0;
  .local_6 = -1;
  .local_6 = ((.local_4 % (.local_6 - .local_7)) + (.local_7 % (- .local_6)));
  for (.local_7 = 0 to (.local_4 + .local_6))
  {
    .local_8 = (- .local_7);
    for (.param_3 = 0 to -3)
    {
      .local_6 = bvand(bvxor(.local_8, .local_8), bvand(.param_3, .local_8));
    }
  }
  while ((.local_4 >= .local_5))
  {
    .local_7 = .local_6;
    .local_7 = (bvor(.local_5, .local_7) - 5);
    .local_5 = -4;
    .local_4 = (.local_5 % bvor(.local_7, .local_5));
    .local_6 = 16;
  }
  .local_4 = (((.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5)))) * (1 % .local_5)) * (bvor(.local_6,
   .local_5) % (.local_4 + .local_4)));
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 6;
  .local_15 = bvor((.local_12 * .local_12), 9);
  .local_13 = 0;
  .local_14 = -1;
  .local_14 = ((.local_12 % (.local_14 - .local_15)) + (.local_15 % (- .local_14)));
  for (.local_15 = 0 to (.local_12 + .local_14))
  {
    .local_16 = (- .local_15);
    for (.param_11 = 0 to -3 step 2)
    {
      .local_14 = bvand(bvxor(.local_16, .local_16), bvand(.param_11,
       .local_16));
      if (((1 + .param_11) <= -4))
      {
        .local_14 = bvand(bvxor(.local_16, .local_16), bvand((1 + .param_11),
         .local_16));
      }
    }
  }
  while ((.local_12 >= .local_13))
  {
    .local_15 = .local_14;
    .local_15 = (bvor(.local_13, .local_15) - 5);
    .local_13 = -4;
    .local_12 = (.local_13 % bvor(.local_15, .local_13));
    .local_14 = 16;
  }
  .local_12 = (((.local_13 + (.local_13 + (.local_13 + (.local_13 + .local_13)))) * (1 % .local_13)) * (bvor(.local_14,
   .local_13) % (.local_12 + .local_12)));
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

