declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_4 = 8;
  .local_3 = true;
  .local_6 = (- .local_4);
  .local_5 = .local_4;
  for (.local_6 = 0 to bvor(.param_2, 9))
  {
    .local_7 = bvand(16, bvxor(bvand(.local_5, .local_5),
     (.local_4 * .local_4)));
    .local_4 = ((.local_4 + .param_2) + 8);
    .local_5 = (- ((.local_5 - .local_7) - bvand(.local_7, 16)));
    if ((.local_4 != 2))
    {
      .local_8 = ((.local_5 + (.local_5 + .local_5)) * (.local_6 * 16));
      for (.local_9 = 0 to 8)
      {
        .local_4 = .local_8;
      }
      .local_5 = (((.local_4 - .param_2) - .local_7) - bvor(0, .local_7));
    }
    else
    {
      .param_2 = .local_6;
    }
  }
  .local_4 = .local_5;
  .local_5 = .param_2;
  .local_4 = ((- .param_2) - bvxor(.local_4, .local_5));
  .ret_1 = .local_4;
}

procedure f1(int .param_11) returns (int .ret_10)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_13 = 8;
  .local_12 = true;
  .local_15 = (- .local_13);
  .local_14 = .local_13;
  for (.local_15 = 0 to bvor(.param_11, 9))
  {
    .local_16 = bvand(16, bvxor(bvand(.local_14, .local_14),
     (.local_13 * .local_13)));
    .local_13 = ((.local_13 + .param_11) + 8);
    .local_14 = (- ((.local_14 - .local_16) - bvand(.local_16, 16)));
    if ((.local_13 != 2))
    {
      .local_17 = ((.local_14 + (.local_14 + .local_14)) * (.local_15 * 16));
      for (.local_18 = 0 to 8 step 2)
      {
        .local_13 = .local_17;
        if (((1 + .local_18) <= 7))
        {
          .local_13 = .local_17;
        }
      }
      .local_14 = (((.local_13 - .param_11) - .local_16) - bvor(0,
       .local_16));
    }
    else
    {
      .param_11 = .local_15;
    }
  }
  .local_13 = .local_14;
  .local_14 = .param_11;
  .local_13 = ((- .param_11) - bvxor(.local_13, .local_14));
  .ret_10 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
ensures (.ret_1 == .ret_10);

