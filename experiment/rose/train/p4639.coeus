declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  while (((.param_4 * .param_2) != (.param_2 + .param_2)))
  {
    .local_5 = .param_4;
    for (.local_6 = 0 to 5)
    {
      .param_2 = .param_4;
      for (.local_7 = 0 to 0)
      {
        .param_4 = (.param_2 - 9);
      }
    }
    .param_4 = (((- .param_2) + 32) - (.local_5 / .param_4));
  }
  .param_4 = (bvand(8, .param_4) + .param_4);
  .param_2 = (- bvand(.param_4, 6));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  int .local_13;
  int .local_14;
  while (((.param_11 * .param_9) != (.param_9 + .param_9)))
  {
    .local_12 = .param_11;
    for (.local_13 = 0 to 5)
    {
      .param_9 = .param_11;
      for (.local_14 = 0 to 0 step 2)
      {
        .param_11 = (.param_9 - 9);
        if (((1 + .local_14) <= -1))
        {
          .param_11 = (.param_9 - 9);
        }
      }
    }
    .param_11 = (((- .param_9) + 32) - (.local_12 / .param_11));
  }
  .param_11 = (bvand(8, .param_11) + .param_11);
  .param_9 = (- bvand(.param_11, 6));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

