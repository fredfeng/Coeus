declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0() returns (int .ret_1)
{
  int .local_2;
  bool .local_3;
  int .local_4;
  int .local_5;
  .local_2 = 1;
  .local_3 = true;
  .local_4 = (.local_2 + .local_2);
  for (.local_5 = 0 to 8)
  {
    .local_2 = (.local_2 - bvand(0, .local_4));
  }
  while ((! .local_3))
  {
    .local_2 = .local_4;
    .local_5 = (- .local_4);
    .local_2 = (.local_5 * bvxor(.local_2, 0));
  }
  .ret_1 = .local_2;
}

procedure f1() returns (int .ret_6)
{
  int .local_7;
  bool .local_8;
  int .local_9;
  int .local_10;
  .local_7 = 1;
  .local_8 = true;
  .local_9 = (.local_7 + .local_7);
  for (.local_10 = 0 to 8 step 2)
  {
    .local_7 = (.local_7 - bvand(0, .local_9));
    if (((1 + .local_10) <= 7))
    {
      .local_7 = (.local_7 - bvand(0, .local_9));
    }
  }
  while ((! .local_8))
  {
    .local_7 = .local_9;
    .local_10 = (- .local_9);
    .local_7 = (.local_10 * bvxor(.local_7, 0));
  }
  .ret_6 = .local_7;
}

$lentry f0;
$rentry f1;

ensures (.ret_1 == .ret_6);

