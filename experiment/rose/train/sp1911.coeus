declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_6 = 0;
  .local_4 = .param_2;
  for (.local_4 = 0 to .param_2)
  {
    .local_5 = (1 % .param_2);
    .param_2 = ((.param_2 / .local_5) - .local_4);
    for (.local_6 = 0 to 2)
    {
      .local_5 = bvor(bvxor(-16, .local_6), (- .local_5));
    }
    while ((.param_2 >= .local_5))
    {
      .param_2 = -16;
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_12 = 0;
  .local_10 = .param_8;
  for (.local_10 = 0 to .param_8)
  {
    .local_11 = (1 % .param_8);
    .param_8 = ((.param_8 / .local_11) - .local_10);
    for (.local_12 = 0 to 2 step 2)
    {
      .local_11 = bvor(bvxor(-16, .local_12), (- .local_11));
      if (((1 + .local_12) <= 1))
      {
        .local_11 = bvor(bvxor(-16, (1 + .local_12)), (- .local_11));
      }
    }
    while ((.param_8 >= .local_11))
    {
      .param_8 = -16;
    }
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

