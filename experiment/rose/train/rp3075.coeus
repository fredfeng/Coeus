declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 4;
  .local_3 = false;
  .local_5 = (20 + .local_4);
  .local_6 = bvand(bvxor(.local_4, 16), bvxor(.local_4, 0));
  .param_2 = (.local_4 % .param_2);
  while (.local_3)
  {
    .param_2 = bvand((- .local_5), .param_2);
    .local_6 = 0;
    while ((.local_6 < .local_4))
    {
      .param_2 = (.local_6 + 2);
      .local_6 = (.local_6 + 1);
    }
  }
  .local_5 = 0;
  while ((.local_5 < .param_2))
  {
    .local_6 = .param_2;
    .local_7 = 0;
    while ((.local_7 < .local_5))
    {
      .param_2 = .local_4;
      .local_6 = .local_5;
      .local_7 = (.local_7 + 1);
    }
    .local_5 = .local_4;
    if ((! .local_3))
    {
      .local_8 = 0;
      while ((.local_8 < (.local_5 / 3)))
      {
        .local_7 = (bvor(bvxor(.local_4, .param_2),
         (.local_5 * .local_5)) + (.local_4 + 6));
        .local_4 = (- .local_7);
        .local_8 = (.local_8 + 1);
      }
    }
    else
    {
      if (.local_3)
      {
        .local_4 = .local_6;
        .local_4 = (.local_4 - (5 % .local_4));
      }
      else
      {
        .local_4 = .param_2;
      }
    }
    .local_5 = (.local_5 + 1);
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_10) returns (int .ret_9)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 4;
  .local_11 = false;
  .local_13 = (20 + .local_12);
  .local_14 = bvand(bvxor(.local_12, 16), bvxor(.local_12, 0));
  .param_10 = (.local_12 % .param_10);
  while (.local_11)
  {
    .param_10 = bvand((- .local_13), .param_10);
    .local_14 = 0;
    while ((.local_14 <= (-1 + .local_12)))
    {
      .param_10 = (.local_14 + 2);
      .local_14 = (.local_14 + 1);
    }
  }
  .local_13 = 0;
  while ((.local_13 <= (-1 + .param_10)))
  {
    .local_14 = .param_10;
    .local_15 = 0;
    while ((.local_15 <= (-1 + .local_13)))
    {
      .param_10 = .local_12;
      .local_15 = (.local_15 + 1);
    }
    .local_15 = 0;
    while ((.local_15 <= (-1 + .local_13)))
    {
      .local_14 = .local_13;
      .local_15 = (.local_15 + 1);
    }
    .local_13 = .local_12;
    if ((! .local_11))
    {
      .local_16 = 0;
      while ((.local_16 <= ((.local_13 / 3) - 1)))
      {
        .local_15 = (bvor(bvxor(.local_12, .param_10),
         (.local_13 * .local_13)) + (.local_12 + 6));
        .local_12 = (- .local_15);
        .local_16 = (.local_16 + 1);
      }
    }
    else
    {
      if (.local_11)
      {
        .local_12 = .local_14;
        .local_12 = (.local_12 - (5 % .local_12));
      }
      else
      {
        .local_12 = .param_10;
      }
    }
    .local_13 = (.local_13 + 1);
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
ensures (.ret_1 == .ret_9);

