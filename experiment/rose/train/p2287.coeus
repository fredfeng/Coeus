declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, bool .param_5)
 returns (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = (- (.param_2 + (.param_2 + (.param_2 + .param_2))));
  .local_7 = 5;
  .param_2 = (.param_2 + bvor(bvand(.param_2, .local_6), .local_7));
  for (.local_7 = 0 to bvor(.param_4, .param_4))
  {
    while (.param_5)
    {
      .param_2 = 0;
      .param_5 = (.param_3 != (-5 < .local_7));
      for (.local_8 = 0 to -3)
      {
        .local_6 = .param_2;
      }
    }
    .param_2 = (16 % (- .local_6));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, bool .param_13)
 returns (int .ret_9)
{
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = (- (.param_10 + (.param_10 + (.param_10 + .param_10))));
  .local_15 = 5;
  .param_10 = (.param_10 + bvor(bvand(.param_10, .local_14), .local_15));
  for (.local_15 = 0 to bvor(.param_12, .param_12))
  {
    while (.param_13)
    {
      .param_10 = 0;
      .param_13 = (.param_11 != (-5 < .local_15));
      for (.local_16 = 0 to -3 step 2)
      {
        .local_14 = .param_10;
        if (((1 + .local_16) <= -4))
        {
          .local_14 = .param_10;
        }
      }
    }
    .param_10 = (16 % (- .local_14));
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

