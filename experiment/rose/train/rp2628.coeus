declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  .local_4 = false;
  .local_7 = .param_2;
  .local_5 = (.param_2 % 64);
  .local_6 = .param_2;
  while (.param_3)
  {
    .local_7 = 8;
    .local_5 = (- bvand(0, .local_7));
  }
  .local_7 = 0;
  while ((.local_7 < (.param_2 - .local_5)))
  {
    .local_8 = bvor((.local_7 + 5), bvor(.local_7, 64));
    .local_9 = bvxor(bvor(.local_5, .local_7), (.param_2 + .local_7));
    .local_7 = (.local_8 - .local_9);
    .local_5 = (bvor(1, .param_2) % (- .local_7));
    .local_11 = 0;
    while ((.local_11 < bvxor(.param_2, .local_7)))
    {
      if ((.param_2 < .local_6))
      {
        .local_9 = bvand(.local_5, -2);
        .local_5 = (1 + .param_2);
      }
      else
      {
        .local_8 = 64;
      }
      .param_2 = ((.local_9 % .local_9) - bvor(.local_8, .local_5));
      .local_11 = (.local_11 + 1);
    }
    .local_10 = 0;
    while ((.local_10 < 2))
    {
      .local_11 = .param_2;
      .param_2 = (- .local_11);
      .local_10 = (.local_10 + 1);
    }
    .local_7 = (.local_7 + 1);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_13, bool .param_14) returns (int .ret_12)
{
  bool .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  int .local_19;
  int .local_20;
  int .local_21;
  int .local_22;
  .local_15 = false;
  .local_18 = .param_13;
  .local_16 = (.param_13 % 64);
  .local_17 = .param_13;
  while (.param_14)
  {
    .local_18 = 8;
    .local_16 = (- bvand(0, .local_18));
  }
  .local_18 = 0;
  while ((.local_18 <= ((.param_13 - .local_16) - 1)))
  {
    .local_19 = bvor((.local_18 + 5), bvor(.local_18, 64));
    .local_20 = bvxor(bvor(.local_16, .local_18), (.param_13 + .local_18));
    .local_18 = (.local_19 - .local_20);
    .local_16 = (bvor(1, .param_13) % (- .local_18));
    .local_22 = 0;
    while ((.local_22 <= (-1 + bvxor(.param_13, .local_18))))
    {
      if ((.param_13 < .local_17))
      {
        .local_20 = bvand(.local_16, -2);
        .local_16 = (1 + .param_13);
      }
      else
      {
        .local_19 = 64;
      }
      .local_22 = (.local_22 + 1);
    }
    .local_22 = 0;
    while ((.local_22 <= (-1 + bvxor(.param_13, .local_18))))
    {
      .param_13 = ((.local_20 % .local_20) - bvor(.local_19, .local_16));
      .local_22 = (.local_22 + 1);
    }
    .local_21 = 0;
    while ((.local_21 <= 1))
    {
      .local_22 = .param_13;
      .local_21 = (.local_21 + 1);
    }
    .local_21 = 0;
    while ((.local_21 <= 1))
    {
      .param_13 = (- .local_22);
      .local_21 = (.local_21 + 1);
    }
    .local_18 = (.local_18 + 1);
  }
  .ret_12 = .param_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_13);
requires (.param_3 == .param_14);
ensures (.ret_1 == .ret_12);

