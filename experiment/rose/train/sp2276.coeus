declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  .local_7 = .param_2;
  .local_6 = ((2 - .param_5) + 3);
  for (.param_5 = 0 to 6)
  {
    .local_7 = bvor(.local_6, (.param_2 / 8));
    .param_4 = bvor(((- .param_2) % 4), .param_2);
  }
  for (.local_7 = 0 to 0)
  {
    .param_5 = .local_7;
    while (.param_3)
    {
      .param_5 = 64;
    }
    .local_6 = 0;
  }
  .param_2 = bvand(.param_4, 0);
  for (.param_4 = 0 to bvand(.local_6, .local_6))
  {
    for (.local_7 = 0 to 32)
    {
      
    }
    .param_2 = .local_6;
  }
  .param_2 = (- (.param_2 - .local_6));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11, int .param_12)
 returns (int .ret_8)
{
  int .local_13;
  int .local_14;
  .local_14 = .param_9;
  .local_13 = ((2 - .param_12) + 3);
  for (.param_12 = 0 to 6 step 2)
  {
    .local_14 = bvor(.local_13, (.param_9 / 8));
    .param_11 = bvor(((- .param_9) % 4), .param_9);
    if (((1 + .param_12) <= 5))
    {
      .local_14 = bvor(.local_13, (.param_9 / 8));
      .param_11 = bvor(((- .param_9) % 4), .param_9);
    }
  }
  for (.local_14 = 0 to 0)
  {
    .param_12 = .local_14;
    while (.param_10)
    {
      .param_12 = 64;
    }
    .local_13 = 0;
  }
  .param_9 = bvand(.param_11, 0);
  for (.param_11 = 0 to bvand(.local_13, .local_13))
  {
    for (.local_14 = 0 to 32 step 2)
    {
      if (((1 + .local_14) <= 31))
      {
        
      }
    }
    .param_9 = .local_13;
  }
  .param_9 = (- (.param_9 - .local_13));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
requires (.param_5 == .param_12);
ensures (.ret_1 == .ret_8);

