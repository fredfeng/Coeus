declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(bool .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 32;
  .local_3 = true;
  .local_6 = bvor((.local_4 + .local_4), 1);
  .local_5 = (bvor(.local_4, .local_4) * .local_4);
  while (.param_2)
  {
    .local_4 = (.local_6 + .local_4);
    .param_2 = .local_3;
  }
  for (.local_6 = 5 to 32)
  {
    .local_7 = (.local_5 + 64);
    .local_7 = (bvxor(.local_5, .local_5) * bvor(.local_4, .local_7));
    .local_4 = .local_7;
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_9) returns (int .ret_8)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 32;
  .local_10 = true;
  .local_13 = bvor((.local_11 + .local_11), 1);
  .local_12 = (bvor(.local_11, .local_11) * .local_11);
  while (.param_9)
  {
    .local_11 = (.local_13 + .local_11);
    .param_9 = .local_10;
  }
  for (.local_13 = 5 to 32 step 2)
  {
    .local_14 = (.local_12 + 64);
    .local_14 = (bvxor(.local_12, .local_12) * bvor(.local_11, .local_14));
    .local_11 = .local_14;
    if (((1 + .local_13) <= 31))
    {
      .local_14 = (.local_12 + 64);
      .local_14 = (bvxor(.local_12, .local_12) * bvor(.local_11, .local_14));
      .local_11 = .local_14;
    }
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

