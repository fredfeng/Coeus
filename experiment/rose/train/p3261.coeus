declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = true;
  .local_8 = bvor((2 % .param_2), bvand(6, .param_2));
  if (((.param_2 >= .param_2) == (.local_4 && .local_4)))
  {
    .local_5 = (-2 - ((.param_2 - 9) / .param_2));
    for (.local_6 = 0 to bvand(.local_5, .local_5))
    {
      .local_7 = bvor(.param_2, 0);
      for (.local_8 = 64 to 32)
      {
        .param_3 = (bvxor(32, .local_7) + (.param_2 + .local_8));
        .local_5 = 5;
      }
      while ((.local_4 || (.local_5 <= .param_2)))
      {
        .local_5 = (- .param_2);
        .param_2 = .param_3;
      }
    }
  }
  else
  {
    .local_5 = bvand(1, (.param_2 % 2));
    .param_3 = (bvor(5, .param_3) - .param_2);
    if (.local_4)
    {
      .local_6 = (.local_5 % .param_2);
      if (((.param_3 + (.param_3 + (.param_3 + .param_3))) < bvand(.param_3,
       0)))
      {
        .local_7 = (((.local_5 + .local_6) % bvor(.local_5,
         .local_6)) - .local_5);
        .param_3 = (.param_3 + (.local_7 + .local_7));
      }
      else
      {
        .local_5 = ((- .local_6) % bvor(.param_2, .local_5));
        .param_2 = (.local_5 + .local_5);
      }
    }
    else
    {
      .param_2 = 1;
    }
  }
  .param_2 = bvand((.param_2 + .param_3), 2);
  .param_2 = (- ((- .param_2) % .param_2));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11) returns (int .ret_9)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = true;
  .local_16 = bvor((2 % .param_10), bvand(6, .param_10));
  if (((.param_10 >= .param_10) == (.local_12 && .local_12)))
  {
    .local_13 = (-2 - ((.param_10 - 9) / .param_10));
    for (.local_14 = 0 to bvand(.local_13, .local_13))
    {
      .local_15 = bvor(.param_10, 0);
      for (.local_16 = 64 to 32 step 2)
      {
        .param_11 = (bvxor(32, .local_15) + (.param_10 + .local_16));
        .local_13 = 5;
        if (((1 + .local_16) <= 31))
        {
          .param_11 = (bvxor(32, .local_15) + (.param_10 + (1 + .local_16)));
          .local_13 = 5;
        }
      }
      while ((.local_12 || (.local_13 <= .param_10)))
      {
        .local_13 = (- .param_10);
        .param_10 = .param_11;
      }
    }
  }
  else
  {
    .local_13 = bvand(1, (.param_10 % 2));
    .param_11 = (bvor(5, .param_11) - .param_10);
    if (.local_12)
    {
      .local_14 = (.local_13 % .param_10);
      if (((.param_11 + (.param_11 + (.param_11 + .param_11))) < bvand(.param_11,
       0)))
      {
        .local_15 = (((.local_13 + .local_14) % bvor(.local_13,
         .local_14)) - .local_13);
        .param_11 = (.param_11 + (.local_15 + .local_15));
      }
      else
      {
        .local_13 = ((- .local_14) % bvor(.param_10, .local_13));
        .param_10 = (.local_13 + .local_13);
      }
    }
    else
    {
      .param_10 = 1;
    }
  }
  .param_10 = bvand((.param_10 + .param_11), 2);
  .param_10 = (- ((- .param_10) % .param_10));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

