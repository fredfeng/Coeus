declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2) returns (int .ret_1)
{
  int .local_3;
  int .local_4;
  int .local_5;
  .local_3 = 32;
  if (.param_2)
  {
    if (.param_2)
    {
      .local_4 = 0;
      while ((.param_2 == (! .param_2)))
      {
        .local_3 = ((.local_4 + .local_3) + 15);
      }
    }
    else
    {
      .local_3 = bvor(.local_3, 6);
      if ((.local_3 > .local_3))
      {
        .local_3 = ((- .local_3) + bvand(bvand(2, .local_3), (.local_3 + 5)));
        .local_3 = ((bvxor(32, .local_3) * .local_3) / (- (32 - .local_3)));
      }
      else
      {
        .local_3 = bvand(.local_3, .local_3);
      }
    }
    .local_3 = (- (.local_3 / bvand(.local_3, .local_3)));
  }
  else
  {
    for (.local_4 = 2 to 64)
    {
      .local_5 = bvand(bvxor(16, .local_3), (.local_3 + 1));
      .local_3 = (3 + (.local_5 * .local_5));
    }
    .local_3 = bvand(1, .local_3);
  }
  .ret_1 = .local_3;
}

procedure f1(bool .param_7) returns (int .ret_6)
{
  int .local_8;
  int .local_9;
  int .local_10;
  .local_8 = 32;
  if (.param_7)
  {
    if (.param_7)
    {
      .local_9 = 0;
      while ((.param_7 == (! .param_7)))
      {
        .local_8 = ((.local_9 + .local_8) + 15);
      }
    }
    else
    {
      .local_8 = bvor(.local_8, 6);
      if ((.local_8 > .local_8))
      {
        .local_8 = ((- .local_8) + bvand(bvand(2, .local_8), (.local_8 + 5)));
        .local_8 = ((bvxor(32, .local_8) * .local_8) / (- (32 - .local_8)));
      }
      else
      {
        .local_8 = bvand(.local_8, .local_8);
      }
    }
    .local_8 = (- (.local_8 / bvand(.local_8, .local_8)));
  }
  else
  {
    for (.local_9 = 2 to 64 step 2)
    {
      .local_10 = bvand(bvxor(16, .local_8), (.local_8 + 1));
      .local_8 = (3 + (.local_10 * .local_10));
      if (((1 + .local_9) <= 63))
      {
        .local_10 = bvand(bvxor(16, .local_8), (.local_8 + 1));
        .local_8 = (3 + (.local_10 * .local_10));
      }
    }
    .local_8 = bvand(1, .local_8);
  }
  .ret_6 = .local_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_7);
ensures (.ret_1 == .ret_6);

