declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, bool .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = 64;
  .local_5 = true;
  .local_7 = bvand(5, .local_6);
  .local_8 = bvor(.local_6, .local_6);
  for (.local_8 = 0 to 0)
  {
    .param_4 = .local_5;
  }
  .local_6 = (bvxor(10, .local_7) - 6);
  for (.local_7 = 0 to bvand(5, .local_6))
  {
    for (.local_8 = 0 to bvand(0, .local_6))
    {
      while ((.param_4 != .local_5))
      {
        .local_6 = (- bvand(.local_7, .local_8));
      }
    }
    while (.param_3)
    {
      .local_6 = 1;
      for (.param_2 = 0 to 0)
      {
        .local_6 = .param_2;
        .local_6 = (-4 * (- .local_6));
      }
    }
  }
  .local_6 = bvor(.local_6, 5);
  .ret_1 = .local_6;
}

procedure f1(int .param_10, bool .param_11, bool .param_12) returns
 (int .ret_9)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = 64;
  .local_13 = true;
  .local_15 = bvand(5, .local_14);
  .local_16 = bvor(.local_14, .local_14);
  for (.local_16 = 0 to 0 step 2)
  {
    .param_12 = .local_13;
    if (((1 + .local_16) <= -1))
    {
      .param_12 = .local_13;
    }
  }
  .local_14 = (bvxor(10, .local_15) - 6);
  for (.local_15 = 0 to bvand(5, .local_14))
  {
    for (.local_16 = 0 to bvand(0, .local_14))
    {
      while ((.param_12 != .local_13))
      {
        .local_14 = (- bvand(.local_15, .local_16));
      }
    }
    while (.param_11)
    {
      .local_14 = 1;
      for (.param_10 = 0 to 0 step 2)
      {
        .local_14 = .param_10;
        .local_14 = (-4 * (- .local_14));
        if (((1 + .param_10) <= -1))
        {
          .local_14 = (1 + .param_10);
          .local_14 = (-4 * (- .local_14));
        }
      }
    }
  }
  .local_14 = bvor(.local_14, 5);
  .ret_9 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

