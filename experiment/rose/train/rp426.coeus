declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 2;
  .local_3 = false;
  .local_5 = (bvor(.local_4, 5) / bvor(.local_4, .local_4));
  while (.local_3)
  {
    .local_6 = bvxor(.local_4, 7);
    if ((! .local_3))
    {
      .local_8 = 0;
      while ((.local_8 < 8))
      {
        .local_5 = 2;
        .local_4 = 0;
        .local_8 = (.local_8 + 1);
      }
    }
    else
    {
      if ((! .local_3))
      {
        .local_4 = (- .param_2);
      }
      else
      {
        .local_4 = (-64 * .local_6);
      }
      .local_4 = (64 / (- .local_4));
    }
  }
  for (.param_2 = 32 downto 16)
  {
    .local_6 = .local_4;
    if (.local_3)
    {
      .local_4 = bvxor(0, .local_6);
    }
    else
    {
      .local_7 = -5;
      .local_4 = 6;
      if ((.local_7 > bvor(.local_6, .local_4)))
      {
        .local_5 = 1;
      }
      else
      {
        .local_5 = bvand(0, (1 - .param_2));
      }
    }
  }
  .local_4 = (((.local_4 * .local_5) * .local_5) * bvand(.local_5,
   .local_4));
  .ret_1 = .local_4;
}

procedure f1(int .param_10) returns (int .ret_9)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 2;
  .local_11 = false;
  .local_13 = (bvor(.local_12, 5) / bvor(.local_12, .local_12));
  while (.local_11)
  {
    .local_14 = bvxor(.local_12, 7);
    if ((! .local_11))
    {
      .local_16 = 0;
      while ((.local_16 <= 7))
      {
        .local_13 = 2;
        .local_16 = (.local_16 + 1);
      }
      .local_16 = 0;
      while ((.local_16 <= 7))
      {
        .local_12 = 0;
        .local_16 = (.local_16 + 1);
      }
    }
    else
    {
      if ((! .local_11))
      {
        .local_12 = (- .param_10);
      }
      else
      {
        .local_12 = (-64 * .local_14);
      }
      .local_12 = (64 / (- .local_12));
    }
  }
  for (.param_10 = 32 downto 16)
  {
    .local_14 = .local_12;
    if (.local_11)
    {
      .local_12 = bvxor(0, .local_14);
    }
    else
    {
      .local_15 = -5;
      .local_12 = 6;
      if ((.local_15 > bvor(.local_14, .local_12)))
      {
        .local_13 = 1;
      }
      else
      {
        .local_13 = bvand(0, (1 - .param_10));
      }
    }
  }
  .local_12 = (((.local_12 * .local_13) * .local_13) * bvand(.local_13,
   .local_12));
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
ensures (.ret_1 == .ret_9);

