declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = 7;
  .local_6 = .local_5;
  .local_8 = .local_5;
  for (.param_4 = 0 to -4)
  {
    .local_8 = ((.local_6 + .param_4) + bvand(.local_8, 64));
  }
  .param_3 = ((.local_5 / .local_6) % .param_3);
  .local_7 = .param_3;
  for (.param_3 = 1 to 7)
  {
    .local_6 = ((6 / .local_8) - (.local_7 - .local_5));
    for (.param_4 = 2 to 8)
    {
      .local_5 = ((.local_8 + 1) - bvand(.local_5, .local_6));
      .local_7 = .local_8;
    }
  }
  .local_5 = (((.local_7 - 3) - (64 - .local_5)) * .local_5);
  .ret_1 = .local_5;
}

procedure f1(bool .param_10, int .param_11, int .param_12) returns
 (int .ret_9)
{
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = 7;
  .local_14 = .local_13;
  .local_16 = .local_13;
  for (.param_12 = 0 to -4 step 2)
  {
    .local_16 = ((.local_14 + .param_12) + bvand(.local_16, 64));
    if (((1 + .param_12) <= -5))
    {
      .local_16 = ((.local_14 + (1 + .param_12)) + bvand(.local_16, 64));
    }
  }
  .param_11 = ((.local_13 / .local_14) % .param_11);
  .local_15 = .param_11;
  for (.param_11 = 1 to 7)
  {
    .local_14 = ((6 / .local_16) - (.local_15 - .local_13));
    for (.param_12 = 2 to 8 step 2)
    {
      .local_13 = ((.local_16 + 1) - bvand(.local_13, .local_14));
      .local_15 = .local_16;
      if (((1 + .param_12) <= 7))
      {
        .local_13 = ((.local_16 + 1) - bvand(.local_13, .local_14));
        .local_15 = .local_16;
      }
    }
  }
  .local_13 = (((.local_15 - 3) - (64 - .local_13)) * .local_13);
  .ret_9 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

