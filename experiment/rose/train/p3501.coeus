declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_7 = .param_2;
  .local_6 = 0;
  for (.local_7 = 0 to (.param_5 * .param_2))
  {
    .local_8 = (.param_5 + .param_5);
    for (.param_4 = 6 to 7)
    {
      .local_9 = .param_5;
      if (((.param_2 % 1) > (1 % .param_2)))
      {
        .param_5 = bvxor(bvand((.param_5 % .local_7), .param_4),
         bvor((.local_6 + (.local_6 + (.local_6 + .local_6))),
         (.param_5 + (.param_5 + (.param_5 + (.param_5 + (.param_5 + (.param_5 + (.param_5 + (.param_5 + (.param_5 + .param_5)))))))))));
      }
      else
      {
        .local_8 = bvand(bvand((- .param_5), (64 + .local_9)), (- bvand(1,
         .param_2)));
        .param_3 = (! .param_3);
      }
      .local_6 = (bvxor(.local_7, 3) + .local_7);
    }
    if (.param_3)
    {
      .local_6 = .local_8;
      .param_2 = bvand(bvor(.local_6, 3), (- .local_6));
    }
    else
    {
      .param_4 = .local_6;
      .local_6 = bvand((.param_5 % .param_4), .param_4);
      .param_2 = .local_6;
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12, int .param_13, int .param_14)
 returns (int .ret_10)
{
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_16 = .param_11;
  .local_15 = 0;
  for (.local_16 = 0 to (.param_14 * .param_11))
  {
    .local_17 = (.param_14 + .param_14);
    for (.param_13 = 6 to 7 step 2)
    {
      .local_18 = .param_14;
      if (((.param_11 % 1) > (1 % .param_11)))
      {
        .param_14 = bvxor(bvand((.param_14 % .local_16), .param_13),
         bvor((.local_15 + (.local_15 + (.local_15 + .local_15))),
         (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + .param_14)))))))))));
      }
      else
      {
        .local_17 = bvand(bvand((- .param_14), (64 + .local_18)), (- bvand(1,
         .param_11)));
        .param_12 = (! .param_12);
      }
      .local_15 = (bvxor(.local_16, 3) + .local_16);
      if (((1 + .param_13) <= 6))
      {
        .local_18 = .param_14;
        if (((.param_11 % 1) > (1 % .param_11)))
        {
          .param_14 = bvxor(bvand((.param_14 % .local_16), (1 + .param_13)),
           bvor((.local_15 + (.local_15 + (.local_15 + .local_15))),
           (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + (.param_14 + .param_14)))))))))));
        }
        else
        {
          .local_17 = bvand(bvand((- .param_14), (64 + .local_18)),
           (- bvand(1, .param_11)));
          .param_12 = (! .param_12);
        }
        .local_15 = (bvxor(.local_16, 3) + .local_16);
      }
    }
    if (.param_12)
    {
      .local_15 = .local_17;
      .param_11 = bvand(bvor(.local_15, 3), (- .local_15));
    }
    else
    {
      .param_13 = .local_15;
      .local_15 = bvand((.param_14 % .param_13), .param_13);
      .param_11 = .local_15;
    }
  }
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
ensures (.ret_1 == .ret_10);

