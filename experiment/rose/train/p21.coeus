declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 8;
  .local_6 = 0;
  for (.local_7 = 0 to -3)
  {
    .local_4 = ((.local_4 + 16) / (.local_6 + 3));
  }
  while (.param_2)
  {
    .local_5 = (! .param_2);
    for (.local_7 = 0 to .param_3)
    {
      for (.local_8 = 2 to 6)
      {
        .local_4 = bvxor(64, bvand(1, .local_4));
      }
      if ((.param_3 <= .param_3))
      {
        .local_5 = ((.local_5 && (.local_5 == .local_5)) == (! .param_2));
      }
      else
      {
        .local_5 = (.param_2 != .local_5);
      }
    }
    .param_2 = .local_5;
    .param_2 = (.param_2 && .local_5);
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 8;
  .local_14 = 0;
  for (.local_15 = 0 to -3 step 2)
  {
    .local_12 = ((.local_12 + 16) / (.local_14 + 3));
    if (((1 + .local_15) <= -4))
    {
      .local_12 = ((.local_12 + 16) / (.local_14 + 3));
    }
  }
  while (.param_10)
  {
    .local_13 = (! .param_10);
    for (.local_15 = 0 to .param_11)
    {
      for (.local_16 = 2 to 6 step 2)
      {
        .local_12 = bvxor(64, bvand(1, .local_12));
        if (((1 + .local_16) <= 5))
        {
          .local_12 = bvxor(64, bvand(1, .local_12));
        }
      }
      if ((.param_11 <= .param_11))
      {
        .local_13 = ((.local_13 && (.local_13 == .local_13)) == (! .param_10));
      }
      else
      {
        .local_13 = (.param_10 != .local_13);
      }
    }
    .param_10 = .local_13;
    .param_10 = (.param_10 && .local_13);
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

