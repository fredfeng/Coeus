declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0() returns (int .ret_1)
{
  bool .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_3 = 64;
  .local_2 = true;
  .local_4 = bvor((bvxor(4, .local_3) - .local_3), .local_3);
  .local_5 = (32 + .local_3);
  .local_3 = (- .local_4);
  for (.local_6 = 0 to 6)
  {
    .local_7 = 5;
    if (.local_2)
    {
      .local_5 = (- bvor(.local_3, .local_5));
    }
    else
    {
      .local_7 = bvor(.local_7, 1);
    }
    .local_3 = bvor(.local_5, (.local_7 - 16));
  }
  .ret_1 = .local_3;
}

procedure f1() returns (int .ret_8)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_10 = 64;
  .local_9 = true;
  .local_11 = bvor((bvxor(4, .local_10) - .local_10), .local_10);
  .local_12 = (32 + .local_10);
  .local_10 = (- .local_11);
  for (.local_13 = 0 to 6 step 2)
  {
    .local_14 = 5;
    if (.local_9)
    {
      .local_12 = (- bvor(.local_10, .local_12));
    }
    else
    {
      .local_14 = bvor(.local_14, 1);
    }
    .local_10 = bvor(.local_12, (.local_14 - 16));
    if (((1 + .local_13) <= 5))
    {
      .local_14 = 5;
      if (.local_9)
      {
        .local_12 = (- bvor(.local_10, .local_12));
      }
      else
      {
        .local_14 = bvor(.local_14, 1);
      }
      .local_10 = bvor(.local_12, (.local_14 - 16));
    }
  }
  .ret_8 = .local_10;
}

$lentry f0;
$rentry f1;

ensures (.ret_1 == .ret_8);

