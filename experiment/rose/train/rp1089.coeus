declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, int .param_5,
             int .param_6)
 returns (int .ret_1)
{
  bool .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_7 = false;
  .local_9 = bvor(3, .param_3);
  .local_8 = ((.param_2 * .local_9) - (10 + .local_9));
  for (.param_3 = 0 to .param_5)
  {
    .local_8 = (- .param_3);
  }
  .param_4 = 0;
  while ((.param_4 < .param_6))
  {
    while (((.local_9 * .local_8) <= (.param_4 / .param_5)))
    {
      while ((! (0 != .param_2)))
      {
        .param_4 = (-64 - .local_8);
      }
      .local_9 = bvor(.param_2, (.param_4 + 2));
    }
    .param_4 = (.param_4 + 1);
  }
  for (.local_9 = 0 to (.param_6 * .local_8))
  {
    .param_4 = .local_8;
    for (.param_3 = 0 to .param_6)
    {
      for (.local_10 = 0 to 0)
      {
        .local_8 = .param_4;
        .param_6 = bvxor((32 + .param_5), 1);
      }
    }
    .param_2 = 3;
  }
  for (.param_5 = 0 to bvxor(.param_6, .local_8))
  {
    .param_2 = bvand(.param_2, 0);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_12, int .param_13, int .param_14, int .param_15,
             int .param_16)
 returns (int .ret_11)
{
  bool .local_17;
  int .local_18;
  int .local_19;
  .local_17 = false;
  .local_19 = bvor(3, .param_13);
  .local_18 = ((.param_12 * .local_19) - (10 + .local_19));
  for (.param_13 = 0 to ((-1 + .param_15) + 1))
  {
    .local_18 = (- .param_13);
  }
  .param_14 = 0;
  while ((.param_14 <= (.param_16 - 1)))
  {
    while (((.local_19 * .local_18) <= (.param_14 / .param_15)))
    {
      while ((! (0 != .param_12)))
      {
        .param_14 = (-64 - .local_18);
      }
      .local_19 = bvor(.param_12, (.param_14 + 2));
    }
    .param_14 = (.param_14 + 1);
  }
  for (.local_19 = 0 to ((-1 + (.param_16 * .local_18)) + 1))
  {
    .param_14 = .local_18;
  }
  for (.local_19 = 0 to ((-1 + (.param_16 * .local_18)) + 1))
  {
    .param_12 = 3;
  }
  for (.param_15 = 0 to ((-1 + bvxor(.param_16, .local_18)) + 1))
  {
    .param_12 = bvand(.param_12, 0);
  }
  .ret_11 = .param_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_12);
requires (.param_3 == .param_13);
requires (.param_4 == .param_14);
requires (.param_5 == .param_15);
requires (.param_6 == .param_16);
ensures (.ret_1 == .ret_11);

