declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  bool .local_6;
  int .local_7;
  int .local_8;
  .local_6 = true;
  .local_7 = .param_2;
  for (.local_8 = 0 to bvand(.local_7, 32))
  {
    .param_4 = 1;
    .local_7 = bvxor((.param_3 + 64), (- .param_3));
    for (.param_3 = 6 to 64)
    {
      .param_4 = (- .param_4);
    }
  }
  for (.local_7 = 0 to bvxor(.param_2, .param_5))
  {
    .local_8 = bvand(bvand(.local_7, .local_7), (.param_4 - .param_5));
    .param_2 = .local_7;
    .param_5 = .local_8;
    while ((! .local_6))
    {
      while (((! .local_6) && .local_6))
      {
        .param_4 = .param_5;
        .param_2 = .param_4;
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  bool .local_14;
  int .local_15;
  int .local_16;
  .local_14 = true;
  .local_15 = .param_10;
  for (.local_16 = 0 to bvand(.local_15, 32))
  {
    .param_12 = 1;
    .local_15 = bvxor((.param_11 + 64), (- .param_11));
    for (.param_11 = 6 to 64 step 2)
    {
      .param_12 = (- .param_12);
      if (((1 + .param_11) <= 63))
      {
        .param_12 = (- .param_12);
      }
    }
  }
  for (.local_15 = 0 to bvxor(.param_10, .param_13))
  {
    .local_16 = bvand(bvand(.local_15, .local_15), (.param_12 - .param_13));
    .param_10 = .local_15;
    .param_13 = .local_16;
    while ((! .local_14))
    {
      while (((! .local_14) && .local_14))
      {
        .param_12 = .param_13;
        .param_10 = .param_12;
      }
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

