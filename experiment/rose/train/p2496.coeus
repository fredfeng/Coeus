declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  .local_6 = 0;
  .local_5 = .param_2;
  for (.local_6 = 0 to (.param_2 % .param_4))
  {
    for (.local_7 = 0 to 5)
    {
      .param_4 = (5 + (.local_5 * (- .local_6)));
    }
    .local_5 = .param_2;
  }
  .param_2 = .param_4;
  .local_5 = ((.param_4 / .local_5) * .param_2);
  .param_2 = bvand((-5 / .param_4), (.local_5 % .param_2));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  int .local_13;
  int .local_14;
  .local_13 = 0;
  .local_12 = .param_9;
  for (.local_13 = 0 to (.param_9 % .param_11))
  {
    for (.local_14 = 0 to 5 step 2)
    {
      .param_11 = (5 + (.local_12 * (- .local_13)));
      if (((1 + .local_14) <= 4))
      {
        .param_11 = (5 + (.local_12 * (- .local_13)));
      }
    }
    .local_12 = .param_9;
  }
  .param_9 = .param_11;
  .local_12 = ((.param_11 / .local_12) * .param_9);
  .param_9 = bvand((-5 / .param_11), (.local_12 % .param_9));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

