declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 8;
  .local_5 = bvor(.local_4, .local_4);
  for (.local_6 = 0 to bvand(0, .local_4))
  {
    .local_5 = .param_3;
    for (.local_7 = 0 to 2)
    {
      .param_3 = 1;
    }
  }
  .param_3 = 32;
  while ((.param_3 > 3))
  {
    .local_6 = 7;
    while (((.param_2 && .param_2) != (.param_3 >= .local_6)))
    {
      .local_5 = (bvand(.local_6, 10) + bvand(.local_4, .local_4));
      .local_6 = ((.local_5 * .local_4) / (- bvand(.local_4, .param_3)));
    }
    if ((.param_2 != (6 >= .local_5)))
    {
      .local_4 = ((- .local_5) + .local_6);
      .local_6 = (.local_4 * .local_6);
      if ((! .param_2))
      {
        .local_4 = bvor(.local_6, .param_3);
      }
      else
      {
        .local_6 = (.local_5 - (.local_6 - .param_3));
        .local_4 = 0;
      }
    }
    else
    {
      .param_3 = bvor((- .local_4), bvand(.param_3, 7));
      .local_4 = (bvxor(.param_3, .param_3) - .local_6);
    }
    .param_3 = (.param_3 - 1);
  }
  .local_4 = (-16 * bvor(1, .local_4));
  .ret_1 = .local_4;
}

procedure f1(bool .param_9, int .param_10) returns (int .ret_8)
{
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 8;
  .local_12 = bvor(.local_11, .local_11);
  for (.local_13 = 0 to bvand(0, .local_11))
  {
    .local_12 = .param_10;
    for (.local_14 = 0 to 2 step 2)
    {
      .param_10 = 1;
      if (((1 + .local_14) <= 1))
      {
        .param_10 = 1;
      }
    }
  }
  .param_10 = 32;
  while ((.param_10 >= 4))
  {
    .local_13 = 7;
    while (((.param_9 && .param_9) != (.param_10 >= .local_13)))
    {
      .local_12 = (bvand(.local_13, 10) + bvand(.local_11, .local_11));
      .local_13 = ((.local_12 * .local_11) / (- bvand(.local_11,
       .param_10)));
    }
    if ((.param_9 != (6 >= .local_12)))
    {
      .local_11 = ((- .local_12) + .local_13);
      .local_13 = (.local_11 * .local_13);
      if ((! .param_9))
      {
        .local_11 = bvor(.local_13, .param_10);
      }
      else
      {
        .local_13 = (.local_12 - (.local_13 - .param_10));
        .local_11 = 0;
      }
    }
    else
    {
      .param_10 = bvor((- .local_11), bvand(.param_10, 7));
      .local_11 = (bvxor(.param_10, .param_10) - .local_13);
    }
    .param_10 = (.param_10 - 1);
  }
  .local_11 = (-16 * bvor(1, .local_11));
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

