declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  while (.param_3)
  {
    .local_6 = 1;
    .local_7 = (bvand(.param_2, .param_2) % 8);
    .param_5 = .param_4;
    .param_4 = .local_6;
    if (.param_3)
    {
      .param_5 = .local_7;
    }
    else
    {
      for (.local_8 = 0 to 0)
      {
        .param_4 = .param_5;
        .local_7 = (- .param_2);
      }
      .param_5 = (.local_7 + .param_4);
      .param_4 = 9;
    }
  }
  .param_3 = ((.param_3 || (.param_4 <= 2)) && .param_3);
  .param_2 = .param_4;
  for (.param_4 = 0 to .param_5)
  {
    while (.param_3)
    {
      .local_6 = bvand(bvand(1, .param_2), bvxor(.param_4, .param_2));
      .param_5 = bvxor((- .param_5), (- .local_6));
    }
    .param_2 = .param_4;
  }
  .param_2 = bvxor((.param_2 % .param_5), (- .param_2));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  int .local_14;
  int .local_15;
  int .local_16;
  while (.param_11)
  {
    .local_14 = 1;
    .local_15 = (bvand(.param_10, .param_10) % 8);
    .param_13 = .param_12;
    .param_12 = .local_14;
    if (.param_11)
    {
      .param_13 = .local_15;
    }
    else
    {
      for (.local_16 = 0 to 0 step 2)
      {
        .param_12 = .param_13;
        .local_15 = (- .param_10);
        if (((1 + .local_16) <= -1))
        {
          .param_12 = .param_13;
          .local_15 = (- .param_10);
        }
      }
      .param_13 = (.local_15 + .param_12);
      .param_12 = 9;
    }
  }
  .param_11 = ((.param_11 || (.param_12 <= 2)) && .param_11);
  .param_10 = .param_12;
  for (.param_12 = 0 to .param_13)
  {
    while (.param_11)
    {
      .local_14 = bvand(bvand(1, .param_10), bvxor(.param_12, .param_10));
      .param_13 = bvxor((- .param_13), (- .local_14));
    }
    .param_10 = .param_12;
  }
  .param_10 = bvxor((.param_10 % .param_13), (- .param_10));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

