declare int bvxor(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  for (.local_7 = 0 to .param_2)
  {
    for (.param_5 = 1 to 4)
    {
      .local_8 = bvxor(32, .param_5);
      .param_2 = .param_4;
      for (.param_4 = 0 to 17)
      {
        .local_6 = (- (.local_8 - .param_2));
        .param_2 = (.local_6 + 8);
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  int .local_14;
  int .local_15;
  int .local_16;
  for (.local_15 = 0 to .param_10)
  {
    for (.param_13 = 1 to 4)
    {
      .local_16 = bvxor(32, .param_13);
      .param_10 = .param_12;
      for (.param_12 = 0 to 17 step 2)
      {
        .local_14 = (- (.local_16 - .param_10));
        .param_10 = (.local_14 + 8);
        if (((1 + .param_12) <= 16))
        {
          .local_14 = (- (.local_16 - .param_10));
          .param_10 = (.local_14 + 8);
        }
      }
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

