declare int bvor(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 64;
  .local_3 = false;
  for (.local_5 = 0 to .param_2)
  {
    .local_6 = (.param_2 - bvor(.local_4, 16));
    .local_4 = 2;
    if (.local_3)
    {
      .local_4 = (- bvor(.param_2, 4));
    }
    else
    {
      for (.local_7 = 0 to 2)
      {
        .local_4 = .local_6;
      }
    }
    .local_4 = (bvor(0, .param_2) / .local_4);
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_9) returns (int .ret_8)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 64;
  .local_10 = false;
  for (.local_12 = 0 to .param_9)
  {
    .local_13 = (.param_9 - bvor(.local_11, 16));
    .local_11 = 2;
    if (.local_10)
    {
      .local_11 = (- bvor(.param_9, 4));
    }
    else
    {
      for (.local_14 = 0 to 2 step 2)
      {
        .local_11 = .local_13;
        if (((1 + .local_14) <= 1))
        {
          .local_11 = .local_13;
        }
      }
    }
    .local_11 = (bvor(0, .param_9) / .local_11);
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

