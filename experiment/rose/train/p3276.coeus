declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  .local_5 = 4;
  .local_6 = (1 / (.local_5 + 7));
  for (.local_6 = 0 to .param_3)
  {
    while ((.param_3 < (- .local_6)))
    {
      .param_3 = 5;
      .param_4 = (- ((- .local_6) - 1));
    }
    .local_5 = bvxor(.param_4, (- .param_4));
  }
  for (.param_3 = 0 to 2)
  {
    .local_6 = .param_4;
    .local_5 = bvxor(.local_6, (7 + .local_6));
    .local_5 = bvand(2, (- .local_5));
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_8, int .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  .local_11 = 4;
  .local_12 = (1 / (.local_11 + 7));
  for (.local_12 = 0 to .param_9)
  {
    while ((.param_9 < (- .local_12)))
    {
      .param_9 = 5;
      .param_10 = (- ((- .local_12) - 1));
    }
    .local_11 = bvxor(.param_10, (- .param_10));
  }
  for (.param_9 = 0 to 2 step 2)
  {
    .local_12 = .param_10;
    .local_11 = bvxor(.local_12, (7 + .local_12));
    .local_11 = bvand(2, (- .local_11));
    if (((1 + .param_9) <= 1))
    {
      .local_12 = .param_10;
      .local_11 = bvxor(.local_12, (7 + .local_12));
      .local_11 = bvand(2, (- .local_11));
    }
  }
  .ret_7 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

