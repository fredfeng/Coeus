declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = bvand(bvxor(.param_2, .param_2), (- .param_2));
  for (.local_4 = 0 to 5)
  {
    .local_5 = .local_4;
    if ((.param_3 && .param_3))
    {
      for (.local_6 = 0 to 0)
      {
        .param_2 = (0 / .local_4);
      }
    }
    else
    {
      .param_2 = (.local_4 / 2);
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = bvand(bvxor(.param_8, .param_8), (- .param_8));
  for (.local_10 = 0 to 5)
  {
    .local_11 = .local_10;
    if ((.param_9 && .param_9))
    {
      for (.local_12 = 0 to 0 step 2)
      {
        .param_8 = (0 / .local_10);
        if (((1 + .local_12) <= -1))
        {
          .param_8 = (0 / .local_10);
        }
      }
    }
    else
    {
      .param_8 = (.local_10 / 2);
    }
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

