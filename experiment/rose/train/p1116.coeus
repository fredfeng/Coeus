declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  int .local_3;
  bool .local_4;
  int .local_5;
  .local_3 = 64;
  .local_4 = false;
  .local_5 = 3;
  if (((.local_3 * .local_3) < (9 - .param_2)))
  {
    .param_2 = (.local_3 + .local_3);
    .local_3 = .param_2;
  }
  else
  {
    .local_3 = ((- .param_2) * .param_2);
    if (((.local_3 + 8) >= .local_3))
    {
      for (.local_5 = 0 to 7)
      {
        .local_3 = bvand((.local_5 / .local_3), .local_5);
        .local_3 = bvor(5, .local_3);
      }
    }
    else
    {
      .local_3 = (- ((32 % .param_2) % bvand(.local_3, 7)));
    }
  }
  .ret_1 = .local_3;
}

procedure f1(int .param_7) returns (int .ret_6)
{
  int .local_8;
  bool .local_9;
  int .local_10;
  .local_8 = 64;
  .local_9 = false;
  .local_10 = 3;
  if (((.local_8 * .local_8) < (9 - .param_7)))
  {
    .param_7 = (.local_8 + .local_8);
    .local_8 = .param_7;
  }
  else
  {
    .local_8 = ((- .param_7) * .param_7);
    if (((.local_8 + 8) >= .local_8))
    {
      for (.local_10 = 0 to 7 step 2)
      {
        .local_8 = bvand((.local_10 / .local_8), .local_10);
        .local_8 = bvor(5, .local_8);
        if (((1 + .local_10) <= 6))
        {
          .local_8 = bvand(((1 + .local_10) / .local_8), (1 + .local_10));
          .local_8 = bvor(5, .local_8);
        }
      }
    }
    else
    {
      .local_8 = (- ((32 % .param_7) % bvand(.local_8, 7)));
    }
  }
  .ret_6 = .local_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_7);
ensures (.ret_1 == .ret_6);

