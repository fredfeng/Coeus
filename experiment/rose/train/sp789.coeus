declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, bool .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_6 = 5;
  .local_5 = false;
  for (.param_2 = 9 downto 4)
  {
    if (.local_5)
    {
      .param_4 = ((bvand(.param_2, .param_3) > 0) != false);
    }
    else
    {
      if ((.param_2 > bvxor(.local_6, .local_6)))
      {
        .param_4 = (! .param_4);
        .param_3 = 0;
      }
      else
      {
        .param_3 = ((- (.param_3 - 9)) + bvxor((.param_2 % .local_6),
         bvxor(.local_6, 6)));
      }
      .param_3 = ((.local_6 - 2) % (.param_3 + .local_6));
    }
  }
  while ((! .param_4))
  {
    for (.local_7 = 0 to 16)
    {
      
    }
  }
  .local_6 = .param_3;
  .ret_1 = .local_6;
}

procedure f1(int .param_9, int .param_10, bool .param_11) returns
 (int .ret_8)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_13 = 5;
  .local_12 = false;
  for (.param_9 = 9 downto 4)
  {
    if (.local_12)
    {
      .param_11 = ((bvand(.param_9, .param_10) > 0) != false);
    }
    else
    {
      if ((.param_9 > bvxor(.local_13, .local_13)))
      {
        .param_11 = (! .param_11);
        .param_10 = 0;
      }
      else
      {
        .param_10 = ((- (.param_10 - 9)) + bvxor((.param_9 % .local_13),
         bvxor(.local_13, 6)));
      }
      .param_10 = ((.local_13 - 2) % (.param_10 + .local_13));
    }
  }
  while ((! .param_11))
  {
    for (.local_14 = 0 to 16 step 2)
    {
      if (((1 + .local_14) <= 15))
      {
        
      }
    }
  }
  .local_13 = .param_10;
  .ret_8 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

