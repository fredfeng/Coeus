declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_4 = 4;
  .local_9 = -26;
  .local_5 = 7;
  .local_6 = (.local_4 + .local_4);
  for (.local_8 = 32 to 64)
  {
    .param_3 = ((.param_3 / .local_9) * .local_5);
    .local_7 = .local_5;
    for (.local_9 = 0 to -1)
    {
      .local_10 = bvand((.local_6 + .param_3), bvor(.local_6, .local_5));
      while (((.local_7 - .local_9) != (.local_9 % 64)))
      {
        .local_4 = ((- .local_10) / (- .local_6));
        .local_7 = (((.local_7 + 2) + ((.local_7 + 2) + ((.local_7 + 2) + ((.local_7 + 2) + ((.local_7 + 2) + (.local_7 + 2)))))) + (bvand(.local_4,
         6) / (16 + .local_9)));
      }
    }
  }
  .local_4 = 1;
  for (.local_7 = 0 to 4)
  {
    .local_6 = .param_3;
    .local_4 = .local_6;
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_12, int .param_13) returns (int .ret_11)
{
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  int .local_19;
  int .local_20;
  .local_14 = 4;
  .local_19 = -26;
  .local_15 = 7;
  .local_16 = (.local_14 + .local_14);
  for (.local_18 = 32 to 64)
  {
    .param_13 = ((.param_13 / .local_19) * .local_15);
    .local_17 = .local_15;
    for (.local_19 = 0 to -1)
    {
      .local_20 = bvand((.local_16 + .param_13), bvor(.local_16, .local_15));
      while (((.local_17 - .local_19) != (.local_19 % 64)))
      {
        .local_14 = ((- .local_20) / (- .local_16));
        .local_17 = (((.local_17 + 2) + ((.local_17 + 2) + ((.local_17 + 2) + ((.local_17 + 2) + ((.local_17 + 2) + (.local_17 + 2)))))) + (bvand(.local_14,
         6) / (16 + .local_19)));
      }
    }
  }
  .local_14 = 1;
  for (.local_17 = 0 to 4 step 2)
  {
    .local_16 = .param_13;
    .local_14 = .local_16;
    if (((1 + .local_17) <= 3))
    {
      .local_16 = .param_13;
      .local_14 = .local_16;
    }
  }
  .ret_11 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_12);
requires (.param_3 == .param_13);
ensures (.ret_1 == .ret_11);

