declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_6 = ((.param_2 + .param_2) * -16);
  .local_4 = 0;
  .local_5 = .param_3;
  for (.local_6 = 0 to 4)
  {
    if ((.param_3 || .local_5))
    {
      .local_7 = ((.local_4 + (.local_4 + .local_4)) * (- .local_4));
      .param_2 = .local_7;
    }
    else
    {
      .param_2 = (.param_2 * 32);
      .param_2 = bvor((.local_6 * .param_2), (.param_2 - .local_6));
    }
    .local_4 = (- .param_2);
  }
  .param_2 = (bvand(.local_4, 2) + 6);
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10) returns (int .ret_8)
{
  int .local_11;
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_13 = ((.param_9 + .param_9) * -16);
  .local_11 = 0;
  .local_12 = .param_10;
  for (.local_13 = 0 to 4 step 2)
  {
    if ((.param_10 || .local_12))
    {
      .local_14 = ((.local_11 + (.local_11 + .local_11)) * (- .local_11));
      .param_9 = .local_14;
    }
    else
    {
      .param_9 = (.param_9 * 32);
      .param_9 = bvor((.local_13 * .param_9), (.param_9 - .local_13));
    }
    .local_11 = (- .param_9);
    if (((1 + .local_13) <= 3))
    {
      if ((.param_10 || .local_12))
      {
        .local_14 = ((.local_11 + (.local_11 + .local_11)) * (- .local_11));
        .param_9 = .local_14;
      }
      else
      {
        .param_9 = (.param_9 * 32);
        .param_9 = bvor(((1 + .local_13) * .param_9),
         (.param_9 - (1 + .local_13)));
      }
      .local_11 = (- .param_9);
    }
  }
  .param_9 = (bvand(.local_11, 2) + 6);
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

