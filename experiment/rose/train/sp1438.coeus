declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = false;
  if ((4 <= .param_2))
  {
    .local_5 = .param_2;
    .local_5 = .local_5;
    for (.param_3 = 0 to 32)
    {
      .local_7 = (bvor(bvor(.param_2, .param_3), .param_3) / 7);
      .local_6 = 5;
      if ((.local_4 != true))
      {
        .param_2 = (.param_3 * (.local_6 / 10));
      }
      else
      {
        .param_2 = ((- .local_5) % (16 - .local_7));
      }
    }
  }
  else
  {
    .local_5 = .param_2;
    while (.local_4)
    {
      if (.local_4)
      {
        .local_5 = (- bvor(bvxor(6, .param_2), bvxor(32, .local_5)));
        .param_2 = .local_5;
      }
      else
      {
        .param_2 = .local_5;
        .param_2 = .param_2;
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = false;
  if ((4 <= .param_9))
  {
    .local_12 = .param_9;
    .local_12 = .local_12;
    for (.param_10 = 0 to 32 step 2)
    {
      .local_14 = (bvor(bvor(.param_9, .param_10), .param_10) / 7);
      .local_13 = 5;
      if ((.local_11 != true))
      {
        .param_9 = (.param_10 * (.local_13 / 10));
      }
      else
      {
        .param_9 = ((- .local_12) % (16 - .local_14));
      }
      if (((1 + .param_10) <= 31))
      {
        .local_14 = (bvor(bvor(.param_9, (1 + .param_10)),
         (1 + .param_10)) / 7);
        .local_13 = 5;
        if ((.local_11 != true))
        {
          .param_9 = ((1 + .param_10) * (.local_13 / 10));
        }
        else
        {
          .param_9 = ((- .local_12) % (16 - .local_14));
        }
      }
    }
  }
  else
  {
    .local_12 = .param_9;
    while (.local_11)
    {
      if (.local_11)
      {
        .local_12 = (- bvor(bvxor(6, .param_9), bvxor(32, .local_12)));
        .param_9 = .local_12;
      }
      else
      {
        .param_9 = .local_12;
        .param_9 = .param_9;
      }
    }
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

