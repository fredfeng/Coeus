declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, bool .param_5)
 returns (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  if ((.param_4 >= .param_4))
  {
    .local_7 = (- ((- .param_4) / (.param_4 + .param_2)));
    .local_6 = 16;
    if (.param_5)
    {
      .local_6 = .local_7;
    }
    else
    {
      for (.local_8 = 0 to 96)
      {
        .local_6 = (64 * bvand(.local_7, 0));
      }
    }
  }
  else
  {
    .local_6 = bvor(-5, (7 + (.param_2 % 1)));
    .local_6 = 0;
  }
  .param_2 = 64;
  .param_2 = (- bvxor(.local_6, .param_2));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, bool .param_13)
 returns (int .ret_9)
{
  int .local_14;
  int .local_15;
  int .local_16;
  if ((.param_12 >= .param_12))
  {
    .local_15 = (- ((- .param_12) / (.param_12 + .param_10)));
    .local_14 = 16;
    if (.param_13)
    {
      .local_14 = .local_15;
    }
    else
    {
      for (.local_16 = 0 to 96 step 2)
      {
        .local_14 = (64 * bvand(.local_15, 0));
        if (((1 + .local_16) <= 95))
        {
          .local_14 = (64 * bvand(.local_15, 0));
        }
      }
    }
  }
  else
  {
    .local_14 = bvor(-5, (7 + (.param_10 % 1)));
    .local_14 = 0;
  }
  .param_10 = 64;
  .param_10 = (- bvxor(.local_14, .param_10));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

