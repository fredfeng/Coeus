declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  .local_4 = false;
  .local_5 = (- .param_2);
  for (.local_5 = 0 to (.param_3 % .param_2))
  {
    .local_6 = 16;
    while (.local_4)
    {
      if (.local_4)
      {
        .param_2 = ((.local_5 + .local_6) + .local_5);
        .local_4 = (.local_4 || .local_4);
      }
      .local_4 = ((.local_4 != .local_4) == .local_4);
    }
    .param_3 = 32;
    .local_4 = (! (.local_4 != .local_4));
    .param_3 = bvor((- .param_3),
     (.param_2 + (.param_2 + (.param_2 + .param_2))));
  }
  if (.local_4)
  {
    .param_3 = bvand((.param_2 + .param_2), 73);
  }
  else
  {
    .local_5 = (8 / (.param_2 - .param_3));
    for (.local_6 = 0 to 1)
    {
      .param_3 = (.local_5 + .param_2);
    }
  }
  .param_2 = .param_3;
  .ret_1 = .param_2;
}

procedure f1(int .param_8, int .param_9) returns (int .ret_7)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  .local_10 = false;
  .local_11 = (- .param_8);
  for (.local_11 = 0 to (.param_9 % .param_8))
  {
    .local_12 = 16;
    while (.local_10)
    {
      if (.local_10)
      {
        .param_8 = ((.local_11 + .local_12) + .local_11);
        .local_10 = (.local_10 || .local_10);
      }
      .local_10 = ((.local_10 != .local_10) == .local_10);
    }
    .param_9 = 32;
    .local_10 = (! (.local_10 != .local_10));
    .param_9 = bvor((- .param_9),
     (.param_8 + (.param_8 + (.param_8 + .param_8))));
  }
  if (.local_10)
  {
    .param_9 = bvand((.param_8 + .param_8), 73);
  }
  else
  {
    .local_11 = (8 / (.param_8 - .param_9));
    for (.local_12 = 0 to 1 step 2)
    {
      .param_9 = (.local_11 + .param_8);
      if (((1 + .local_12) <= 0))
      {
        .param_9 = (.local_11 + .param_8);
      }
    }
  }
  .param_8 = .param_9;
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

