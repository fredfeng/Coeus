declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  .param_2 = ((- .param_4) / (.param_4 - .param_2));
  for (.local_6 = 0 to (.param_5 - .param_4))
  {
    for (.local_7 = 0 to (.param_4 + (.param_4 + (.param_4 + (.param_4 + (.param_4 + (.param_4 + .param_4)))))))
    {
      .param_2 = 64;
      if (true)
      {
        .param_4 = bvand(4, .param_2);
      }
      else
      {
        .param_4 = bvxor(.param_5, 64);
      }
    }
    .param_2 = bvxor(.param_4, 0);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11, int .param_12)
 returns (int .ret_8)
{
  int .local_13;
  int .local_14;
  .param_9 = ((- .param_11) / (.param_11 - .param_9));
  for (.local_13 = 0 to (.param_12 - .param_11))
  {
    for (.local_14 = 0 to ((-1 + (.param_11 + (.param_11 + (.param_11 + (.param_11 + (.param_11 + (.param_11 + .param_11))))))) + 1))
    {
      .param_9 = 64;
    }
    for (.local_14 = 0 to ((-1 + (.param_11 + (.param_11 + (.param_11 + (.param_11 + (.param_11 + (.param_11 + .param_11))))))) + 1))
    {
      if (true)
      {
        .param_11 = bvand(4, .param_9);
      }
      else
      {
        .param_11 = bvxor(.param_12, 64);
      }
    }
    .param_9 = bvxor(.param_11, 0);
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
requires (.param_5 == .param_12);
ensures (.ret_1 == .ret_8);

