declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  .local_4 = true;
  for (.local_5 = 2 to .param_3)
  {
    .local_4 = ((.param_2 < .param_2) == (.local_4 || .local_4));
    .param_3 = bvxor(0, .param_3);
  }
  if (.local_4)
  {
    .local_5 = ((8 / .param_2) % .param_3);
    .param_3 = bvxor((- .param_3), .param_2);
    while ((.param_3 < .param_3))
    {
      .param_2 = .local_5;
      .param_3 = (- (.param_2 + (.param_2 + (.param_2 + (.param_2 + (.param_2 + (.param_2 + (.param_2 + .param_2))))))));
    }
  }
  else
  {
    .local_6 = (.param_3 % .param_2);
    .param_3 = bvor((.param_2 + bvand(.local_6, .param_2)), (- .param_2));
  }
  .param_3 = bvxor((- .param_3), 4);
  .param_2 = .param_3;
  .ret_1 = .param_2;
}

procedure f1(int .param_8, int .param_9) returns (int .ret_7)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  .local_10 = true;
  for (.local_11 = 2 to ((-1 + .param_9) + 1))
  {
    .local_10 = ((.param_8 < .param_8) == (.local_10 || .local_10));
  }
  for (.local_11 = 2 to ((-1 + .param_9) + 1))
  {
    .param_9 = bvxor(0, .param_9);
  }
  if (.local_10)
  {
    .local_11 = ((8 / .param_8) % .param_9);
    .param_9 = bvxor((- .param_9), .param_8);
    while ((.param_9 < .param_9))
    {
      .param_8 = .local_11;
      .param_9 = (- (.param_8 + (.param_8 + (.param_8 + (.param_8 + (.param_8 + (.param_8 + (.param_8 + .param_8))))))));
    }
  }
  else
  {
    .local_12 = (.param_9 % .param_8);
    .param_9 = bvor((.param_8 + bvand(.local_12, .param_8)), (- .param_8));
  }
  .param_9 = bvxor((- .param_9), 4);
  .param_8 = .param_9;
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

