declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_5 = 1;
  .local_4 = 2;
  if ((.local_4 <= .param_2))
  {
    .param_2 = (.local_4 + (1 % (8 + .local_5)));
    for (.local_5 = 0 to 96)
    {
      .local_6 = -10;
      .param_2 = .local_6;
      .param_2 = (.param_2 - bvand(.local_5, 6));
    }
  }
  else
  {
    .local_4 = (.param_2 % (5 / .local_4));
    .param_2 = ((.local_4 * .local_4) - .local_4);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_11 = 1;
  .local_10 = 2;
  if ((.local_10 <= .param_8))
  {
    .param_8 = (.local_10 + (1 % (8 + .local_11)));
    for (.local_11 = 0 to 96 step 2)
    {
      .local_12 = -10;
      .param_8 = .local_12;
      .param_8 = (.param_8 - bvand(.local_11, 6));
      if (((1 + .local_11) <= 95))
      {
        .local_12 = -10;
        .param_8 = .local_12;
        .param_8 = (.param_8 - bvand((1 + .local_11), 6));
      }
    }
  }
  else
  {
    .local_10 = (.param_8 % (5 / .local_10));
    .param_8 = ((.local_10 * .local_10) - .local_10);
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

