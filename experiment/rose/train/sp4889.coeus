declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  .local_6 = bvor(64, .param_2);
  if ((.param_3 || (.param_4 > .param_2)))
  {
    .local_6 = bvand(2, .local_6);
    for (.local_6 = 0 to 64)
    {
      .param_4 = bvor(.local_6, (.local_6 + .param_2));
      .param_2 = .param_4;
    }
  }
  else
  {
    .local_5 = .param_2;
    if ((7 == .param_4))
    {
      while (.param_3)
      {
        .param_2 = bvxor((- .local_5), .local_5);
      }
    }
    else
    {
      .local_5 = 0;
      .param_2 = (.param_4 - (4 + .local_5));
    }
  }
  .param_2 = (((.param_2 + .param_2) % .param_2) + (((.param_2 + .param_2) % .param_2) + (((.param_2 + .param_2) % .param_2) + (((.param_2 + .param_2) % .param_2) + (((.param_2 + .param_2) % .param_2) + (((.param_2 + .param_2) % .param_2) + (((.param_2 + .param_2) % .param_2) + (((.param_2 + .param_2) % .param_2) + ((.param_2 + .param_2) % .param_2)))))))));
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  .local_12 = bvor(64, .param_8);
  if ((.param_9 || (.param_10 > .param_8)))
  {
    .local_12 = bvand(2, .local_12);
    for (.local_12 = 0 to 64 step 2)
    {
      .param_10 = bvor(.local_12, (.local_12 + .param_8));
      .param_8 = .param_10;
      if (((1 + .local_12) <= 63))
      {
        .param_10 = bvor((1 + .local_12), ((1 + .local_12) + .param_8));
        .param_8 = .param_10;
      }
    }
  }
  else
  {
    .local_11 = .param_8;
    if ((7 == .param_10))
    {
      while (.param_9)
      {
        .param_8 = bvxor((- .local_11), .local_11);
      }
    }
    else
    {
      .local_11 = 0;
      .param_8 = (.param_10 - (4 + .local_11));
    }
  }
  .param_8 = (((.param_8 + .param_8) % .param_8) + (((.param_8 + .param_8) % .param_8) + (((.param_8 + .param_8) % .param_8) + (((.param_8 + .param_8) % .param_8) + (((.param_8 + .param_8) % .param_8) + (((.param_8 + .param_8) % .param_8) + (((.param_8 + .param_8) % .param_8) + (((.param_8 + .param_8) % .param_8) + ((.param_8 + .param_8) % .param_8)))))))));
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

