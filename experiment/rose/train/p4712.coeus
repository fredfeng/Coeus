declare int bvxor(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = 5;
  .local_5 = -9;
  for (.local_5 = 0 to 10)
  {
    .local_6 = (- .local_4);
    .local_4 = (- .local_5);
    if ((! .param_2))
    {
      .local_4 = ((.param_3 + .local_6) + bvxor(.local_4, .local_4));
    }
    else
    {
      .param_3 = bvxor(.param_3, 2);
      .local_4 = ((.param_3 + 20) / .local_6);
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_8, int .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = 5;
  .local_11 = -9;
  for (.local_11 = 0 to 10 step 2)
  {
    .local_12 = (- .local_10);
    .local_10 = (- .local_11);
    if ((! .param_8))
    {
      .local_10 = ((.param_9 + .local_12) + bvxor(.local_10, .local_10));
    }
    else
    {
      .param_9 = bvxor(.param_9, 2);
      .local_10 = ((.param_9 + 20) / .local_12);
    }
    if (((1 + .local_11) <= 9))
    {
      .local_12 = (- .local_10);
      .local_10 = (- (1 + .local_11));
      if ((! .param_8))
      {
        .local_10 = ((.param_9 + .local_12) + bvxor(.local_10, .local_10));
      }
      else
      {
        .param_9 = bvxor(.param_9, 2);
        .local_10 = ((.param_9 + 20) / .local_12);
      }
    }
  }
  .ret_7 = .local_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

