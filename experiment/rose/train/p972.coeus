declare int bvxor(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  .local_7 = .param_2;
  .local_6 = 0;
  .local_5 = bvxor(.local_7, .param_4);
  for (.local_7 = 0 to -5)
  {
    .local_6 = .local_5;
  }
  for (.param_4 = 0 to 64)
  {
    if ((.local_5 <= .local_6))
    {
      .local_5 = 16;
    }
    else
    {
      .local_5 = ((bvxor(.param_2, .param_2) + (bvxor(.param_2,
       .param_2) + (bvxor(.param_2, .param_2) + bvxor(.param_2,
       .param_2)))) + .local_6);
    }
    .param_2 = ((.local_6 / 16) + .local_5);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  int .local_13;
  int .local_14;
  .local_14 = .param_9;
  .local_13 = 0;
  .local_12 = bvxor(.local_14, .param_11);
  for (.local_14 = 0 to -5 step 2)
  {
    .local_13 = .local_12;
    if (((1 + .local_14) <= -6))
    {
      .local_13 = .local_12;
    }
  }
  for (.param_11 = 0 to 64 step 2)
  {
    if ((.local_12 <= .local_13))
    {
      .local_12 = 16;
    }
    else
    {
      .local_12 = ((bvxor(.param_9, .param_9) + (bvxor(.param_9,
       .param_9) + (bvxor(.param_9, .param_9) + bvxor(.param_9,
       .param_9)))) + .local_13);
    }
    .param_9 = ((.local_13 / 16) + .local_12);
    if (((1 + .param_11) <= 63))
    {
      if ((.local_12 <= .local_13))
      {
        .local_12 = 16;
      }
      else
      {
        .local_12 = ((bvxor(.param_9, .param_9) + (bvxor(.param_9,
         .param_9) + (bvxor(.param_9, .param_9) + bvxor(.param_9,
         .param_9)))) + .local_13);
      }
      .param_9 = ((.local_13 / 16) + .local_12);
    }
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

