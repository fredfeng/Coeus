declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  .local_5 = (- .param_2);
  .param_2 = (((.param_2 + .local_5) - .local_5) + .local_5);
  .param_4 = ((- .local_5) - .param_4);
  for (.param_4 = 0 to 16)
  {
    if (.param_3)
    {
      if ((bvxor(4, .param_2) >= 1))
      {
        .param_2 = bvor((- .local_5), 9);
      }
      else
      {
        .local_5 = 32;
        .param_2 = bvxor((16 * .local_5), bvand(2, .param_4));
      }
    }
    else
    {
      .local_6 = bvxor(.param_4, (.param_4 / .local_5));
      .param_2 = (.local_6 + 10);
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  .local_11 = (- .param_8);
  .param_8 = (((.param_8 + .local_11) - .local_11) + .local_11);
  .param_10 = ((- .local_11) - .param_10);
  for (.param_10 = 0 to 16 step 2)
  {
    if (.param_9)
    {
      if ((bvxor(4, .param_8) >= 1))
      {
        .param_8 = bvor((- .local_11), 9);
      }
      else
      {
        .local_11 = 32;
        .param_8 = bvxor((16 * .local_11), bvand(2, .param_10));
      }
    }
    else
    {
      .local_12 = bvxor(.param_10, (.param_10 / .local_11));
      .param_8 = (.local_12 + 10);
    }
    if (((1 + .param_10) <= 15))
    {
      if (.param_9)
      {
        if ((bvxor(4, .param_8) >= 1))
        {
          .param_8 = bvor((- .local_11), 9);
        }
        else
        {
          .local_11 = 32;
          .param_8 = bvxor((16 * .local_11), bvand(2, (1 + .param_10)));
        }
      }
      else
      {
        .local_12 = bvxor((1 + .param_10), ((1 + .param_10) / .local_11));
        .param_8 = (.local_12 + 10);
      }
    }
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

