declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  .local_6 = (- (32 - .param_2));
  for (.param_5 = 0 to 6)
  {
    .local_6 = bvor((- .param_4), (.param_4 * .param_5));
    .param_4 = 2;
  }
  .param_4 = 16;
  while ((.param_4 > .local_6))
  {
    while (.param_3)
    {
      .param_5 = ((- .param_4) / .param_2);
      if (((.param_3 || .param_3) || (.param_3 == .param_3)))
      {
        .param_4 = (-5 - .param_4);
      }
      else
      {
        .local_6 = (-9 - ((.param_4 - .param_5) - bvor(.param_5, .param_2)));
      }
      .param_2 = .param_4;
    }
    if (.param_3)
    {
      while ((16 < .local_6))
      {
        .param_2 = 3;
      }
      .param_2 = (.param_2 - .local_6);
    }
    else
    {
      .param_5 = -8;
      if ((.local_6 < .param_5))
      {
        .local_6 = 21;
        .local_6 = (1 / bvand(.local_6, .local_6));
      }
      else
      {
        .param_5 = .param_4;
      }
      .param_2 = (((5 + .param_2) - (.local_6 + 3)) - .param_5);
    }
    .param_4 = (.param_4 - 1);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9, int .param_10, int .param_11)
 returns (int .ret_7)
{
  int .local_12;
  .local_12 = (- (32 - .param_8));
  for (.param_11 = 0 to 6 step 2)
  {
    .local_12 = bvor((- .param_10), (.param_10 * .param_11));
    .param_10 = 2;
    if (((1 + .param_11) <= 5))
    {
      .local_12 = bvor((- .param_10), (.param_10 * (1 + .param_11)));
      .param_10 = 2;
    }
  }
  .param_10 = 16;
  while ((.param_10 >= (.local_12 + 1)))
  {
    while (.param_9)
    {
      .param_11 = ((- .param_10) / .param_8);
      if (((.param_9 || .param_9) || (.param_9 == .param_9)))
      {
        .param_10 = (-5 - .param_10);
      }
      else
      {
        .local_12 = (-9 - ((.param_10 - .param_11) - bvor(.param_11,
         .param_8)));
      }
      .param_8 = .param_10;
    }
    if (.param_9)
    {
      while ((16 < .local_12))
      {
        .param_8 = 3;
      }
      .param_8 = (.param_8 - .local_12);
    }
    else
    {
      .param_11 = -8;
      if ((.local_12 < .param_11))
      {
        .local_12 = 21;
        .local_12 = (1 / bvand(.local_12, .local_12));
      }
      else
      {
        .param_11 = .param_10;
      }
      .param_8 = (((5 + .param_8) - (.local_12 + 3)) - .param_11);
    }
    .param_10 = (.param_10 - 1);
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
requires (.param_5 == .param_11);
ensures (.ret_1 == .ret_7);

