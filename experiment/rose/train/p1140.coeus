declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2) returns (int .ret_1)
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_3 = 64;
  .local_4 = .local_3;
  .local_5 = .local_4;
  for (.local_5 = 0 to .local_4)
  {
    .local_6 = bvand(1, (- .local_4));
    for (.local_7 = 3 to 3)
    {
      .local_8 = 64;
      if ((.local_4 < .local_5))
      {
        .local_4 = ((.local_6 - .local_5) + bvxor(.local_5, .local_8));
      }
      else
      {
        .local_4 = (- .local_3);
      }
      .local_3 = 8;
    }
    .local_3 = bvand(bvand(-2, (.local_3 + 1)), .local_4);
  }
  .ret_1 = .local_3;
}

procedure f1(bool .param_10) returns (int .ret_9)
{
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_11 = 64;
  .local_12 = .local_11;
  .local_13 = .local_12;
  for (.local_13 = 0 to .local_12)
  {
    .local_14 = bvand(1, (- .local_12));
    for (.local_15 = 3 to 3 step 2)
    {
      .local_16 = 64;
      if ((.local_12 < .local_13))
      {
        .local_12 = ((.local_14 - .local_13) + bvxor(.local_13, .local_16));
      }
      else
      {
        .local_12 = (- .local_11);
      }
      .local_11 = 8;
      if (((1 + .local_15) <= 2))
      {
        .local_16 = 64;
        if ((.local_12 < .local_13))
        {
          .local_12 = ((.local_14 - .local_13) + bvxor(.local_13, .local_16));
        }
        else
        {
          .local_12 = (- .local_11);
        }
        .local_11 = 8;
      }
    }
    .local_11 = bvand(bvand(-2, (.local_11 + 1)), .local_12);
  }
  .ret_9 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
ensures (.ret_1 == .ret_9);

