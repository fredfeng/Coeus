declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  .local_5 = ((3 - .param_2) - (.param_2 - 10));
  for (.local_5 = 0 to .param_4)
  {
    for (.local_6 = 0 to -7)
    {
      .param_2 = 4;
    }
    .param_2 = (.local_5 + (.local_5 - .param_2));
  }
  .param_4 = bvor(4, (.param_2 + .param_4));
  .param_4 = 0;
  while ((.param_4 < .param_2))
  {
    while ((32 > .param_2))
    {
      .local_5 = 1;
      if (.param_3)
      {
        .param_2 = (bvor(.param_4, .param_4) + .local_5);
        .param_4 = 16;
      }
      else
      {
        .param_4 = bvxor((- .param_4), .param_2);
      }
    }
    .param_2 = bvxor(0, .param_4);
    .param_4 = (.param_4 + 1);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  .local_11 = ((3 - .param_8) - (.param_8 - 10));
  for (.local_11 = 0 to .param_10)
  {
    for (.local_12 = 0 to -7 step 2)
    {
      .param_8 = 4;
      if (((1 + .local_12) <= -8))
      {
        .param_8 = 4;
      }
    }
    .param_8 = (.local_11 + (.local_11 - .param_8));
  }
  .param_10 = bvor(4, (.param_8 + .param_10));
  .param_10 = 0;
  while ((.param_10 <= (.param_8 - 1)))
  {
    while ((32 > .param_8))
    {
      .local_11 = 1;
      if (.param_9)
      {
        .param_8 = (bvor(.param_10, .param_10) + .local_11);
        .param_10 = 16;
      }
      else
      {
        .param_10 = bvxor((- .param_10), .param_8);
      }
    }
    .param_8 = bvxor(0, .param_10);
    .param_10 = (.param_10 + 1);
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

