declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_6 = .param_2;
  .local_4 = (9 - .param_2);
  .local_5 = .local_6;
  for (.local_6 = 0 to .param_2)
  {
    .local_7 = (.local_6 - .local_4);
    for (.local_7 = 0 to 6)
    {
      .param_2 = (5 + bvor(bvand(.local_7, 1), .local_5));
      .local_4 = 19;
    }
  }
  .param_2 = (.local_4 - .param_2);
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10) returns (int .ret_8)
{
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_13 = .param_9;
  .local_11 = (9 - .param_9);
  .local_12 = .local_13;
  for (.local_13 = 0 to ((-1 + .param_9) + 1))
  {
    .local_14 = (.local_13 - .local_11);
    for (.local_14 = 0 to 6)
    {
      .local_11 = 19;
    }
  }
  for (.local_13 = 0 to ((-1 + .param_9) + 1))
  {
    for (.local_14 = 0 to 6)
    {
      .param_9 = (5 + bvor(bvand(.local_14, 1), .local_12));
    }
  }
  .param_9 = (.local_11 - .param_9);
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

