declare int bvxor(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = false;
  .local_7 = .param_2;
  .local_6 = bvxor(8, .param_2);
  .local_5 = .param_2;
  for (.local_6 = 0 to (.param_3 + .local_5))
  {
    .local_7 = .local_6;
    .local_5 = .param_3;
  }
  for (.local_5 = 0 to 0)
  {
    .local_4 = (.local_4 == .local_4);
    for (.local_7 = (- .local_5) to 9)
    {
      .param_2 = .local_7;
    }
    while ((! .local_4))
    {
      .local_4 = (! .local_4);
    }
  }
  .param_3 = (16 + bvxor(.param_2, (- .param_2)));
  .param_2 = (.param_3 + .param_3);
  for (.param_3 = 0 to .param_2)
  {
    .local_5 = 32;
    .param_2 = (-1 / (.local_5 + .param_2));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = false;
  .local_14 = .param_9;
  .local_13 = bvxor(8, .param_9);
  .local_12 = .param_9;
  for (.local_13 = 0 to (.param_10 + .local_12))
  {
    .local_14 = .local_13;
  }
  for (.local_13 = 0 to (.param_10 + .local_12))
  {
    .local_12 = .param_10;
  }
  for (.local_12 = 0 to 0)
  {
    .local_11 = (.local_11 == .local_11);
    for (.local_14 = (- .local_12) to 9)
    {
      .param_9 = .local_14;
    }
    while ((! .local_11))
    {
      .local_11 = (! .local_11);
    }
  }
  .param_10 = (16 + bvxor(.param_9, (- .param_9)));
  .param_9 = (.param_10 + .param_10);
  for (.param_10 = 0 to ((-1 + .param_9) + 1))
  {
    .local_12 = 32;
    .param_9 = (-1 / (.local_12 + .param_9));
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

