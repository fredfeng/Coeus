declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  bool .local_6;
  int .local_7;
  .local_7 = .param_2;
  .local_5 = (4 - .param_2);
  if (.param_3)
  {
    .local_6 = (.param_3 && (.param_2 == .param_2));
    .local_7 = ((.param_4 - .local_7) % .param_2);
    .param_2 = bvxor(.param_2, .local_7);
    for (.local_7 = 0 to (32 * .param_2))
    {
      .param_3 = .local_6;
      .local_5 = bvand(.local_5, (bvand(.param_2, .param_2) + bvand(.param_2,
       9)));
    }
    for (.param_4 = 0 to 32)
    {
      .local_7 = .param_4;
      .param_2 = ((.local_5 * .local_7) + bvand(.local_5, .local_7));
      if (.param_3)
      {
        .local_5 = ((.local_7 - .param_4) + (10 - .local_5));
      }
      else
      {
        .local_5 = (bvand(.param_2, .local_7) + (6 % .local_5));
      }
    }
  }
  else
  {
    .local_5 = bvand((- .local_5), bvxor(4, (.local_5 * 64)));
  }
  .param_2 = .local_5;
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  bool .local_13;
  int .local_14;
  .local_14 = .param_9;
  .local_12 = (4 - .param_9);
  if (.param_10)
  {
    .local_13 = (.param_10 && (.param_9 == .param_9));
    .local_14 = ((.param_11 - .local_14) % .param_9);
    .param_9 = bvxor(.param_9, .local_14);
    for (.local_14 = 0 to ((-1 + (32 * .param_9)) + 1))
    {
      .param_10 = .local_13;
    }
    for (.local_14 = 0 to ((-1 + (32 * .param_9)) + 1))
    {
      .local_12 = bvand(.local_12, (bvand(.param_9,
       .param_9) + bvand(.param_9, 9)));
    }
    for (.param_11 = 0 to 32)
    {
      .local_14 = .param_11;
      .param_9 = ((.local_12 * .local_14) + bvand(.local_12, .local_14));
      if (.param_10)
      {
        .local_12 = ((.local_14 - .param_11) + (10 - .local_12));
      }
      else
      {
        .local_12 = (bvand(.param_9, .local_14) + (6 % .local_12));
      }
    }
  }
  else
  {
    .local_12 = bvand((- .local_12), bvxor(4, (.local_12 * 64)));
  }
  .param_9 = .local_12;
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

