declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 3;
  .local_3 = true;
  for (.local_6 = 0 to 33)
  {
    .local_7 = .local_4;
    .local_5 = .local_3;
    .local_5 = ((.local_4 <= .local_4) == (! .local_5));
    .local_7 = (bvxor(.local_7, 2) - bvand(.local_4, .local_4));
    if (.local_3)
    {
      .local_4 = .local_7;
    }
    else
    {
      if (.local_5)
      {
        .local_4 = (- .local_4);
      }
      else
      {
        .local_7 = .param_2;
        .local_4 = (- (4 / .local_7));
      }
    }
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_9) returns (int .ret_8)
{
  bool .local_10;
  int .local_11;
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 3;
  .local_10 = true;
  for (.local_13 = 0 to 33 step 2)
  {
    .local_14 = .local_11;
    .local_12 = .local_10;
    .local_12 = ((.local_11 <= .local_11) == (! .local_12));
    .local_14 = (bvxor(.local_14, 2) - bvand(.local_11, .local_11));
    if (.local_10)
    {
      .local_11 = .local_14;
    }
    else
    {
      if (.local_12)
      {
        .local_11 = (- .local_11);
      }
      else
      {
        .local_14 = .param_9;
        .local_11 = (- (4 / .local_14));
      }
    }
    if (((1 + .local_13) <= 32))
    {
      .local_14 = .local_11;
      .local_12 = .local_10;
      .local_12 = ((.local_11 <= .local_11) == (! .local_12));
      .local_14 = (bvxor(.local_14, 2) - bvand(.local_11, .local_11));
      if (.local_10)
      {
        .local_11 = .local_14;
      }
      else
      {
        if (.local_12)
        {
          .local_11 = (- .local_11);
        }
        else
        {
          .local_14 = .param_9;
          .local_11 = (- (4 / .local_14));
        }
      }
    }
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

