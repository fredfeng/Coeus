declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  .local_4 = false;
  .local_7 = bvand(.param_2, 1);
  .local_11 = (- (.param_2 * .param_2));
  .local_5 = 0;
  .local_6 = (bvand((.param_2 + .param_2),
   (.param_2 + (.param_2 + (.param_2 + .param_2)))) * ((.param_2 * .param_2) - (.param_2 % .param_2)));
  for (.local_8 = 0 to 64)
  {
    .local_9 = (- (3 - .local_7));
    for (.local_10 = 0 to (9 % .local_9))
    {
      for (.local_11 = 0 to 3)
      {
        .param_2 = bvand((4 + .local_11),
         (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5))))))));
      }
      .local_7 = .local_9;
    }
    .param_3 = 1;
  }
  .local_5 = (bvxor(2, .param_3) + (.param_2 + .local_6));
  for (.local_7 = 10 to -3)
  {
    .local_9 = .local_7;
    .param_2 = (bvor(.param_2, .local_9) - (.local_5 + .param_2));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_13, int .param_14) returns (int .ret_12)
{
  bool .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  int .local_19;
  int .local_20;
  int .local_21;
  int .local_22;
  .local_15 = false;
  .local_18 = bvand(.param_13, 1);
  .local_22 = (- (.param_13 * .param_13));
  .local_16 = 0;
  .local_17 = (bvand((.param_13 + .param_13),
   (.param_13 + (.param_13 + (.param_13 + .param_13)))) * ((.param_13 * .param_13) - (.param_13 % .param_13)));
  for (.local_19 = 0 to 64)
  {
    .local_20 = (- (3 - .local_18));
    for (.local_21 = 0 to (9 % .local_20))
    {
      for (.local_22 = 0 to 3 step 2)
      {
        .param_13 = bvand((4 + .local_22),
         (.local_16 + (.local_16 + (.local_16 + (.local_16 + (.local_16 + (.local_16 + (.local_16 + .local_16))))))));
        if (((1 + .local_22) <= 2))
        {
          .param_13 = bvand((4 + (1 + .local_22)),
           (.local_16 + (.local_16 + (.local_16 + (.local_16 + (.local_16 + (.local_16 + (.local_16 + .local_16))))))));
        }
      }
      .local_18 = .local_20;
    }
    .param_14 = 1;
  }
  .local_16 = (bvxor(2, .param_14) + (.param_13 + .local_17));
  for (.local_18 = 10 to -3 step 2)
  {
    .local_20 = .local_18;
    .param_13 = (bvor(.param_13, .local_20) - (.local_16 + .param_13));
    if (((1 + .local_18) <= -4))
    {
      .local_20 = (1 + .local_18);
      .param_13 = (bvor(.param_13, .local_20) - (.local_16 + .param_13));
    }
  }
  .ret_12 = .param_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_13);
requires (.param_3 == .param_14);
ensures (.ret_1 == .ret_12);

