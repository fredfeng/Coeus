declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 5;
  .local_5 = .local_4;
  for (.local_5 = 0 to .local_4)
  {
    .local_6 = bvxor(bvor(.local_4, (.local_5 + .local_5)), .local_4);
    while (.param_2)
    {
      
    }
    while (.param_3)
    {
      .local_8 = bvor((.local_5 % 1), -9);
      .param_2 = (bvor(16, .local_6) >= .local_8);
    }
    for (.local_7 = 0 to 7)
    {
      .local_4 = ((6 - bvand(.local_4, .local_4)) + (6 - bvand(.local_4,
       .local_4)));
    }
  }
  .param_3 = ((.local_4 != .local_4) == (.local_4 > 64));
  while (.param_2)
  {
    .param_2 = .param_3;
    .local_6 = 0;
    while ((.local_6 < 2))
    {
      .param_2 = .param_2;
      .local_6 = (.local_6 + 1);
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, bool .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 5;
  .local_13 = .local_12;
  for (.local_13 = 0 to .local_12)
  {
    .local_14 = bvxor(bvor(.local_12, (.local_13 + .local_13)), .local_12);
    while (.param_10)
    {
      
    }
    while (.param_11)
    {
      .local_16 = bvor((.local_13 % 1), -9);
      .param_10 = (bvor(16, .local_14) >= .local_16);
    }
    for (.local_15 = 0 to 7 step 2)
    {
      .local_12 = ((6 - bvand(.local_12, .local_12)) + (6 - bvand(.local_12,
       .local_12)));
      if (((1 + .local_15) <= 6))
      {
        .local_12 = ((6 - bvand(.local_12,
         .local_12)) + (6 - bvand(.local_12, .local_12)));
      }
    }
  }
  .param_11 = ((.local_12 != .local_12) == (.local_12 > 64));
  while (.param_10)
  {
    .param_10 = .param_11;
    .local_14 = 0;
    while ((.local_14 <= 1))
    {
      .param_10 = .param_10;
      if (((1 + .local_14) <= 1))
      {
        .param_10 = .param_10;
      }
      .local_14 = (.local_14 + 2);
    }
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

