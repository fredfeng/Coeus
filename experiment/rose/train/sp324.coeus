declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_7 = .param_2;
  .local_5 = 0;
  .local_4 = .param_2;
  while (.param_3)
  {
    .local_6 = .local_4;
    .local_5 = -8;
    if (.param_3)
    {
      .local_7 = bvor(.local_4, (64 + (.local_5 + .local_6)));
      .local_5 = (- (4 + .local_5));
      .param_2 = (- bvxor(.local_5, 2));
    }
    else
    {
      .local_5 = bvand(((.local_4 * .local_6) + (.local_5 - 8)),
       (-4 * .param_2));
      if (((.param_3 && .param_3) || .param_3))
      {
        .local_7 = bvor((1 + .local_6), bvor(3, .local_5));
        .local_5 = 1;
      }
      else
      {
        .local_7 = 2;
      }
    }
  }
  for (.local_5 = 0 to .param_2)
  {
    .local_6 = (- (.local_5 * .local_5));
    for (.local_7 = 0 to bvor(.local_4, 6))
    {
      for (.local_8 = 0 to -5)
      {
        .local_6 = (- (4 / .param_2));
      }
      if (.param_3)
      {
        .param_2 = (.local_7 / (.local_7 * (.local_6 * .param_2)));
      }
      else
      {
        .local_4 = bvand(.local_6, .local_6);
        .param_2 = .local_4;
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_15 = .param_10;
  .local_13 = 0;
  .local_12 = .param_10;
  while (.param_11)
  {
    .local_14 = .local_12;
    .local_13 = -8;
    if (.param_11)
    {
      .local_15 = bvor(.local_12, (64 + (.local_13 + .local_14)));
      .local_13 = (- (4 + .local_13));
      .param_10 = (- bvxor(.local_13, 2));
    }
    else
    {
      .local_13 = bvand(((.local_12 * .local_14) + (.local_13 - 8)),
       (-4 * .param_10));
      if (((.param_11 && .param_11) || .param_11))
      {
        .local_15 = bvor((1 + .local_14), bvor(3, .local_13));
        .local_13 = 1;
      }
      else
      {
        .local_15 = 2;
      }
    }
  }
  for (.local_13 = 0 to .param_10)
  {
    .local_14 = (- (.local_13 * .local_13));
    for (.local_15 = 0 to bvor(.local_12, 6))
    {
      for (.local_16 = 0 to -5 step 2)
      {
        .local_14 = (- (4 / .param_10));
        if (((1 + .local_16) <= -6))
        {
          .local_14 = (- (4 / .param_10));
        }
      }
      if (.param_11)
      {
        .param_10 = (.local_15 / (.local_15 * (.local_14 * .param_10)));
      }
      else
      {
        .local_12 = bvand(.local_14, .local_14);
        .param_10 = .local_12;
      }
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

