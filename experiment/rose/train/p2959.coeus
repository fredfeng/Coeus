declare int bvor(int, int);

procedure f0(bool .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 64;
  .local_7 = .local_4;
  .local_5 = ((- .local_4) - .local_4);
  for (.local_8 = 0 to 32)
  {
    
  }
  for (.local_7 = 0 to 9)
  {
    .local_8 = .local_7;
    .local_6 = (.local_7 % .local_4);
    .local_4 = (.local_5 - ((32 - .local_6) * (- .local_5)));
    while (.param_3)
    {
      .local_4 = (.local_4 - 6);
      while ((! .param_2))
      {
        .param_2 = .param_3;
        .local_4 = (.local_8 / bvor(.local_4, .local_8));
      }
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, bool .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 64;
  .local_15 = .local_12;
  .local_13 = ((- .local_12) - .local_12);
  for (.local_16 = 0 to 32 step 2)
  {
    if (((1 + .local_16) <= 31))
    {
      
    }
  }
  for (.local_15 = 0 to 9)
  {
    .local_16 = .local_15;
    .local_14 = (.local_15 % .local_12);
    .local_12 = (.local_13 - ((32 - .local_14) * (- .local_13)));
    while (.param_11)
    {
      .local_12 = (.local_12 - 6);
      while ((! .param_10))
      {
        .param_10 = .param_11;
        .local_12 = (.local_16 / bvor(.local_12, .local_16));
      }
    }
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

