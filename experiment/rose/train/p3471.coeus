declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, int .param_5,
             bool .param_6)
 returns (int .ret_1)
{
  bool .local_7;
  int .local_8;
  .local_7 = true;
  if (((7 - .param_5) == 64))
  {
    for (.param_3 = 32 downto 1)
    {
      if (((.local_7 != .local_7) != (.param_6 || .param_6)))
      {
        .param_5 = .param_3;
      }
      else
      {
        .param_4 = (- .param_3);
      }
    }
  }
  else
  {
    .param_3 = ((.param_4 / 16) + .param_4);
    .param_5 = (bvand(.param_5, .param_2) - (.param_3 + 10));
    for (.param_3 = 0 to 16)
    {
      .local_8 = 0;
      if (((.param_5 >= .param_4) && .local_7))
      {
        .param_4 = .local_8;
      }
      else
      {
        .param_4 = (64 % .param_5);
        .param_2 = 8;
      }
    }
  }
  .param_2 = (.param_2 % bvor(.param_4, .param_5));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11, int .param_12, int .param_13,
             bool .param_14)
 returns (int .ret_9)
{
  bool .local_15;
  int .local_16;
  .local_15 = true;
  if (((7 - .param_13) == 64))
  {
    for (.param_11 = 32 downto 1)
    {
      if (((.local_15 != .local_15) != (.param_14 || .param_14)))
      {
        .param_13 = .param_11;
      }
      else
      {
        .param_12 = (- .param_11);
      }
    }
  }
  else
  {
    .param_11 = ((.param_12 / 16) + .param_12);
    .param_13 = (bvand(.param_13, .param_10) - (.param_11 + 10));
    for (.param_11 = 0 to 16 step 2)
    {
      .local_16 = 0;
      if (((.param_13 >= .param_12) && .local_15))
      {
        .param_12 = .local_16;
      }
      else
      {
        .param_12 = (64 % .param_13);
        .param_10 = 8;
      }
      if (((1 + .param_11) <= 15))
      {
        .local_16 = 0;
        if (((.param_13 >= .param_12) && .local_15))
        {
          .param_12 = .local_16;
        }
        else
        {
          .param_12 = (64 % .param_13);
          .param_10 = 8;
        }
      }
    }
  }
  .param_10 = (.param_10 % bvor(.param_12, .param_13));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
requires (.param_6 == .param_14);
ensures (.ret_1 == .ret_9);

