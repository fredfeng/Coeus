declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_7 = .param_2;
  .local_6 = bvand((- .param_2), -3);
  .local_4 = (- bvand(.param_2, .param_2));
  .local_5 = .param_2;
  .param_2 = 0;
  for (.local_7 = 0 to -2)
  {
    .local_8 = ((.local_5 % .local_5) + 64);
    if (.param_3)
    {
      while ((.param_3 || .param_3))
      {
        .local_4 = (.local_6 + 7);
        .local_6 = 0;
      }
    }
    else
    {
      while (.param_3)
      {
        
      }
      .local_6 = 5;
      .local_4 = (64 % (bvor(5, .local_8) * .local_5));
    }
  }
  for (.local_6 = 0 to 8)
  {
    .local_7 = (-64 + bvor(.local_6, .param_2));
    .local_4 = -2;
    .local_5 = bvand(bvand(.param_2, (1 - .param_2)),
     bvor((.local_7 % .local_7), .local_4));
  }
  .param_2 = (.local_5 / bvor(.local_4, 0));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_15 = .param_10;
  .local_14 = bvand((- .param_10), -3);
  .local_12 = (- bvand(.param_10, .param_10));
  .local_13 = .param_10;
  .param_10 = 0;
  for (.local_15 = 0 to -2)
  {
    .local_16 = ((.local_13 % .local_13) + 64);
    if (.param_11)
    {
      while ((.param_11 || .param_11))
      {
        .local_12 = (.local_14 + 7);
        .local_14 = 0;
      }
    }
    else
    {
      while (.param_11)
      {
        
      }
      .local_14 = 5;
      .local_12 = (64 % (bvor(5, .local_16) * .local_13));
    }
  }
  for (.local_14 = 0 to 8 step 2)
  {
    .local_15 = (-64 + bvor(.local_14, .param_10));
    .local_12 = -2;
    .local_13 = bvand(bvand(.param_10, (1 - .param_10)),
     bvor((.local_15 % .local_15), .local_12));
    if (((1 + .local_14) <= 7))
    {
      .local_15 = (-64 + bvor((1 + .local_14), .param_10));
      .local_12 = -2;
      .local_13 = bvand(bvand(.param_10, (1 - .param_10)),
       bvor((.local_15 % .local_15), .local_12));
    }
  }
  .param_10 = (.local_13 / bvor(.local_12, 0));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

