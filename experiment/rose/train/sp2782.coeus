declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 0;
  .local_3 = false;
  .local_7 = bvor((- .local_4), bvand(.local_4, .local_4));
  .local_6 = -1;
  .local_5 = (8 % (bvand(.param_2, 10) / bvor(.local_4, .local_6)));
  for (.local_7 = 64 downto 7)
  {
    while (.local_3)
    {
      for (.local_8 = 32 to 8)
      {
        .local_4 = (bvor(0,
         (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5))))))) - .local_7);
      }
    }
  }
  .local_4 = ((- .local_5) - .local_4);
  .ret_1 = .local_4;
}

procedure f1(int .param_10) returns (int .ret_9)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 0;
  .local_11 = false;
  .local_15 = bvor((- .local_12), bvand(.local_12, .local_12));
  .local_14 = -1;
  .local_13 = (8 % (bvand(.param_10, 10) / bvor(.local_12, .local_14)));
  for (.local_15 = 64 downto 7)
  {
    while (.local_11)
    {
      for (.local_16 = 32 to 8 step 2)
      {
        .local_12 = (bvor(0,
         (.local_13 + (.local_13 + (.local_13 + (.local_13 + (.local_13 + (.local_13 + .local_13))))))) - .local_15);
        if (((1 + .local_16) <= 7))
        {
          .local_12 = (bvor(0,
           (.local_13 + (.local_13 + (.local_13 + (.local_13 + (.local_13 + (.local_13 + .local_13))))))) - .local_15);
        }
      }
    }
  }
  .local_12 = ((- .local_13) - .local_12);
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
ensures (.ret_1 == .ret_9);

