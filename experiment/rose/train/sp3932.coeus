declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = 2;
  .local_6 = ((.param_3 - .param_4) % 8);
  for (.local_7 = 0 to .param_3)
  {
    for (.local_9 = 8 downto 64)
    {
      .local_5 = (- .param_3);
    }
  }
  .param_3 = -32;
  for (.param_3 = 0 to 1)
  {
    .local_7 = .local_6;
    .local_8 = (.param_3 + (.local_6 + 6));
    .param_4 = bvxor(.param_4, (.local_8 - 1));
    .local_5 = (3 % bvxor((.local_7 + .param_4), bvor(.local_5, .local_7)));
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_11, int .param_12, int .param_13) returns
 (int .ret_10)
{
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_14 = 2;
  .local_15 = ((.param_12 - .param_13) % 8);
  for (.local_16 = 0 to .param_12)
  {
    for (.local_18 = 8 downto 64)
    {
      .local_14 = (- .param_12);
    }
  }
  .param_12 = -32;
  for (.param_12 = 0 to 1 step 2)
  {
    .local_16 = .local_15;
    .local_17 = (.param_12 + (.local_15 + 6));
    .param_13 = bvxor(.param_13, (.local_17 - 1));
    .local_14 = (3 % bvxor((.local_16 + .param_13), bvor(.local_14,
     .local_16)));
    if (((1 + .param_12) <= 0))
    {
      .local_16 = .local_15;
      .local_17 = ((1 + .param_12) + (.local_15 + 6));
      .param_13 = bvxor(.param_13, (.local_17 - 1));
      .local_14 = (3 % bvxor((.local_16 + .param_13), bvor(.local_14,
       .local_16)));
    }
  }
  .ret_10 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
ensures (.ret_1 == .ret_10);

