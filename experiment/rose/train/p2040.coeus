declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2) returns (int .ret_1)
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_3 = 2;
  .local_5 = bvor(9, .local_3);
  .local_4 = bvxor(.local_5, 1);
  for (.local_5 = 0 to (.local_3 * 16))
  {
    .local_6 = .local_4;
    if ((1 <= .local_5))
    {
      for (.local_7 = 0 to 3)
      {
        .local_6 = (- (.local_3 + .local_4));
      }
      .local_3 = (bvxor(.local_6, .local_4) + 2);
    }
    else
    {
      .local_3 = bvor(bvand(bvand(.local_3, 8), .local_6), 1);
    }
  }
  .ret_1 = .local_3;
}

procedure f1(bool .param_9) returns (int .ret_8)
{
  int .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_10 = 2;
  .local_12 = bvor(9, .local_10);
  .local_11 = bvxor(.local_12, 1);
  for (.local_12 = 0 to (.local_10 * 16))
  {
    .local_13 = .local_11;
    if ((1 <= .local_12))
    {
      for (.local_14 = 0 to 3 step 2)
      {
        .local_13 = (- (.local_10 + .local_11));
        if (((1 + .local_14) <= 2))
        {
          .local_13 = (- (.local_10 + .local_11));
        }
      }
      .local_10 = (bvxor(.local_13, .local_11) + 2);
    }
    else
    {
      .local_10 = bvor(bvand(bvand(.local_10, 8), .local_13), 1);
    }
  }
  .ret_8 = .local_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

