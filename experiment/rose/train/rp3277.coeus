declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0() returns (int .ret_1)
{
  bool .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_3 = 0;
  .local_2 = true;
  .local_6 = bvxor(.local_3, .local_3);
  .local_5 = bvor(bvor(.local_3, .local_3), .local_3);
  .local_4 = .local_3;
  for (.local_6 = 0 to .local_3)
  {
    .local_7 = (.local_3 * -2);
    for (.local_8 = 0 to (64 * .local_6))
    {
      .local_5 = .local_7;
    }
    .local_4 = 5;
  }
  .local_3 = 4;
  .local_4 = (bvor(0, .local_4) - (.local_3 + .local_5));
  .local_5 = 64;
  while ((.local_5 > 1))
  {
    .local_5 = bvand((.local_3 + .local_5), bvor(32, .local_4));
    .local_3 = .local_5;
    .local_5 = (.local_5 - 1);
  }
  .ret_1 = .local_3;
}

procedure f1() returns (int .ret_9)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_11 = 0;
  .local_10 = true;
  .local_14 = bvxor(.local_11, .local_11);
  .local_13 = bvor(bvor(.local_11, .local_11), .local_11);
  .local_12 = .local_11;
  for (.local_14 = 0 to ((-1 + .local_11) + 1))
  {
    .local_15 = (.local_11 * -2);
    for (.local_16 = 0 to ((-1 + (64 * .local_14)) + 1))
    {
      .local_13 = .local_15;
    }
  }
  for (.local_14 = 0 to ((-1 + .local_11) + 1))
  {
    .local_12 = 5;
  }
  .local_11 = 4;
  .local_12 = (bvor(0, .local_12) - (.local_11 + .local_13));
  .local_13 = 64;
  while ((.local_13 >= 2))
  {
    .local_13 = bvand((.local_11 + .local_13), bvor(32, .local_12));
    .local_11 = .local_13;
    .local_13 = (.local_13 - 1);
  }
  .ret_9 = .local_11;
}

$lentry f0;
$rentry f1;

ensures (.ret_1 == .ret_9);

