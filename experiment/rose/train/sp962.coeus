declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_6 = 64;
  .local_7 = .param_4;
  for (.param_3 = 0 to bvor(.param_5, 16))
  {
    .local_7 = ((bvor(.param_4, .param_5) - .param_3) - 3);
    while (.param_2)
    {
      .local_7 = bvor(.param_5, 0);
    }
    if (((64 <= .param_5) && (.param_3 == 0)))
    {
      .local_9 = (.local_6 * .param_5);
      if ((.param_2 == (6 < .param_3)))
      {
        .local_7 = bvxor(bvand(.local_9, .param_4), bvand(64, .local_6));
      }
      else
      {
        .local_6 = (- .param_3);
      }
    }
    else
    {
      .local_6 = .local_7;
    }
  }
  .param_5 = .param_4;
  for (.param_4 = 0 to (5 / .param_5))
  {
    .param_3 = .param_5;
    for (.local_7 = 0 to -62)
    {
      .local_8 = .param_4;
      .local_9 = ((.local_6 - .param_3) - .param_3);
      if ((.local_8 >= .local_9))
      {
        .param_5 = bvand((.local_8 - 3), (.param_3 % .param_4));
      }
      else
      {
        .local_6 = (1 - (.local_9 / .local_7));
      }
    }
    while (.param_2)
    {
      .local_6 = .param_5;
    }
  }
  .ret_1 = .local_6;
}

procedure f1(bool .param_11, int .param_12, int .param_13, int .param_14)
 returns (int .ret_10)
{
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_15 = 64;
  .local_16 = .param_13;
  for (.param_12 = 0 to bvor(.param_14, 16))
  {
    .local_16 = ((bvor(.param_13, .param_14) - .param_12) - 3);
    while (.param_11)
    {
      .local_16 = bvor(.param_14, 0);
    }
    if (((64 <= .param_14) && (.param_12 == 0)))
    {
      .local_18 = (.local_15 * .param_14);
      if ((.param_11 == (6 < .param_12)))
      {
        .local_16 = bvxor(bvand(.local_18, .param_13), bvand(64, .local_15));
      }
      else
      {
        .local_15 = (- .param_12);
      }
    }
    else
    {
      .local_15 = .local_16;
    }
  }
  .param_14 = .param_13;
  for (.param_13 = 0 to (5 / .param_14))
  {
    .param_12 = .param_14;
    for (.local_16 = 0 to -62 step 2)
    {
      .local_17 = .param_13;
      .local_18 = ((.local_15 - .param_12) - .param_12);
      if ((.local_17 >= .local_18))
      {
        .param_14 = bvand((.local_17 - 3), (.param_12 % .param_13));
      }
      else
      {
        .local_15 = (1 - (.local_18 / .local_16));
      }
      if (((1 + .local_16) <= -63))
      {
        .local_17 = .param_13;
        .local_18 = ((.local_15 - .param_12) - .param_12);
        if ((.local_17 >= .local_18))
        {
          .param_14 = bvand((.local_17 - 3), (.param_12 % .param_13));
        }
        else
        {
          .local_15 = (1 - (.local_18 / (1 + .local_16)));
        }
      }
    }
    while (.param_11)
    {
      .local_15 = .param_14;
    }
  }
  .ret_10 = .local_15;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
ensures (.ret_1 == .ret_10);

