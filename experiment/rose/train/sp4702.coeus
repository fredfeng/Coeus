declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_4 = 8;
  .local_3 = true;
  .local_7 = ((.local_4 * .local_4) - (.local_4 % 7));
  .local_5 = bvxor((.local_4 + (.local_4 + (.local_4 + (.local_4 + (.local_4 + (.local_4 + .local_4)))))),
   64);
  .local_6 = (.local_7 + bvor((.local_4 + 3), .local_4));
  for (.local_7 = 0 to (.local_4 % .local_6))
  {
    .local_8 = (- .local_4);
    .local_9 = .local_4;
    for (.param_2 = 32 to 5)
    {
      if (((- .local_8) >= (- .param_2)))
      {
        .local_8 = bvor(.local_6, .local_9);
      }
      else
      {
        .local_8 = ((.local_8 - .local_5) - 2);
      }
    }
    .local_4 = (.local_8 * 64);
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_11) returns (int .ret_10)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_13 = 8;
  .local_12 = true;
  .local_16 = ((.local_13 * .local_13) - (.local_13 % 7));
  .local_14 = bvxor((.local_13 + (.local_13 + (.local_13 + (.local_13 + (.local_13 + (.local_13 + .local_13)))))),
   64);
  .local_15 = (.local_16 + bvor((.local_13 + 3), .local_13));
  for (.local_16 = 0 to (.local_13 % .local_15))
  {
    .local_17 = (- .local_13);
    .local_18 = .local_13;
    for (.param_11 = 32 to 5 step 2)
    {
      if (((- .local_17) >= (- .param_11)))
      {
        .local_17 = bvor(.local_15, .local_18);
      }
      else
      {
        .local_17 = ((.local_17 - .local_14) - 2);
      }
      if (((1 + .param_11) <= 4))
      {
        if (((- .local_17) >= (- (1 + .param_11))))
        {
          .local_17 = bvor(.local_15, .local_18);
        }
        else
        {
          .local_17 = ((.local_17 - .local_14) - 2);
        }
      }
    }
    .local_13 = (.local_17 * 64);
  }
  .ret_10 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
ensures (.ret_1 == .ret_10);

