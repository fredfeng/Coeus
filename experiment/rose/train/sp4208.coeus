declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_5 = 32;
  .local_4 = true;
  .local_6 = (32 + (32 + .local_5));
  for (.local_7 = 0 to 4)
  {
    .local_5 = ((.local_6 / .param_3) - 10);
    .local_5 = ((.local_5 / .param_2) + (2 / .local_5));
    .local_6 = bvand(1, .local_5);
    .param_2 = .local_6;
  }
  .param_3 = .param_2;
  .local_5 = .param_3;
  .ret_1 = .local_5;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_12 = 32;
  .local_11 = true;
  .local_13 = (32 + (32 + .local_12));
  for (.local_14 = 0 to 4 step 2)
  {
    .local_12 = ((.local_13 / .param_10) - 10);
    .local_12 = ((.local_12 / .param_9) + (2 / .local_12));
    .local_13 = bvand(1, .local_12);
    .param_9 = .local_13;
    if (((1 + .local_14) <= 3))
    {
      .local_12 = ((.local_13 / .param_10) - 10);
      .local_12 = ((.local_12 / .param_9) + (2 / .local_12));
      .local_13 = bvand(1, .local_12);
      .param_9 = .local_13;
    }
  }
  .param_10 = .param_9;
  .local_12 = .param_10;
  .ret_8 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

