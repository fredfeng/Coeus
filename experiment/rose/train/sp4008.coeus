declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_6 = (- .param_2);
  .local_4 = .param_2;
  .local_5 = ((.param_2 * (5 - .param_2)) % .param_2);
  .param_2 = .local_6;
  for (.local_6 = 0 to 4)
  {
    .local_7 = 2;
    .local_8 = (.local_4 % .local_7);
    if (.param_3)
    {
      for (.local_9 = 4 to 4)
      {
        .local_5 = .local_8;
      }
      .local_4 = 3;
    }
    else
    {
      if (.param_3)
      {
        .local_9 = (- bvor(.local_7, 0));
        .local_4 = (- (.local_6 + .local_9));
      }
      else
      {
        .local_5 = (.local_8 % (.local_4 - 16));
      }
    }
    .param_2 = ((.local_4 - .local_5) + ((.local_4 - .local_5) + ((.local_4 - .local_5) + ((.local_4 - .local_5) + ((.local_4 - .local_5) + ((.local_4 - .local_5) + ((.local_4 - .local_5) + (.local_4 - .local_5))))))));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12) returns (int .ret_10)
{
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_15 = (- .param_11);
  .local_13 = .param_11;
  .local_14 = ((.param_11 * (5 - .param_11)) % .param_11);
  .param_11 = .local_15;
  for (.local_15 = 0 to 4)
  {
    .local_16 = 2;
    .local_17 = (.local_13 % .local_16);
    if (.param_12)
    {
      for (.local_18 = 4 to 4 step 2)
      {
        .local_14 = .local_17;
        if (((1 + .local_18) <= 3))
        {
          .local_14 = .local_17;
        }
      }
      .local_13 = 3;
    }
    else
    {
      if (.param_12)
      {
        .local_18 = (- bvor(.local_16, 0));
        .local_13 = (- (.local_15 + .local_18));
      }
      else
      {
        .local_14 = (.local_17 % (.local_13 - 16));
      }
    }
    .param_11 = ((.local_13 - .local_14) + ((.local_13 - .local_14) + ((.local_13 - .local_14) + ((.local_13 - .local_14) + ((.local_13 - .local_14) + ((.local_13 - .local_14) + ((.local_13 - .local_14) + (.local_13 - .local_14))))))));
  }
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
ensures (.ret_1 == .ret_10);

