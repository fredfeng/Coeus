declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = 32;
  .local_5 = bvand((bvxor(.local_4, .local_4) + .local_4),
   (.local_4 * (.local_4 + 5)));
  .local_6 = 1;
  .local_5 = bvand(((.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5)))) / (- .local_5)),
   .param_3);
  .param_3 = (bvxor(0, .local_6) / .local_5);
  for (.param_3 = 0 to 16)
  {
    .local_5 = 6;
    .local_4 = ((.param_3 / .local_6) * .param_3);
    .local_5 = (.param_3 + .local_5);
  }
  .local_6 = (7 - (.local_5 - .local_4));
  .local_4 = (.local_6 * .local_6);
  .ret_1 = .local_4;
}

procedure f1(bool .param_8, int .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = 32;
  .local_11 = bvand((bvxor(.local_10, .local_10) + .local_10),
   (.local_10 * (.local_10 + 5)));
  .local_12 = 1;
  .local_11 = bvand(((.local_11 + (.local_11 + (.local_11 + (.local_11 + .local_11)))) / (- .local_11)),
   .param_9);
  .param_9 = (bvxor(0, .local_12) / .local_11);
  for (.param_9 = 0 to 16)
  {
    .local_11 = 6;
    .local_11 = (.param_9 + .local_11);
  }
  for (.param_9 = 0 to 16)
  {
    .local_10 = ((.param_9 / .local_12) * .param_9);
  }
  .local_12 = (7 - (.local_11 - .local_10));
  .local_10 = (.local_12 * .local_12);
  .ret_7 = .local_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

