declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = 2;
  .local_7 = (- .local_5);
  .local_6 = .local_5;
  for (.local_7 = 0 to 3)
  {
    .local_8 = ((6 - .param_4) - .local_6);
    .local_6 = (- (.local_8 * .local_6));
    for (.local_9 = 0 to (- .local_6))
    {
      .param_3 = .local_8;
    }
    .local_5 = bvxor(5, (bvxor(.local_7, 1) + .local_7));
  }
  .param_4 = bvand((- .local_5), .param_3);
  .local_5 = (.param_4 + (.param_4 + (.param_4 + (.param_4 + .param_4))));
  .ret_1 = .local_5;
}

procedure f1(bool .param_11, int .param_12, int .param_13) returns
 (int .ret_10)
{
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_14 = 2;
  .local_16 = (- .local_14);
  .local_15 = .local_14;
  for (.local_16 = 0 to 3)
  {
    .local_17 = ((6 - .param_13) - .local_15);
    .local_15 = (- (.local_17 * .local_15));
    for (.local_18 = 0 to ((-1 - .local_15) + 1))
    {
      .param_12 = .local_17;
    }
  }
  for (.local_16 = 0 to 3)
  {
    .local_14 = bvxor(5, (bvxor(.local_16, 1) + .local_16));
  }
  .param_13 = bvand((- .local_14), .param_12);
  .local_14 = (.param_13 + (.param_13 + (.param_13 + (.param_13 + .param_13))));
  .ret_10 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
ensures (.ret_1 == .ret_10);

