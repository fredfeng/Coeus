declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_5 = false;
  .local_6 = .param_2;
  for (.param_3 = 0 to 9)
  {
    if (.local_5)
    {
      .local_7 = .param_4;
      .local_6 = (.local_7 + 7);
    }
    else
    {
      .param_2 = .param_4;
      .local_6 = (- bvxor(3, .param_3));
    }
    .param_4 = .param_2;
  }
  .param_2 = ((- bvand(.param_4, 2)) % (bvand(.param_2, .local_6) + 16));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10, int .param_11) returns (int .ret_8)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_12 = false;
  .local_13 = .param_9;
  for (.param_10 = 0 to 9 step 2)
  {
    if (.local_12)
    {
      .local_14 = .param_11;
      .local_13 = (.local_14 + 7);
    }
    else
    {
      .param_9 = .param_11;
      .local_13 = (- bvxor(3, .param_10));
    }
    .param_11 = .param_9;
    if (((1 + .param_10) <= 8))
    {
      if (.local_12)
      {
        .local_14 = .param_11;
        .local_13 = (.local_14 + 7);
      }
      else
      {
        .param_9 = .param_11;
        .local_13 = (- bvxor(3, (1 + .param_10)));
      }
      .param_11 = .param_9;
    }
  }
  .param_9 = ((- bvand(.param_11, 2)) % (bvand(.param_9, .local_13) + 16));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

