declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, int .param_5,
             int .param_6)
 returns (int .ret_1)
{
  bool .local_7;
  int .local_8;
  int .local_9;
  .local_7 = true;
  .local_8 = 0;
  for (.param_3 = 1 to 16)
  {
    .local_9 = 7;
    for (.param_4 = 0 to (- .param_6))
    {
      if ((! .local_7))
      {
        .param_2 = ((.local_9 + .local_8) % .param_3);
        .param_6 = bvand(.param_4, -32);
      }
      else
      {
        .param_6 = (0 / (1 + .local_8));
      }
      .local_8 = .param_2;
    }
    .param_5 = 32;
  }
  .param_2 = (((.param_6 + .local_8) / .param_2) - ((.param_2 + .param_2) / (.param_2 + .param_5)));
  .ret_1 = .param_2;
}

procedure f1(int .param_11, int .param_12, int .param_13, int .param_14,
             int .param_15)
 returns (int .ret_10)
{
  bool .local_16;
  int .local_17;
  int .local_18;
  .local_16 = true;
  .local_17 = 0;
  for (.param_12 = 1 to 16)
  {
    .local_18 = 7;
    for (.param_13 = 0 to ((-1 - .param_15) + 1))
    {
      if ((! .local_16))
      {
        .param_11 = ((.local_18 + .local_17) % .param_12);
        .param_15 = bvand(.param_13, -32);
      }
      else
      {
        .param_15 = (0 / (1 + .local_17));
      }
    }
    for (.param_13 = 0 to ((-1 - .param_15) + 1))
    {
      .local_17 = .param_11;
    }
  }
  for (.param_12 = 1 to 16)
  {
    .param_14 = 32;
  }
  .param_11 = (((.param_15 + .local_17) / .param_11) - ((.param_11 + .param_11) / (.param_11 + .param_14)));
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
requires (.param_6 == .param_15);
ensures (.ret_1 == .ret_10);

