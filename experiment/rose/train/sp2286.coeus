declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 1;
  .local_5 = .local_4;
  for (.local_6 = 0 to 0)
  {
    .local_5 = .param_3;
  }
  while ((bvand(.local_5, 16) <= .param_3))
  {
    .local_4 = .local_5;
    .local_7 = (- .local_5);
    if (.param_2)
    {
      .local_6 = 2;
      .local_4 = ((.param_3 + 32) + (.local_5 - .local_7));
      .local_7 = 6;
      while ((.local_7 > 6))
      {
        .local_7 = .local_7;
        .param_3 = (64 - bvor((.local_7 * .local_6), (.local_4 * .local_7)));
        .local_7 = (.local_7 - 1);
      }
    }
    else
    {
      .param_3 = 2048;
    }
  }
  for (.local_5 = 16 to 64)
  {
    for (.local_7 = 0 to 0)
    {
      
    }
    .local_6 = bvxor((- .param_3), .local_5);
    .local_4 = (5 + (.local_6 / .param_3));
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_9, int .param_10) returns (int .ret_8)
{
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 1;
  .local_12 = .local_11;
  for (.local_13 = 0 to 0 step 2)
  {
    .local_12 = .param_10;
    if (((1 + .local_13) <= -1))
    {
      .local_12 = .param_10;
    }
  }
  while ((bvand(.local_12, 16) <= .param_10))
  {
    .local_11 = .local_12;
    .local_14 = (- .local_12);
    if (.param_9)
    {
      .local_13 = 2;
      .local_11 = ((.param_10 + 32) + (.local_12 - .local_14));
      .local_14 = 6;
      while ((.local_14 >= 7))
      {
        .local_14 = .local_14;
        .param_10 = (64 - bvor((.local_14 * .local_13),
         (.local_11 * .local_14)));
        .local_14 = (.local_14 - 1);
      }
    }
    else
    {
      .param_10 = 2048;
    }
  }
  for (.local_12 = 16 to 64)
  {
    for (.local_14 = 0 to 0 step 2)
    {
      if (((1 + .local_14) <= -1))
      {
        
      }
    }
    .local_13 = bvxor((- .param_10), .local_12);
    .local_11 = (5 + (.local_13 / .param_10));
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

