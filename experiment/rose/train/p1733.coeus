declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  .param_2 = (9 - .param_4);
  .param_4 = 7;
  .param_2 = ((.param_5 / .param_2) % (.param_2 + (.param_2 + (.param_2 + .param_2))));
  for (.local_6 = 0 to 64)
  {
    .param_5 = (.param_4 + (.param_4 / 10));
    .param_4 = .param_2;
  }
  .param_2 = bvand((- .param_4), bvand(.param_2, .param_5));
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9, int .param_10, int .param_11)
 returns (int .ret_7)
{
  int .local_12;
  .param_8 = (9 - .param_10);
  .param_10 = 7;
  .param_8 = ((.param_11 / .param_8) % (.param_8 + (.param_8 + (.param_8 + .param_8))));
  for (.local_12 = 0 to 64 step 2)
  {
    .param_11 = (.param_10 + (.param_10 / 10));
    .param_10 = .param_8;
    if (((1 + .local_12) <= 63))
    {
      .param_11 = (.param_10 + (.param_10 / 10));
      .param_10 = .param_8;
    }
  }
  .param_8 = bvand((- .param_10), bvand(.param_8, .param_11));
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
requires (.param_5 == .param_11);
ensures (.ret_1 == .ret_7);

