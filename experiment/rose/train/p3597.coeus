declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, bool .param_4) returns (int .ret_1)
{
  int .local_5;
  bool .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = 5;
  .local_6 = .param_2;
  if (.param_4)
  {
    for (.local_7 = 0 to 64)
    {
      .param_3 = 0;
    }
    .local_5 = (.param_3 - .local_5);
  }
  else
  {
    .local_7 = (.param_3 - bvor(.param_3, .param_3));
    .local_8 = bvor(7, .param_3);
    while ((.local_6 || (.local_6 != true)))
    {
      .local_9 = .local_5;
      if ((bvor(.local_8, 0) < 0))
      {
        .local_5 = bvand((.local_5 - .local_7), (.param_3 - .local_5));
      }
      else
      {
        .local_6 = ((.param_2 && (.local_9 == .param_3)) != (.local_6 || .param_4));
        .local_5 = ((.local_5 * .local_8) / .param_3);
      }
    }
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_11, int .param_12, bool .param_13) returns
 (int .ret_10)
{
  int .local_14;
  bool .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_14 = 5;
  .local_15 = .param_11;
  if (.param_13)
  {
    for (.local_16 = 0 to 64 step 2)
    {
      .param_12 = 0;
      if (((1 + .local_16) <= 63))
      {
        .param_12 = 0;
      }
    }
    .local_14 = (.param_12 - .local_14);
  }
  else
  {
    .local_16 = (.param_12 - bvor(.param_12, .param_12));
    .local_17 = bvor(7, .param_12);
    while ((.local_15 || (.local_15 != true)))
    {
      .local_18 = .local_14;
      if ((bvor(.local_17, 0) < 0))
      {
        .local_14 = bvand((.local_14 - .local_16), (.param_12 - .local_14));
      }
      else
      {
        .local_15 = ((.param_11 && (.local_18 == .param_12)) != (.local_15 || .param_13));
        .local_14 = ((.local_14 * .local_17) / .param_12);
      }
    }
  }
  .ret_10 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
ensures (.ret_1 == .ret_10);

