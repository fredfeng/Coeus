declare int bvor(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  .local_4 = 9;
  for (.param_3 = 0 to 64)
  {
    .local_4 = .param_3;
  }
  while (((5 >= .local_4) && (.param_2 || .param_2)))
  {
    .param_3 = .local_4;
    .local_4 = .param_3;
    .local_5 = .param_3;
    if ((! .param_2))
    {
      .local_4 = 0;
      for (.local_5 = 10 downto 7)
      {
        .local_4 = bvor(.local_4, .local_4);
      }
    }
    else
    {
      .local_5 = (16 * .local_4);
      .param_3 = .local_5;
      if (((.param_3 == 7) == true))
      {
        
      }
      else
      {
        .local_4 = (.local_4 * .local_4);
      }
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_7, int .param_8) returns (int .ret_6)
{
  int .local_9;
  int .local_10;
  .local_9 = 9;
  for (.param_8 = 0 to 64 step 2)
  {
    .local_9 = .param_8;
    if (((1 + .param_8) <= 63))
    {
      .local_9 = (1 + .param_8);
    }
  }
  while (((5 >= .local_9) && (.param_7 || .param_7)))
  {
    .param_8 = .local_9;
    .local_9 = .param_8;
    .local_10 = .param_8;
    if ((! .param_7))
    {
      .local_9 = 0;
      for (.local_10 = 10 downto 7)
      {
        .local_9 = bvor(.local_9, .local_9);
      }
    }
    else
    {
      .local_10 = (16 * .local_9);
      .param_8 = .local_10;
      if (((.param_8 == 7) == true))
      {
        
      }
      else
      {
        .local_9 = (.local_9 * .local_9);
      }
    }
  }
  .ret_6 = .local_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_7);
requires (.param_3 == .param_8);
ensures (.ret_1 == .ret_6);

