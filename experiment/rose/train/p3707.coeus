declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = false;
  .local_6 = ((2 % .param_2) * .param_2);
  .local_5 = .param_2;
  while (.local_4)
  {
    .local_5 = 64;
    .local_7 = 0;
    while ((.local_7 < (- .param_3)))
    {
      .local_6 = .local_5;
      .local_5 = .local_6;
      .local_7 = (.local_7 + 1);
    }
  }
  for (.local_6 = 0 to 8)
  {
    .local_5 = ((- .param_2) + (.local_5 - .local_6));
    .param_2 = bvand(.local_5, 4);
  }
  .param_3 = .param_2;
  .param_2 = .param_3;
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = false;
  .local_13 = ((2 % .param_9) * .param_9);
  .local_12 = .param_9;
  while (.local_11)
  {
    .local_12 = 64;
    .local_14 = 0;
    while ((.local_14 <= (-1 - .param_10)))
    {
      .local_13 = .local_12;
      .local_12 = .local_13;
      if (((1 + .local_14) <= (-1 - .param_10)))
      {
        .local_13 = .local_12;
        .local_12 = .local_13;
      }
      .local_14 = (.local_14 + 2);
    }
    if ((.local_14 <= (-1 - .param_10)))
    {
      .local_13 = .local_12;
      .local_12 = .local_13;
      if (((1 + .local_14) <= (-1 - .param_10)))
      {
        .local_13 = .local_12;
        .local_12 = .local_13;
      }
    }
  }
  for (.local_13 = 0 to 8 step 2)
  {
    .local_12 = ((- .param_9) + (.local_12 - .local_13));
    .param_9 = bvand(.local_12, 4);
    if (((1 + .local_13) <= 7))
    {
      .local_12 = ((- .param_9) + (.local_12 - (1 + .local_13)));
      .param_9 = bvand(.local_12, 4);
    }
  }
  .param_10 = .param_9;
  .param_9 = .param_10;
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

