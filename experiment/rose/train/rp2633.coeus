declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_3 = false;
  .local_5 = 2;
  .local_6 = (.param_2 * bvand(.param_2, 32));
  .local_4 = bvor(2, .param_2);
  .local_8 = (- bvxor(8, .local_6));
  while (((.local_5 * .param_2) != 0))
  {
    .local_7 = bvor((.local_6 + 9), bvor(.local_4, 0));
    .local_8 = 0;
    while ((.local_8 < .param_2))
    {
      .param_2 = 1;
      .local_9 = 0;
      while ((.local_9 < (- .local_5)))
      {
        .local_5 = (.local_4 * bvxor(.local_8, .local_7));
        .local_9 = (.local_9 + 1);
      }
      .local_8 = (.local_8 + 1);
    }
    while ((! (10 == .local_5)))
    {
      if ((.local_4 < (.param_2 % .param_2)))
      {
        .local_4 = (- bvor(.local_4, .param_2));
      }
      else
      {
        .local_5 = ((- .param_2) - (.local_5 - .local_6));
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_11) returns (int .ret_10)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_12 = false;
  .local_14 = 2;
  .local_15 = (.param_11 * bvand(.param_11, 32));
  .local_13 = bvor(2, .param_11);
  .local_17 = (- bvxor(8, .local_15));
  while (((.local_14 * .param_11) != 0))
  {
    .local_16 = bvor((.local_15 + 9), bvor(.local_13, 0));
    .local_17 = 0;
    while ((.local_17 <= (-1 + .param_11)))
    {
      .param_11 = 1;
      .local_17 = (.local_17 + 1);
    }
    .local_17 = 0;
    while ((.local_17 <= (-1 + .param_11)))
    {
      .local_18 = 0;
      while ((.local_18 <= (-1 - .local_14)))
      {
        .local_14 = (.local_13 * bvxor(.local_17, .local_16));
        .local_18 = (.local_18 + 1);
      }
      .local_17 = (.local_17 + 1);
    }
    while ((! (10 == .local_14)))
    {
      if ((.local_13 < (.param_11 % .param_11)))
      {
        .local_13 = (- bvor(.local_13, .param_11));
      }
      else
      {
        .local_14 = ((- .param_11) - (.local_14 - .local_15));
      }
    }
  }
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
ensures (.ret_1 == .ret_10);

