declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_5 = 10;
  .local_4 = true;
  .local_6 = .local_5;
  .param_2 = ((bvor(.param_3, .param_3) - .param_2) * (bvand(.local_6,
   .local_5) % (.param_2 + .local_5)));
  .param_2 = bvand((- (.local_6 + (.local_6 + (.local_6 + (.local_6 + .local_6))))),
   ((- .param_2) + bvand(16, .param_3)));
  for (.param_2 = 0 to (.local_5 - .param_3))
  {
    for (.local_7 = 5 to 8)
    {
      .param_3 = bvxor(.local_6, .param_2);
    }
  }
  .local_5 = (- bvand(bvxor(5, .param_3), -5));
  .ret_1 = .local_5;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_12 = 10;
  .local_11 = true;
  .local_13 = .local_12;
  .param_9 = ((bvor(.param_10, .param_10) - .param_9) * (bvand(.local_13,
   .local_12) % (.param_9 + .local_12)));
  .param_9 = bvand((- (.local_13 + (.local_13 + (.local_13 + (.local_13 + .local_13))))),
   ((- .param_9) + bvand(16, .param_10)));
  for (.param_9 = 0 to (.local_12 - .param_10))
  {
    for (.local_14 = 5 to 8 step 2)
    {
      .param_10 = bvxor(.local_13, .param_9);
      if (((1 + .local_14) <= 7))
      {
        .param_10 = bvxor(.local_13, .param_9);
      }
    }
  }
  .local_12 = (- bvand(bvxor(5, .param_10), -5));
  .ret_8 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

