declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 1;
  for (.local_6 = 0 to (- .local_4))
  {
    if (.param_2)
    {
      for (.local_8 = 0 to -2)
      {
        
      }
      .local_4 = 8;
    }
  }
  .param_3 = 0;
  while ((.param_3 < (.local_4 * 32)))
  {
    .local_5 = true;
    .local_4 = 6;
    if ((0 == (.param_3 % .local_4)))
    {
      .local_6 = .local_4;
      .local_7 = 64;
      while ((.local_7 < 7))
      {
        .local_5 = ((.param_2 && .local_5) && .local_5);
        .local_7 = (.local_7 + 1);
      }
      if (.local_5)
      {
        .local_4 = (bvand(.local_6, .param_3) * (.local_6 - .param_3));
      }
      else
      {
        .param_3 = bvand(.local_4, 0);
        .local_4 = .param_3;
      }
    }
    .param_3 = (.param_3 + 1);
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 1;
  for (.local_14 = 0 to (- .local_12))
  {
    if (.param_10)
    {
      for (.local_16 = 0 to -2 step 2)
      {
        if (((1 + .local_16) <= -3))
        {
          
        }
      }
      .local_12 = 8;
    }
  }
  .param_11 = 0;
  while ((.param_11 <= ((.local_12 * 32) - 1)))
  {
    .local_13 = true;
    .local_12 = 6;
    if ((0 == (.param_11 % .local_12)))
    {
      .local_14 = .local_12;
      .local_15 = 64;
      while ((.local_15 <= 6))
      {
        .local_13 = ((.param_10 && .local_13) && .local_13);
        if (((1 + .local_15) <= 6))
        {
          .local_13 = ((.param_10 && .local_13) && .local_13);
        }
        .local_15 = (.local_15 + 2);
      }
      if (.local_13)
      {
        .local_12 = (bvand(.local_14, .param_11) * (.local_14 - .param_11));
      }
      else
      {
        .param_11 = bvand(.local_12, 0);
        .local_12 = .param_11;
      }
    }
    .param_11 = (.param_11 + 1);
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

