declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4, int .param_5,
             int .param_6)
 returns (int .ret_1)
{
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  .local_7 = 4;
  .local_9 = .local_7;
  .local_8 = (- (.local_7 * .local_7));
  for (.local_10 = 32 downto 64)
  {
    .local_8 = bvand(.param_5, .local_9);
    .local_9 = .param_5;
  }
  .local_9 = 0;
  while ((.local_9 < 12))
  {
    .local_10 = .local_8;
    .param_4 = 0;
    while ((.param_4 < (.local_8 + .param_6)))
    {
      .local_9 = .param_5;
      .local_11 = 0;
      while ((.local_11 < .param_6))
      {
        .param_3 = .param_4;
        .local_8 = (- (bvor(.local_9, 16) % (.param_3 * .param_3)));
        .local_11 = (.local_11 + 1);
      }
      .local_7 = bvxor(.param_3, .param_6);
      .param_4 = (.param_4 + 1);
    }
    .param_3 = 0;
    while ((.param_3 < (- .local_7)))
    {
      while (((.local_10 != .param_5) || (.param_6 < .local_10)))
      {
        .param_5 = bvxor(bvor((- .param_3), (.param_3 / .param_6)),
         ((.local_9 / .local_7) + (.local_8 + (.local_8 + .local_8))));
      }
      .param_3 = (.param_3 + 1);
    }
    .local_7 = bvor(.local_9, 10);
    .local_9 = (.local_9 + 1);
  }
  .ret_1 = .local_7;
}

procedure f1(bool .param_13, int .param_14, int .param_15, int .param_16,
             int .param_17)
 returns (int .ret_12)
{
  int .local_18;
  int .local_19;
  int .local_20;
  int .local_21;
  int .local_22;
  .local_18 = 4;
  .local_20 = .local_18;
  .local_19 = (- (.local_18 * .local_18));
  for (.local_21 = 32 downto 64)
  {
    .local_19 = bvand(.param_16, .local_20);
    .local_20 = .param_16;
  }
  .local_20 = 0;
  while ((.local_20 <= 11))
  {
    .local_21 = .local_19;
    .param_15 = 0;
    while ((.param_15 <= ((.local_19 + .param_17) - 1)))
    {
      .local_20 = .param_16;
      .local_22 = 0;
      while ((.local_22 <= (-1 + .param_17)))
      {
        .param_14 = .param_15;
        .local_22 = (.local_22 + 1);
      }
      .local_22 = 0;
      while ((.local_22 <= (-1 + .param_17)))
      {
        .local_19 = (- (bvor(.local_20, 16) % (.param_14 * .param_14)));
        .local_22 = (.local_22 + 1);
      }
      .local_18 = bvxor(.param_14, .param_17);
      .param_15 = (.param_15 + 1);
    }
    .param_14 = 0;
    while ((.param_14 <= ((- .local_18) - 1)))
    {
      while (((.local_21 != .param_16) || (.param_17 < .local_21)))
      {
        .param_16 = bvxor(bvor((- .param_14), (.param_14 / .param_17)),
         ((.local_20 / .local_18) + (.local_19 + (.local_19 + .local_19))));
      }
      .param_14 = (.param_14 + 1);
    }
    .local_18 = bvor(.local_20, 10);
    .local_20 = (.local_20 + 1);
  }
  .ret_12 = .local_18;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_13);
requires (.param_3 == .param_14);
requires (.param_4 == .param_15);
requires (.param_5 == .param_16);
requires (.param_6 == .param_17);
ensures (.ret_1 == .ret_12);

