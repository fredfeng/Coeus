declare int bvxor(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  bool .local_6;
  int .local_7;
  .local_6 = false;
  .local_7 = ((.param_2 % .param_2) * (.param_2 * .param_2));
  for (.local_7 = 0 to 16)
  {
    while ((.param_2 >= (.local_7 + .param_4)))
    {
      .param_3 = 0;
    }
    for (.param_3 = 0 to 9)
    {
      .local_6 = (.local_6 || .local_6);
    }
  }
  while (.local_6)
  {
    .local_7 = ((.param_4 / .param_5) + bvxor(.param_5, .param_4));
    for (.param_3 = 0 to .local_7)
    {
      if (((.param_4 <= .param_3) || (! .local_6)))
      {
        .local_6 = ((! .local_6) == (.param_4 > 0));
      }
      else
      {
        .local_7 = bvxor((1 + (.param_4 % .param_2)), .local_7);
        .param_2 = ((- .param_4) * (.param_4 - .local_7));
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10, int .param_11, int .param_12)
 returns (int .ret_8)
{
  bool .local_13;
  int .local_14;
  .local_13 = false;
  .local_14 = ((.param_9 % .param_9) * (.param_9 * .param_9));
  for (.local_14 = 0 to 16)
  {
    while ((.param_9 >= (.local_14 + .param_11)))
    {
      .param_10 = 0;
    }
    for (.param_10 = 0 to 9 step 2)
    {
      .local_13 = (.local_13 || .local_13);
      if (((1 + .param_10) <= 8))
      {
        .local_13 = (.local_13 || .local_13);
      }
    }
  }
  while (.local_13)
  {
    .local_14 = ((.param_11 / .param_12) + bvxor(.param_12, .param_11));
    for (.param_10 = 0 to ((-1 + .local_14) + 1) step 2)
    {
      if (((.param_11 <= .param_10) || (! .local_13)))
      {
        .local_13 = ((! .local_13) == (.param_11 > 0));
      }
      else
      {
        .local_14 = bvxor((1 + (.param_11 % .param_9)), .local_14);
        .param_9 = ((- .param_11) * (.param_11 - .local_14));
      }
      if (((1 + .param_10) <= (-1 + .local_14)))
      {
        if (((.param_11 <= (1 + .param_10)) || (! .local_13)))
        {
          .local_13 = ((! .local_13) == (.param_11 > 0));
        }
        else
        {
          .local_14 = bvxor((1 + (.param_11 % .param_9)), .local_14);
          .param_9 = ((- .param_11) * (.param_11 - .local_14));
        }
      }
    }
    if ((.param_10 <= (-1 + .local_14)))
    {
      if (((.param_11 <= .param_10) || (! .local_13)))
      {
        .local_13 = ((! .local_13) == (.param_11 > 0));
      }
      else
      {
        .local_14 = bvxor((1 + (.param_11 % .param_9)), .local_14);
        .param_9 = ((- .param_11) * (.param_11 - .local_14));
      }
      if (((1 + .param_10) <= (-1 + .local_14)))
      {
        if (((.param_11 <= (1 + .param_10)) || (! .local_13)))
        {
          .local_13 = ((! .local_13) == (.param_11 > 0));
        }
        else
        {
          .local_14 = bvxor((1 + (.param_11 % .param_9)), .local_14);
          .param_9 = ((- .param_11) * (.param_11 - .local_14));
        }
      }
    }
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
requires (.param_5 == .param_12);
ensures (.ret_1 == .ret_8);

