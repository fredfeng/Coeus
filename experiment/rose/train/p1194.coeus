declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = false;
  .local_5 = 4;
  for (.param_3 = 0 to 0)
  {
    .local_6 = ((- .param_2) / (.param_2 + .local_5));
    while ((.local_5 == .local_6))
    {
      .local_6 = (4 % (.local_6 % .param_3));
      .local_7 = 1;
      while ((.local_7 > 64))
      {
        .local_6 = bvand((- .local_5), (.local_6 / .local_5));
        .local_7 = (.local_7 - 1);
      }
    }
    .param_2 = (3 % .local_5);
  }
  for (.local_5 = 0 to 20)
  {
    .param_3 = .param_2;
    .param_2 = .param_3;
    .param_2 = (.param_2 % 2);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = false;
  .local_12 = 4;
  for (.param_10 = 0 to 0)
  {
    .local_13 = ((- .param_9) / (.param_9 + .local_12));
    while ((.local_12 == .local_13))
    {
      .local_13 = (4 % (.local_13 % .param_10));
      .local_14 = 1;
      while ((.local_14 >= 65))
      {
        .local_13 = bvand((- .local_12), (.local_13 / .local_12));
        .local_14 = (.local_14 - 1);
      }
    }
    .param_9 = (3 % .local_12);
  }
  for (.local_12 = 0 to 20 step 2)
  {
    .param_10 = .param_9;
    .param_9 = .param_10;
    .param_9 = (.param_9 % 2);
    if (((1 + .local_12) <= 19))
    {
      .param_10 = .param_9;
      .param_9 = .param_10;
      .param_9 = (.param_9 % 2);
    }
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

