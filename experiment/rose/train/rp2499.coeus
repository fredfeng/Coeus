declare int bvor(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  .local_5 = 64;
  .local_4 = true;
  for (.local_6 = 0 to .local_5)
  {
    .local_5 = bvor(5, 0);
    .local_4 = (.local_4 != true);
    .param_3 = (- .local_5);
  }
  .local_4 = ((0 < .param_2) && .local_4);
  if (.local_4)
  {
    .param_2 = ((.param_2 + .param_2) + (.param_3 + 2));
    .local_5 = (- .param_2);
  }
  else
  {
    .local_5 = ((- .param_2) - 16);
  }
  .ret_1 = .local_5;
}

procedure f1(int .param_8, int .param_9) returns (int .ret_7)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  .local_11 = 64;
  .local_10 = true;
  for (.local_12 = 0 to ((-1 + .local_11) + 1))
  {
    .local_11 = bvor(5, 0);
    .param_9 = (- .local_11);
  }
  for (.local_12 = 0 to ((-1 + .local_11) + 1))
  {
    .local_10 = (.local_10 != true);
  }
  .local_10 = ((0 < .param_8) && .local_10);
  if (.local_10)
  {
    .param_8 = ((.param_8 + .param_8) + (.param_9 + 2));
    .local_11 = (- .param_8);
  }
  else
  {
    .local_11 = ((- .param_8) - 16);
  }
  .ret_7 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

