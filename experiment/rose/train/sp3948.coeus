declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = bvxor(64, (.param_2 + 5));
  for (.local_5 = 0 to 0)
  {
    .local_6 = ((.local_4 % 32) * (.param_2 * 64));
    .local_4 = (- .local_6);
  }
  .param_2 = ((.param_2 * .local_4) * .local_4);
  .local_4 = 1;
  for (.local_4 = 0 to 6)
  {
    .local_5 = ((.param_2 + .param_2) * bvor(.param_2, .local_4));
    .local_5 = (.local_4 % .local_5);
    .param_2 = bvand((.local_5 - 32), 4);
    .param_2 = bvxor(bvor(.local_5, .param_2), (3 + .local_5));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = bvxor(64, (.param_8 + 5));
  for (.local_11 = 0 to 0 step 2)
  {
    .local_12 = ((.local_10 % 32) * (.param_8 * 64));
    .local_10 = (- .local_12);
    if (((1 + .local_11) <= -1))
    {
      .local_12 = ((.local_10 % 32) * (.param_8 * 64));
      .local_10 = (- .local_12);
    }
  }
  .param_8 = ((.param_8 * .local_10) * .local_10);
  .local_10 = 1;
  for (.local_10 = 0 to 6 step 2)
  {
    .local_11 = ((.param_8 + .param_8) * bvor(.param_8, .local_10));
    .local_11 = (.local_10 % .local_11);
    .param_8 = bvand((.local_11 - 32), 4);
    .param_8 = bvxor(bvor(.local_11, .param_8), (3 + .local_11));
    if (((1 + .local_10) <= 5))
    {
      .local_11 = ((.param_8 + .param_8) * bvor(.param_8, (1 + .local_10)));
      .local_11 = ((1 + .local_10) % .local_11);
      .param_8 = bvand((.local_11 - 32), 4);
      .param_8 = bvxor(bvor(.local_11, .param_8), (3 + .local_11));
    }
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

