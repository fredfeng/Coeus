declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = false;
  .param_2 = .param_3;
  for (.param_3 = 0 to bvxor(.param_2, 16))
  {
    .local_5 = .param_3;
    while ((1 >= .param_2))
    {
      .param_2 = bvand(10, (.local_5 + .local_5));
    }
    for (.local_6 = 0 to -16)
    {
      .local_7 = (- (.param_3 - .param_2));
      .param_2 = (bvxor(.local_7, .param_3) - 8);
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = false;
  .param_9 = .param_10;
  for (.param_10 = 0 to bvxor(.param_9, 16))
  {
    .local_12 = .param_10;
    while ((1 >= .param_9))
    {
      .param_9 = bvand(10, (.local_12 + .local_12));
    }
    for (.local_13 = 0 to -16 step 2)
    {
      .local_14 = (- (.param_10 - .param_9));
      .param_9 = (bvxor(.local_14, .param_10) - 8);
      if (((1 + .local_13) <= -17))
      {
        .local_14 = (- (.param_10 - .param_9));
        .param_9 = (bvxor(.local_14, .param_10) - 8);
      }
    }
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

