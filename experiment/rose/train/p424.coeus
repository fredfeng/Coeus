declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = false;
  .local_6 = (.param_2 * -32);
  .local_5 = bvor(bvor(5, .param_2), 5);
  .param_2 = (.local_6 + .local_5);
  for (.local_6 = 0 to .local_5)
  {
    .local_7 = .param_2;
    for (.local_8 = 0 to 1)
    {
      .local_4 = .local_4;
      .param_3 = bvand((- .local_7), (.local_5 - 4));
    }
    .local_5 = bvor((- .local_7), 0);
  }
  .param_3 = (.local_5 * ((.local_5 * .local_5) - 64));
  for (.param_3 = 0 to .param_2)
  {
    while (.local_4)
    {
      .local_6 = (bvor(3, .param_2) % bvor(.param_2, .param_2));
      .param_2 = .local_6;
    }
    while (((.local_4 == .local_4) != (! .local_4)))
    {
      .param_2 = (- (.param_3 / .param_2));
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11) returns (int .ret_9)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = false;
  .local_14 = (.param_10 * -32);
  .local_13 = bvor(bvor(5, .param_10), 5);
  .param_10 = (.local_14 + .local_13);
  for (.local_14 = 0 to .local_13)
  {
    .local_15 = .param_10;
    for (.local_16 = 0 to 1 step 2)
    {
      .local_12 = .local_12;
      .param_11 = bvand((- .local_15), (.local_13 - 4));
      if (((1 + .local_16) <= 0))
      {
        .local_12 = .local_12;
        .param_11 = bvand((- .local_15), (.local_13 - 4));
      }
    }
    .local_13 = bvor((- .local_15), 0);
  }
  .param_11 = (.local_13 * ((.local_13 * .local_13) - 64));
  for (.param_11 = 0 to .param_10)
  {
    while (.local_12)
    {
      .local_14 = (bvor(3, .param_10) % bvor(.param_10, .param_10));
      .param_10 = .local_14;
    }
    while (((.local_12 == .local_12) != (! .local_12)))
    {
      .param_10 = (- (.param_11 / .param_10));
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

