declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 4;
  .local_6 = .local_4;
  .local_5 = 64;
  .local_4 = ((.local_5 - 2) / (- .param_3));
  for (.local_6 = 0 to (4 % .param_3))
  {
    .local_7 = .local_4;
    if (((.local_7 + .local_6) == 5))
    {
      .local_4 = .local_7;
      for (.local_8 = 0 to 4)
      {
        .local_5 = (- (.local_4 - 3));
      }
    }
    else
    {
      .local_8 = .local_5;
      .local_5 = bvand(1, .local_8);
    }
    .local_4 = .local_5;
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 4;
  .local_14 = .local_12;
  .local_13 = 64;
  .local_12 = ((.local_13 - 2) / (- .param_11));
  for (.local_14 = 0 to (4 % .param_11))
  {
    .local_15 = .local_12;
    if (((.local_15 + .local_14) == 5))
    {
      .local_12 = .local_15;
      for (.local_16 = 0 to 4 step 2)
      {
        .local_13 = (- (.local_12 - 3));
        if (((1 + .local_16) <= 3))
        {
          .local_13 = (- (.local_12 - 3));
        }
      }
    }
    else
    {
      .local_16 = .local_13;
      .local_13 = bvand(1, .local_16);
    }
    .local_12 = .local_13;
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

