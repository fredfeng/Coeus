declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  .local_5 = ((11 % bvand(.param_2, 9)) * .param_2);
  for (.local_6 = 0 to 16)
  {
    .local_7 = (.local_5 + .local_5);
    .param_2 = ((.param_2 + .local_7) * bvand(.param_4, 0));
    .local_5 = .param_2;
  }
  .param_4 = (- .local_5);
  .local_5 = .param_4;
  .param_2 = (((.param_2 + 64) % 1) + bvand(bvor(.param_4, 2),
   (4 + .local_5)));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  int .local_13;
  int .local_14;
  .local_12 = ((11 % bvand(.param_9, 9)) * .param_9);
  for (.local_13 = 0 to 16 step 2)
  {
    .local_14 = (.local_12 + .local_12);
    .param_9 = ((.param_9 + .local_14) * bvand(.param_11, 0));
    .local_12 = .param_9;
    if (((1 + .local_13) <= 15))
    {
      .local_14 = (.local_12 + .local_12);
      .param_9 = ((.param_9 + .local_14) * bvand(.param_11, 0));
      .local_12 = .param_9;
    }
  }
  .param_11 = (- .local_12);
  .local_12 = .param_11;
  .param_9 = (((.param_9 + 64) % 1) + bvand(bvor(.param_11, 2),
   (4 + .local_12)));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

