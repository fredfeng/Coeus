declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = false;
  .local_6 = .param_2;
  .param_2 = bvand(bvxor(.param_4, 2), (.param_3 - .param_2));
  for (.local_6 = 0 to bvxor(2, .param_3))
  {
    for (.local_7 = 0 to (1 - .local_6))
    {
      .param_3 = (- (.param_2 + 32));
      for (.local_8 = 32 to 16)
      {
        .param_3 = bvxor(1, ((1 + .local_6) - .local_6));
      }
    }
    .param_2 = .param_3;
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11, int .param_12) returns
 (int .ret_9)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = false;
  .local_14 = .param_10;
  .param_10 = bvand(bvxor(.param_12, 2), (.param_11 - .param_10));
  for (.local_14 = 0 to bvxor(2, .param_11))
  {
    for (.local_15 = 0 to (1 - .local_14))
    {
      .param_11 = (- (.param_10 + 32));
      for (.local_16 = 32 to 16 step 2)
      {
        .param_11 = bvxor(1, ((1 + .local_14) - .local_14));
        if (((1 + .local_16) <= 15))
        {
          .param_11 = bvxor(1, ((1 + .local_14) - .local_14));
        }
      }
    }
    .param_10 = .param_11;
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

