declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = 7;
  .local_3 = true;
  .local_6 = .local_4;
  .local_5 = 6;
  for (.local_6 = 0 to 4)
  {
    if ((! .local_3))
    {
      .local_4 = (- bvxor(bvor(.local_6, .param_2), .param_2));
    }
    else
    {
      .param_2 = bvxor(.local_5, (4 - .local_4));
    }
    .local_4 = ((5 % .param_2) + .local_4);
  }
  .local_5 = bvxor((- .local_4), 10);
  .local_4 = (bvor(.local_5, .local_5) / bvand(2, .local_5));
  .ret_1 = .local_4;
}

procedure f1(int .param_8) returns (int .ret_7)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = 7;
  .local_9 = true;
  .local_12 = .local_10;
  .local_11 = 6;
  for (.local_12 = 0 to 4 step 2)
  {
    if ((! .local_9))
    {
      .local_10 = (- bvxor(bvor(.local_12, .param_8), .param_8));
    }
    else
    {
      .param_8 = bvxor(.local_11, (4 - .local_10));
    }
    .local_10 = ((5 % .param_8) + .local_10);
    if (((1 + .local_12) <= 3))
    {
      if ((! .local_9))
      {
        .local_10 = (- bvxor(bvor((1 + .local_12), .param_8), .param_8));
      }
      else
      {
        .param_8 = bvxor(.local_11, (4 - .local_10));
      }
      .local_10 = ((5 % .param_8) + .local_10);
    }
  }
  .local_11 = bvxor((- .local_10), 10);
  .local_10 = (bvor(.local_11, .local_11) / bvand(2, .local_11));
  .ret_7 = .local_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
ensures (.ret_1 == .ret_7);

