declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  bool .local_6;
  bool .local_7;
  int .local_8;
  int .local_9;
  .local_4 = 1;
  .local_3 = false;
  .local_6 = ((- bvor(.local_4, 10)) > .local_4);
  for (.local_8 = 0 to .local_4)
  {
    for (.local_9 = 1 to 2)
    {
      .param_2 = 0;
    }
  }
  .local_5 = bvxor((.param_2 + 6), 35);
  .param_2 = 0;
  while ((.param_2 < (.local_5 / 3)))
  {
    .local_7 = (.local_6 != (.local_5 <= .param_2));
    while (.local_6)
    {
      if (.local_7)
      {
        .param_2 = 2;
      }
      else
      {
        .param_2 = (- (.local_5 - .param_2));
        .local_4 = 8;
      }
    }
    .local_4 = (.param_2 - .local_4);
    .param_2 = (.param_2 + 1);
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_11) returns (int .ret_10)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  bool .local_15;
  bool .local_16;
  int .local_17;
  int .local_18;
  .local_13 = 1;
  .local_12 = false;
  .local_15 = ((- bvor(.local_13, 10)) > .local_13);
  for (.local_17 = 0 to .local_13)
  {
    for (.local_18 = 1 to 2 step 2)
    {
      .param_11 = 0;
      if (((1 + .local_18) <= 1))
      {
        .param_11 = 0;
      }
    }
  }
  .local_14 = bvxor((.param_11 + 6), 35);
  .param_11 = 0;
  while ((.param_11 <= ((.local_14 / 3) - 1)))
  {
    .local_16 = (.local_15 != (.local_14 <= .param_11));
    while (.local_15)
    {
      if (.local_16)
      {
        .param_11 = 2;
      }
      else
      {
        .param_11 = (- (.local_14 - .param_11));
        .local_13 = 8;
      }
    }
    .local_13 = (.param_11 - .local_13);
    .param_11 = (.param_11 + 1);
  }
  .ret_10 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
ensures (.ret_1 == .ret_10);

