declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_5 = ((.param_2 + .param_2) / .param_2);
  .local_4 = 0;
  .local_5 = (bvor(.param_2, .local_4) / (.local_5 + .local_5));
  for (.local_5 = 0 to 64)
  {
    .local_6 = 10;
    if (.param_3)
    {
      .param_2 = bvor((.local_5 - .local_4), (.local_6 % 7));
      .param_2 = (- .param_2);
    }
    else
    {
      .param_2 = .local_5;
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_11 = ((.param_8 + .param_8) / .param_8);
  .local_10 = 0;
  .local_11 = (bvor(.param_8, .local_10) / (.local_11 + .local_11));
  for (.local_11 = 0 to 64 step 2)
  {
    .local_12 = 10;
    if (.param_9)
    {
      .param_8 = bvor((.local_11 - .local_10), (.local_12 % 7));
      .param_8 = (- .param_8);
    }
    else
    {
      .param_8 = .local_11;
    }
    if (((1 + .local_11) <= 63))
    {
      .local_12 = 10;
      if (.param_9)
      {
        .param_8 = bvor(((1 + .local_11) - .local_10), (.local_12 % 7));
        .param_8 = (- .param_8);
      }
      else
      {
        .param_8 = (1 + .local_11);
      }
    }
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

