declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_6 = (bvxor(-5, (.param_2 % .param_2)) * .param_2);
  for (.param_4 = 0 to (8 - .param_2))
  {
    .local_8 = .param_5;
    .param_2 = bvor(((- .local_6) - 14), .param_2);
    for (.local_9 = 0 to 0)
    {
      if ((! .param_3))
      {
        .param_5 = ((.local_8 - 9) / 2);
      }
      else
      {
        .param_2 = bvxor(bvor(.param_4, 8), (- .param_5));
      }
    }
  }
  for (.param_5 = 0 to -4)
  {
    .param_4 = 1;
    .local_7 = 1;
    .param_2 = ((.param_5 * .local_7) * (.param_4 * .param_4));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12, int .param_13, int .param_14)
 returns (int .ret_10)
{
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_15 = (bvxor(-5, (.param_11 % .param_11)) * .param_11);
  for (.param_13 = 0 to (8 - .param_11))
  {
    .local_17 = .param_14;
    .param_11 = bvor(((- .local_15) - 14), .param_11);
    for (.local_18 = 0 to 0 step 2)
    {
      if ((! .param_12))
      {
        .param_14 = ((.local_17 - 9) / 2);
      }
      else
      {
        .param_11 = bvxor(bvor(.param_13, 8), (- .param_14));
      }
      if (((1 + .local_18) <= -1))
      {
        if ((! .param_12))
        {
          .param_14 = ((.local_17 - 9) / 2);
        }
        else
        {
          .param_11 = bvxor(bvor(.param_13, 8), (- .param_14));
        }
      }
    }
  }
  for (.param_14 = 0 to -4 step 2)
  {
    .param_13 = 1;
    .local_16 = 1;
    .param_11 = ((.param_14 * .local_16) * (.param_13 * .param_13));
    if (((1 + .param_14) <= -5))
    {
      .param_13 = 1;
      .local_16 = 1;
      .param_11 = (((1 + .param_14) * .local_16) * (.param_13 * .param_13));
    }
  }
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
ensures (.ret_1 == .ret_10);

