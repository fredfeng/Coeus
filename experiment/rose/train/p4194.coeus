declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = .param_2;
  .local_4 = (.local_4 * (- .param_2));
  for (.local_5 = 32 downto 5)
  {
    for (.local_6 = 10 to 7)
    {
      .local_4 = .param_2;
    }
    .param_2 = bvand(.local_4, 64);
  }
  .param_2 = ((4 / .param_2) / .param_2);
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = .param_8;
  .local_10 = (.local_10 * (- .param_8));
  for (.local_11 = 32 downto 5)
  {
    for (.local_12 = 10 to 7 step 2)
    {
      .local_10 = .param_8;
      if (((1 + .local_12) <= 6))
      {
        .local_10 = .param_8;
      }
    }
    .param_8 = bvand(.local_10, 64);
  }
  .param_8 = ((4 / .param_8) / .param_8);
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

