declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 8;
  .local_3 = true;
  .local_3 = .param_2;
  while (((! .param_2) && (.local_4 == 32)))
  {
    .local_6 = ((.local_4 / 3) * (.local_4 % .local_4));
    .local_3 = (bvor(2, .local_6) <= 0);
  }
  while (.param_2)
  {
    .local_5 = ((bvxor(.local_4,
     10) - 2) - ((.local_4 - 32) + bvxor(.local_4, .local_4)));
    for (.local_6 = 0 to 16)
    {
      for (.local_7 = 8 to 9)
      {
        .param_2 = .local_3;
        .local_3 = .param_2;
      }
    }
    if (.local_3)
    {
      if (.local_3)
      {
        .local_4 = 64;
        .local_4 = (.local_5 - .local_4);
      }
    }
    else
    {
      .local_6 = 1;
      while (((.param_2 && .param_2) != (.local_5 < .local_6)))
      {
        .local_6 = -8;
        .local_6 = (.local_6 * bvand(6, .local_5));
      }
      .local_4 = (- .local_5);
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_9) returns (int .ret_8)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = 8;
  .local_10 = true;
  .local_10 = .param_9;
  while (((! .param_9) && (.local_11 == 32)))
  {
    .local_13 = ((.local_11 / 3) * (.local_11 % .local_11));
    .local_10 = (bvor(2, .local_13) <= 0);
  }
  while (.param_9)
  {
    .local_12 = ((bvxor(.local_11,
     10) - 2) - ((.local_11 - 32) + bvxor(.local_11, .local_11)));
    for (.local_13 = 0 to 16)
    {
      for (.local_14 = 8 to 9 step 2)
      {
        .param_9 = .local_10;
        .local_10 = .param_9;
        if (((1 + .local_14) <= 8))
        {
          .param_9 = .local_10;
          .local_10 = .param_9;
        }
      }
    }
    if (.local_10)
    {
      if (.local_10)
      {
        .local_11 = 64;
        .local_11 = (.local_12 - .local_11);
      }
    }
    else
    {
      .local_13 = 1;
      while (((.param_9 && .param_9) != (.local_12 < .local_13)))
      {
        .local_13 = -8;
        .local_13 = (.local_13 * bvand(6, .local_12));
      }
      .local_11 = (- .local_12);
    }
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

