declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = .param_2;
  .local_4 = 2;
  .local_8 = .local_4;
  while (.param_3)
  {
    .local_5 = (0 < (.local_6 + 8));
    .param_2 = ((.local_4 - 5) % bvor(.param_2, .local_6));
    .param_3 = (! .local_5);
  }
  for (.local_6 = 0 to (7 - .param_2))
  {
    .local_7 = (.param_2 * bvor(.param_2, 4));
    .param_2 = (bvand(7, (- .param_2)) + (.local_7 * bvand(.param_2,
     .local_6)));
    if (.param_3)
    {
      for (.local_8 = 0 to 3)
      {
        .local_7 = (- .local_8);
        .param_2 = .local_7;
      }
      .param_2 = (2 + .param_2);
    }
    else
    {
      .local_8 = 14;
      if (.param_3)
      {
        .local_7 = (.local_8 + 32);
      }
      else
      {
        .local_7 = .local_6;
      }
      .param_2 = .local_7;
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11) returns (int .ret_9)
{
  int .local_12;
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = .param_10;
  .local_12 = 2;
  .local_16 = .local_12;
  while (.param_11)
  {
    .local_13 = (0 < (.local_14 + 8));
    .param_10 = ((.local_12 - 5) % bvor(.param_10, .local_14));
    .param_11 = (! .local_13);
  }
  for (.local_14 = 0 to (7 - .param_10))
  {
    .local_15 = (.param_10 * bvor(.param_10, 4));
    .param_10 = (bvand(7, (- .param_10)) + (.local_15 * bvand(.param_10,
     .local_14)));
    if (.param_11)
    {
      for (.local_16 = 0 to 3 step 2)
      {
        .local_15 = (- .local_16);
        .param_10 = .local_15;
        if (((1 + .local_16) <= 2))
        {
          .local_15 = (- (1 + .local_16));
          .param_10 = .local_15;
        }
      }
      .param_10 = (2 + .param_10);
    }
    else
    {
      .local_16 = 14;
      if (.param_11)
      {
        .local_15 = (.local_16 + 32);
      }
      else
      {
        .local_15 = .local_14;
      }
      .param_10 = .local_15;
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

