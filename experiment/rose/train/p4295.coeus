declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = 32;
  .local_5 = false;
  .local_7 = 16;
  for (.param_2 = 4 downto .param_3)
  {
    .local_6 = ((- .local_7) - (.param_2 / .local_6));
  }
  .param_2 = (.param_4 - .local_7);
  for (.local_7 = 0 to (- .local_6))
  {
    .local_6 = .param_4;
    for (.param_2 = 0 to 10)
    {
      .local_8 = .param_2;
      .local_6 = (bvand(64, .local_8) * 16);
    }
  }
  .ret_1 = .local_6;
}

procedure f1(int .param_10, int .param_11, int .param_12) returns
 (int .ret_9)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = 32;
  .local_13 = false;
  .local_15 = 16;
  for (.param_10 = 4 downto .param_11)
  {
    .local_14 = ((- .local_15) - (.param_10 / .local_14));
  }
  .param_10 = (.param_12 - .local_15);
  for (.local_15 = 0 to (- .local_14))
  {
    .local_14 = .param_12;
    for (.param_10 = 0 to 10 step 2)
    {
      .local_16 = .param_10;
      .local_14 = (bvand(64, .local_16) * 16);
      if (((1 + .param_10) <= 9))
      {
        .local_16 = (1 + .param_10);
        .local_14 = (bvand(64, .local_16) * 16);
      }
    }
  }
  .ret_9 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

