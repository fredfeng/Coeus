declare int bvand(int, int);

procedure f0() returns (int .ret_1)
{
  bool .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_3 = 9;
  .local_2 = false;
  .local_5 = 0;
  if (.local_2)
  {
    .local_3 = -9;
    .local_3 = (.local_3 * bvand(.local_3, .local_3));
  }
  else
  {
    .local_4 = .local_3;
    .local_4 = (.local_3 + .local_4);
    .local_3 = .local_5;
    for (.local_5 = 9 downto 3)
    {
      .local_6 = (- bvand(.local_4, 7));
      for (.local_8 = 0 to -3)
      {
        
      }
      for (.local_7 = bvand(.local_5, .local_5) downto 64)
      {
        .local_8 = (.local_4 - .local_6);
        .local_3 = .local_8;
      }
    }
  }
  .ret_1 = .local_3;
}

procedure f1() returns (int .ret_9)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_11 = 9;
  .local_10 = false;
  .local_13 = 0;
  if (.local_10)
  {
    .local_11 = -9;
    .local_11 = (.local_11 * bvand(.local_11, .local_11));
  }
  else
  {
    .local_12 = .local_11;
    .local_12 = (.local_11 + .local_12);
    .local_11 = .local_13;
    for (.local_13 = 9 downto 3)
    {
      .local_14 = (- bvand(.local_12, 7));
      for (.local_16 = 0 to -3 step 2)
      {
        if (((1 + .local_16) <= -4))
        {
          
        }
      }
      for (.local_15 = bvand(.local_13, .local_13) downto 64)
      {
        .local_16 = (.local_12 - .local_14);
        .local_11 = .local_16;
      }
    }
  }
  .ret_9 = .local_11;
}

$lentry f0;
$rentry f1;

ensures (.ret_1 == .ret_9);

