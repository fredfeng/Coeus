declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2) returns (int .ret_1)
{
  int .local_3;
  int .local_4;
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_3 = 16;
  .local_6 = bvxor((.local_3 + .local_3), (2 / .local_3));
  .local_4 = .local_3;
  for (.local_6 = 0 to .local_4)
  {
    .local_5 = (.param_2 && ((64 <= .local_4) && (! .param_2)));
    for (.local_7 = 0 to .local_4)
    {
      .local_4 = bvand((- .local_4), 2);
      .param_2 = (.local_5 != false);
    }
    .local_3 = (.local_3 - .local_4);
    while (.param_2)
    {
      .local_3 = .local_6;
    }
  }
  .local_4 = (((.local_3 * .local_3) % (2 - .local_3)) + .local_4);
  .local_3 = .local_4;
  .ret_1 = .local_3;
}

procedure f1(bool .param_9) returns (int .ret_8)
{
  int .local_10;
  int .local_11;
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_10 = 16;
  .local_13 = bvxor((.local_10 + .local_10), (2 / .local_10));
  .local_11 = .local_10;
  for (.local_13 = 0 to .local_11)
  {
    .local_12 = (.param_9 && ((64 <= .local_11) && (! .param_9)));
    for (.local_14 = 0 to ((-1 + .local_11) + 1))
    {
      .local_11 = bvand((- .local_11), 2);
    }
    for (.local_14 = 0 to ((-1 + .local_11) + 1))
    {
      .param_9 = (.local_12 != false);
    }
    .local_10 = (.local_10 - .local_11);
    while (.param_9)
    {
      .local_10 = .local_13;
    }
  }
  .local_11 = (((.local_10 * .local_10) % (2 - .local_10)) + .local_11);
  .local_10 = .local_11;
  .ret_8 = .local_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

