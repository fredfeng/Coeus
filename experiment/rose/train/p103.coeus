declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_4 = true;
  .local_6 = ((.param_2 + .param_2) % bvxor(.param_2, 4));
  .local_5 = (bvor(.param_2, .param_2) % .param_2);
  for (.local_6 = 0 to .param_2)
  {
    .local_7 = ((.local_6 + 5) * bvor(.local_5, 2));
    while ((! .local_4))
    {
      if (.local_4)
      {
        .param_3 = (bvand(.local_7, .local_6) - (.param_3 + .local_7));
        .param_2 = (64 - .local_6);
      }
      else
      {
        .local_5 = (.param_3 / (- .param_3));
      }
      if ((.param_2 > 60))
      {
        .param_2 = (bvor(0, .local_7) + .local_7);
      }
      else
      {
        .param_2 = (-7 / .local_7);
      }
    }
  }
  for (.local_5 = 5 to 7)
  {
    for (.local_8 = 0 to 3)
    {
      .local_9 = .param_2;
      .param_3 = ((.local_5 % (2 - .local_9)) + 64);
      .param_3 = (bvxor(.local_5, .local_5) / (- .param_3));
    }
  }
  .param_2 = bvxor(16, bvor(5, .param_3));
  .ret_1 = .param_2;
}

procedure f1(int .param_11, int .param_12) returns (int .ret_10)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_13 = true;
  .local_15 = ((.param_11 + .param_11) % bvxor(.param_11, 4));
  .local_14 = (bvor(.param_11, .param_11) % .param_11);
  for (.local_15 = 0 to .param_11)
  {
    .local_16 = ((.local_15 + 5) * bvor(.local_14, 2));
    while ((! .local_13))
    {
      if (.local_13)
      {
        .param_12 = (bvand(.local_16, .local_15) - (.param_12 + .local_16));
        .param_11 = (64 - .local_15);
      }
      else
      {
        .local_14 = (.param_12 / (- .param_12));
      }
      if ((.param_11 > 60))
      {
        .param_11 = (bvor(0, .local_16) + .local_16);
      }
      else
      {
        .param_11 = (-7 / .local_16);
      }
    }
  }
  for (.local_14 = 5 to 7)
  {
    for (.local_17 = 0 to 3 step 2)
    {
      .local_18 = .param_11;
      .param_12 = ((.local_14 % (2 - .local_18)) + 64);
      .param_12 = (bvxor(.local_14, .local_14) / (- .param_12));
      if (((1 + .local_17) <= 2))
      {
        .local_18 = .param_11;
        .param_12 = ((.local_14 % (2 - .local_18)) + 64);
        .param_12 = (bvxor(.local_14, .local_14) / (- .param_12));
      }
    }
  }
  .param_11 = bvxor(16, bvor(5, .param_12));
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
ensures (.ret_1 == .ret_10);

