declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 9;
  .local_7 = -2;
  .local_8 = (- (.local_4 % .local_4));
  .local_5 = ((.local_4 % .local_4) / .local_4);
  .local_6 = (bvxor(.local_4, .local_4) + bvor((.local_4 * 64), 4));
  for (.local_8 = 2 to 4)
  {
    .local_6 = bvxor(bvand(.local_4, 0), (.param_3 + .local_6));
    .local_5 = ((-16 * bvand(32, .local_7)) + (bvor(.local_8,
     2) % (.local_4 + (.local_4 + (.local_4 + (.local_4 + (.local_4 + .local_4)))))));
  }
  for (.local_7 = 0 to 3)
  {
    .local_8 = .local_7;
    .local_5 = (bvand(.local_8, (.param_3 * 32)) - 10);
  }
  .param_3 = ((.local_4 + .local_4) % (.local_5 * .local_6));
  .local_4 = (64 * (.local_4 + .param_3));
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 9;
  .local_15 = -2;
  .local_16 = (- (.local_12 % .local_12));
  .local_13 = ((.local_12 % .local_12) / .local_12);
  .local_14 = (bvxor(.local_12, .local_12) + bvor((.local_12 * 64), 4));
  for (.local_16 = 2 to 4 step 2)
  {
    .local_14 = bvxor(bvand(.local_12, 0), (.param_11 + .local_14));
    .local_13 = ((-16 * bvand(32, .local_15)) + (bvor(.local_16,
     2) % (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12)))))));
    if (((1 + .local_16) <= 3))
    {
      .local_14 = bvxor(bvand(.local_12, 0), (.param_11 + .local_14));
      .local_13 = ((-16 * bvand(32, .local_15)) + (bvor((1 + .local_16),
       2) % (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12)))))));
    }
  }
  for (.local_15 = 0 to 3 step 2)
  {
    .local_16 = .local_15;
    .local_13 = (bvand(.local_16, (.param_11 * 32)) - 10);
    if (((1 + .local_15) <= 2))
    {
      .local_16 = (1 + .local_15);
      .local_13 = (bvand(.local_16, (.param_11 * 32)) - 10);
    }
  }
  .param_11 = ((.local_12 + .local_12) % (.local_13 * .local_14));
  .local_12 = (64 * (.local_12 + .param_11));
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

