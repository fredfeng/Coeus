declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_6 = (- .param_2);
  .param_2 = (- .param_2);
  .param_4 = ((- .local_6) - .param_4);
  while ((.param_3 && .param_3))
  {
    .local_7 = bvand(0, bvxor(32, .param_5));
    .local_8 = 0;
    while ((.local_8 < (.local_7 - .local_6)))
    {
      .param_4 = 40;
      .local_6 = -16;
      .local_8 = (.local_8 + 1);
    }
  }
  for (.local_6 = 0 to (.param_4 + 10))
  {
    .local_7 = bvxor((- bvxor(32, .local_6)), 2);
    .local_9 = 0;
    while ((.local_9 < .local_7))
    {
      .local_9 = (- .param_4);
      .param_2 = .local_9;
      .local_9 = (.local_9 + 1);
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12, int .param_13, int .param_14)
 returns (int .ret_10)
{
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_15 = (- .param_11);
  .param_11 = (- .param_11);
  .param_13 = ((- .local_15) - .param_13);
  while ((.param_12 && .param_12))
  {
    .local_16 = bvand(0, bvxor(32, .param_14));
    .local_17 = 0;
    while ((.local_17 <= ((.local_16 - .local_15) - 1)))
    {
      .param_13 = 40;
      .local_17 = (.local_17 + 1);
    }
    .local_17 = 0;
    while ((.local_17 <= ((.local_16 - .local_15) - 1)))
    {
      .local_15 = -16;
      .local_17 = (.local_17 + 1);
    }
  }
  for (.local_15 = 0 to (.param_13 + 10))
  {
    .local_16 = bvxor((- bvxor(32, .local_15)), 2);
    .local_18 = 0;
    while ((.local_18 <= (-1 + .local_16)))
    {
      .local_18 = (- .param_13);
      .param_11 = .local_18;
      .local_18 = (.local_18 + 1);
    }
  }
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
ensures (.ret_1 == .ret_10);

