declare int bvor(int, int);
declare int bvand(int, int);

procedure f0() returns (int .ret_1)
{
  bool .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_3 = 3;
  .local_2 = false;
  .local_7 = .local_3;
  .local_5 = bvor(.local_3, .local_3);
  .local_4 = (- .local_3);
  for (.local_5 = 0 to (- .local_4))
  {
    .local_6 = (.local_4 + .local_5);
    .local_3 = (- (.local_4 / 5));
    for (.local_7 = 0 to 1)
    {
      if (((.local_3 <= .local_7) && (! .local_2)))
      {
        .local_3 = (bvand(.local_4, .local_5) + (.local_6 * .local_6));
      }
      else
      {
        .local_3 = ((- (16 * .local_6)) * .local_5);
      }
    }
  }
  .ret_1 = .local_3;
}

procedure f1() returns (int .ret_8)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_10 = 3;
  .local_9 = false;
  .local_14 = .local_10;
  .local_12 = bvor(.local_10, .local_10);
  .local_11 = (- .local_10);
  for (.local_12 = 0 to (- .local_11))
  {
    .local_13 = (.local_11 + .local_12);
    .local_10 = (- (.local_11 / 5));
    for (.local_14 = 0 to 1 step 2)
    {
      if (((.local_10 <= .local_14) && (! .local_9)))
      {
        .local_10 = (bvand(.local_11, .local_12) + (.local_13 * .local_13));
      }
      else
      {
        .local_10 = ((- (16 * .local_13)) * .local_12);
      }
      if (((1 + .local_14) <= 0))
      {
        if (((.local_10 <= (1 + .local_14)) && (! .local_9)))
        {
          .local_10 = (bvand(.local_11, .local_12) + (.local_13 * .local_13));
        }
        else
        {
          .local_10 = ((- (16 * .local_13)) * .local_12);
        }
      }
    }
  }
  .ret_8 = .local_10;
}

$lentry f0;
$rentry f1;

ensures (.ret_1 == .ret_8);

