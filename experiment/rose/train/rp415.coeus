declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  bool .local_6;
  int .local_7;
  .local_5 = 0;
  .local_7 = .local_5;
  for (.param_3 = 0 to 70)
  {
    .local_6 = .param_2;
    for (.local_7 = 0 to (- .local_5))
    {
      .local_5 = 0;
      if ((.local_6 && .local_6))
      {
        .param_4 = bvand(bvxor(.local_7, .param_3), bvxor(.local_5,
         .local_7));
      }
      else
      {
        .param_4 = .local_5;
      }
    }
  }
  .local_5 = .param_4;
  .param_4 = bvand(16, .local_5);
  .local_5 = 32;
  .local_5 = (.local_5 - (.param_4 * .param_4));
  .ret_1 = .local_5;
}

procedure f1(bool .param_9, int .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  bool .local_13;
  int .local_14;
  .local_12 = 0;
  .local_14 = .local_12;
  for (.param_10 = 0 to 70)
  {
    .local_13 = .param_9;
    for (.local_14 = 0 to ((-1 - .local_12) + 1))
    {
      .local_12 = 0;
    }
    for (.local_14 = 0 to ((-1 - .local_12) + 1))
    {
      if ((.local_13 && .local_13))
      {
        .param_11 = bvand(bvxor(.local_14, .param_10), bvxor(.local_12,
         .local_14));
      }
      else
      {
        .param_11 = .local_12;
      }
    }
  }
  .local_12 = .param_11;
  .param_11 = bvand(16, .local_12);
  .local_12 = 32;
  .local_12 = (.local_12 - (.param_11 * .param_11));
  .ret_8 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

