declare int bvxor(int, int);

procedure f0(int .param_2, int .param_3, bool .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_5 = true;
  while ((.param_4 == false))
  {
    .local_6 = (0 * .param_3);
    .local_5 = (! (.local_5 != .local_5));
    while (.local_5)
    {
      .local_7 = 0;
      while ((.local_7 < .param_3))
      {
        .local_5 = .param_4;
        .local_6 = (((- .param_3) + .local_6) + 10);
        .local_7 = (.local_7 + 1);
      }
      if ((bvxor(.param_3, .param_3) < (- .local_6)))
      {
        .param_3 = ((.param_3 % .param_3) * 64);
        .param_4 = (.param_2 < .param_3);
      }
      else
      {
        .param_3 = .param_2;
        .local_5 = .param_4;
      }
    }
  }
  .param_2 = .param_3;
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10, bool .param_11) returns
 (int .ret_8)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_12 = true;
  while ((.param_11 == false))
  {
    .local_13 = (0 * .param_10);
    .local_12 = (! (.local_12 != .local_12));
    while (.local_12)
    {
      .local_14 = 0;
      while ((.local_14 <= (-1 + .param_10)))
      {
        .local_12 = .param_11;
        .local_14 = (.local_14 + 1);
      }
      .local_14 = 0;
      while ((.local_14 <= (-1 + .param_10)))
      {
        .local_13 = (((- .param_10) + .local_13) + 10);
        .local_14 = (.local_14 + 1);
      }
      if ((bvxor(.param_10, .param_10) < (- .local_13)))
      {
        .param_10 = ((.param_10 % .param_10) * 64);
        .param_11 = (.param_9 < .param_10);
      }
      else
      {
        .param_10 = .param_9;
        .local_12 = .param_11;
      }
    }
  }
  .param_9 = .param_10;
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

