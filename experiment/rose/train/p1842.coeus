declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  .local_4 = .param_2;
  .param_2 = (26 + (.param_2 + bvxor(.param_2, 1)));
  for (.local_5 = 1 to 64)
  {
    .local_4 = 64;
  }
  if (.param_3)
  {
    .param_2 = .local_4;
  }
  else
  {
    .param_2 = (bvor(bvand(.local_4, .local_4),
     (- .local_4)) * bvor((.param_2 + 3), 2));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_7, bool .param_8) returns (int .ret_6)
{
  int .local_9;
  int .local_10;
  .local_9 = .param_7;
  .param_7 = (26 + (.param_7 + bvxor(.param_7, 1)));
  for (.local_10 = 1 to 64 step 2)
  {
    .local_9 = 64;
    if (((1 + .local_10) <= 63))
    {
      .local_9 = 64;
    }
  }
  if (.param_8)
  {
    .param_7 = .local_9;
  }
  else
  {
    .param_7 = (bvor(bvand(.local_9, .local_9),
     (- .local_9)) * bvor((.param_7 + 3), 2));
  }
  .ret_6 = .param_7;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_7);
requires (.param_3 == .param_8);
ensures (.ret_1 == .ret_6);

