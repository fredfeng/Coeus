declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = .param_2;
  for (.local_6 = 0 to (.param_2 * .param_4))
  {
    .param_5 = (bvxor(.local_6, .param_4) - 4);
    .param_2 = -20;
  }
  while (((2 >= .param_5) && (16 <= .param_5)))
  {
    for (.local_7 = 0 to 1)
    {
      .param_2 = -1;
    }
  }
  if (.param_3)
  {
    .local_6 = .param_5;
    .param_2 = (((- .param_2) + ((- .param_2) + ((- .param_2) + ((- .param_2) - .param_2)))) / bvand((.param_5 % .local_6),
     bvxor(.param_5, .local_6)));
  }
  else
  {
    while (.param_3)
    {
      .param_5 = .param_2;
    }
    while (.param_3)
    {
      .param_2 = 16;
      for (.local_8 = 9 downto 64)
      {
        .param_3 = ((.param_5 >= 7) == .param_3);
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = .param_10;
  for (.local_14 = 0 to ((-1 + (.param_10 * .param_12)) + 1))
  {
    .param_13 = (bvxor(.local_14, .param_12) - 4);
  }
  for (.local_14 = 0 to ((-1 + (.param_10 * .param_12)) + 1))
  {
    .param_10 = -20;
  }
  while (((2 >= .param_13) && (16 <= .param_13)))
  {
    for (.local_15 = 0 to 1)
    {
      .param_10 = -1;
    }
  }
  if (.param_11)
  {
    .local_14 = .param_13;
    .param_10 = (((- .param_10) + ((- .param_10) + ((- .param_10) + ((- .param_10) - .param_10)))) / bvand((.param_13 % .local_14),
     bvxor(.param_13, .local_14)));
  }
  else
  {
    while (.param_11)
    {
      .param_13 = .param_10;
    }
    while (.param_11)
    {
      .param_10 = 16;
      for (.local_16 = 9 downto 64)
      {
        .param_11 = ((.param_13 >= 7) == .param_11);
      }
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

