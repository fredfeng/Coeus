declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  .local_6 = 1;
  .local_5 = 9;
  for (.local_6 = 2 to 32)
  {
    .param_4 = (- (16 - .param_2));
    .param_2 = (bvxor(.param_4, .local_6) * .param_4);
    .param_2 = (((.param_2 % 4) % (.param_2 - .local_5)) - .local_6);
  }
  .local_5 = ((.local_5 % .local_5) + bvor(.param_2, .param_2));
  .param_2 = (0 / bvor(10, .local_5));
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9, int .param_10) returns (int .ret_7)
{
  int .local_11;
  int .local_12;
  .local_12 = 1;
  .local_11 = 9;
  for (.local_12 = 2 to 32 step 2)
  {
    .param_10 = (- (16 - .param_8));
    .param_8 = (bvxor(.param_10, .local_12) * .param_10);
    .param_8 = (((.param_8 % 4) % (.param_8 - .local_11)) - .local_12);
    if (((1 + .local_12) <= 31))
    {
      .param_10 = (- (16 - .param_8));
      .param_8 = (bvxor(.param_10, (1 + .local_12)) * .param_10);
      .param_8 = (((.param_8 % 4) % (.param_8 - .local_11)) - (1 + .local_12));
    }
  }
  .local_11 = ((.local_11 % .local_11) + bvor(.param_8, .param_8));
  .param_8 = (0 / bvor(10, .local_11));
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
requires (.param_4 == .param_10);
ensures (.ret_1 == .ret_7);

