declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  bool .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  .local_8 = ((- .param_2) + ((- .param_2) + ((- .param_2) - .param_2)));
  .local_11 = .param_2;
  .local_7 = .local_8;
  if (.param_3)
  {
    .param_2 = bvxor(0, .local_7);
  }
  else
  {
    .local_9 = 3;
    .local_10 = (2 - .param_5);
    for (.param_4 = 0 to 0)
    {
      .local_8 = (- .local_8);
      if (.param_3)
      {
        .param_2 = (bvor(.local_9,
         (.local_8 + .local_7)) + (.local_8 - .param_4));
      }
      else
      {
        .local_7 = (.local_11 + .param_4);
      }
    }
    for (.local_11 = 7 to 64)
    {
      .local_6 = ((- (.local_10 % .local_7)) <= (2 % bvor(.local_7, 0)));
      if (.local_6)
      {
        .param_2 = (.param_2 * -32);
      }
      else
      {
        .param_2 = .local_11;
        .param_2 = (- (64 + .param_2));
      }
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_13, bool .param_14, int .param_15, int .param_16)
 returns (int .ret_12)
{
  bool .local_17;
  int .local_18;
  int .local_19;
  int .local_20;
  int .local_21;
  int .local_22;
  .local_19 = ((- .param_13) + ((- .param_13) + ((- .param_13) - .param_13)));
  .local_22 = .param_13;
  .local_18 = .local_19;
  if (.param_14)
  {
    .param_13 = bvxor(0, .local_18);
  }
  else
  {
    .local_20 = 3;
    .local_21 = (2 - .param_16);
    for (.param_15 = 0 to 0 step 2)
    {
      .local_19 = (- .local_19);
      if (.param_14)
      {
        .param_13 = (bvor(.local_20,
         (.local_19 + .local_18)) + (.local_19 - .param_15));
      }
      else
      {
        .local_18 = (.local_22 + .param_15);
      }
      if (((1 + .param_15) <= -1))
      {
        .local_19 = (- .local_19);
        if (.param_14)
        {
          .param_13 = (bvor(.local_20,
           (.local_19 + .local_18)) + (.local_19 - (1 + .param_15)));
        }
        else
        {
          .local_18 = (.local_22 + (1 + .param_15));
        }
      }
    }
    for (.local_22 = 7 to 64 step 2)
    {
      .local_17 = ((- (.local_21 % .local_18)) <= (2 % bvor(.local_18, 0)));
      if (.local_17)
      {
        .param_13 = (.param_13 * -32);
      }
      else
      {
        .param_13 = .local_22;
        .param_13 = (- (64 + .param_13));
      }
      if (((1 + .local_22) <= 63))
      {
        .local_17 = ((- (.local_21 % .local_18)) <= (2 % bvor(.local_18, 0)));
        if (.local_17)
        {
          .param_13 = (.param_13 * -32);
        }
        else
        {
          .param_13 = (1 + .local_22);
          .param_13 = (- (64 + .param_13));
        }
      }
    }
  }
  .ret_12 = .param_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_13);
requires (.param_3 == .param_14);
requires (.param_4 == .param_15);
requires (.param_5 == .param_16);
ensures (.ret_1 == .ret_12);

