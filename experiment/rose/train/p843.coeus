declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = 5;
  .local_5 = true;
  .local_7 = (.local_6 / (- .local_6));
  for (.param_3 = 0 to .param_4)
  {
    .local_8 = bvor((.local_6 - .local_7), bvor(.local_7, .param_4));
    for (.param_2 = 0 to (- .param_4))
    {
      .param_4 = bvxor(.param_2, (.local_8 * 32));
      .local_7 = (- (1 + bvor(.param_4, .param_3)));
    }
    .local_6 = .local_7;
  }
  for (.param_4 = 0 to 64)
  {
    .local_8 = (- (32 - .local_6));
    .local_6 = .local_8;
  }
  .ret_1 = .local_6;
}

procedure f1(int .param_10, int .param_11, int .param_12) returns
 (int .ret_9)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = 5;
  .local_13 = true;
  .local_15 = (.local_14 / (- .local_14));
  for (.param_11 = 0 to .param_12)
  {
    .local_16 = bvor((.local_14 - .local_15), bvor(.local_15, .param_12));
    for (.param_10 = 0 to ((-1 - .param_12) + 1) step 2)
    {
      .param_12 = bvxor(.param_10, (.local_16 * 32));
      .local_15 = (- (1 + bvor(.param_12, .param_11)));
      if (((1 + .param_10) <= (-1 - .param_12)))
      {
        .param_12 = bvxor((1 + .param_10), (.local_16 * 32));
        .local_15 = (- (1 + bvor(.param_12, .param_11)));
      }
    }
    if ((.param_10 <= (-1 - .param_12)))
    {
      .param_12 = bvxor(.param_10, (.local_16 * 32));
      .local_15 = (- (1 + bvor(.param_12, .param_11)));
      if (((1 + .param_10) <= (-1 - .param_12)))
      {
        .param_12 = bvxor((1 + .param_10), (.local_16 * 32));
        .local_15 = (- (1 + bvor(.param_12, .param_11)));
      }
    }
    .local_14 = .local_15;
  }
  for (.param_12 = 0 to 64 step 2)
  {
    .local_16 = (- (32 - .local_14));
    .local_14 = .local_16;
    if (((1 + .param_12) <= 63))
    {
      .local_16 = (- (32 - .local_14));
      .local_14 = .local_16;
    }
  }
  .ret_9 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
ensures (.ret_1 == .ret_9);

