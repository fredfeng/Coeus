declare int bvxor(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = 2;
  for (.local_5 = 0 to .local_4)
  {
    .local_7 = 0;
    while ((.local_7 < bvxor(3, .param_3)))
    {
      .local_7 = .local_4;
      .local_4 = 0;
      .local_7 = (.local_7 + 1);
    }
    .param_2 = (! .param_2);
  }
  while (.param_2)
  {
    .local_5 = ((.param_3 / bvxor(9, .local_4)) + 8);
    .local_4 = (((.param_3 % 1) * (.local_5 % 9)) / .param_3);
    for (.local_6 = 0 to .param_3)
    {
      for (.local_7 = 0 to 0)
      {
        .local_4 = (bvxor(3, .local_4) + .local_4);
      }
    }
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_9, int .param_10) returns (int .ret_8)
{
  int .local_11;
  int .local_12;
  int .local_14;
  .local_11 = 2;
  for (.local_12 = 0 to ((-1 + .local_11) + 1))
  {
    .local_14 = 0;
    while ((.local_14 <= (-1 + bvxor(3, .param_10))))
    {
      .local_14 = .local_11;
      .local_11 = 0;
      .local_14 = (.local_14 + 1);
    }
  }
  for (.local_12 = 0 to ((-1 + .local_11) + 1))
  {
    .param_9 = (! .param_9);
  }
  while (.param_9)
  {
    .local_12 = ((.param_10 / bvxor(9, .local_11)) + 8);
    .local_11 = (((.param_10 % 1) * (.local_12 % 9)) / .param_10);
  }
  .ret_8 = .local_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

