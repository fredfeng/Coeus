declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = false;
  .local_7 = .param_2;
  .local_5 = 9;
  .local_6 = ((- bvand(.param_2, 7)) * (bvxor(.param_2, .param_2) + 2));
  while ((.local_4 && (.local_4 || .local_4)))
  {
    .param_3 = 8;
    while (.local_4)
    {
      .param_2 = ((.local_6 / .local_5) + bvor(.param_3, 5));
    }
  }
  if (.local_4)
  {
    .param_2 = bvand(0,
     (.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5)))));
  }
  else
  {
    while (.local_4)
    {
      .local_7 = .param_2;
      .param_3 = (bvor(.local_7, 1) + .param_2);
    }
    for (.local_7 = 0 to (.param_2 - .param_3))
    {
      .param_2 = bvor(.param_2, .local_7);
      .local_4 = (.local_4 && (.param_3 >= 3));
    }
    while (.local_4)
    {
      .local_4 = (! (.local_4 || .local_4));
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10) returns (int .ret_8)
{
  bool .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_11 = false;
  .local_14 = .param_9;
  .local_12 = 9;
  .local_13 = ((- bvand(.param_9, 7)) * (bvxor(.param_9, .param_9) + 2));
  while ((.local_11 && (.local_11 || .local_11)))
  {
    .param_10 = 8;
    while (.local_11)
    {
      .param_9 = ((.local_13 / .local_12) + bvor(.param_10, 5));
    }
  }
  if (.local_11)
  {
    .param_9 = bvand(0,
     (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12)))));
  }
  else
  {
    while (.local_11)
    {
      .local_14 = .param_9;
      .param_10 = (bvor(.local_14, 1) + .param_9);
    }
    for (.local_14 = 0 to (.param_9 - .param_10))
    {
      .param_9 = bvor(.param_9, .local_14);
    }
    for (.local_14 = 0 to (.param_9 - .param_10))
    {
      .local_11 = (.local_11 && (.param_10 >= 3));
    }
    while (.local_11)
    {
      .local_11 = (! (.local_11 || .local_11));
    }
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
ensures (.ret_1 == .ret_8);

