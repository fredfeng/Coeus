declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_3 = true;
  .local_4 = .param_2;
  for (.local_5 = 0 to (.param_2 % .local_4))
  {
    .local_6 = (.param_2 * -9);
    if (.local_3)
    {
      while ((! .local_3))
      {
        .param_2 = 16;
        .local_4 = .local_6;
      }
    }
    else
    {
      .local_7 = (bvand(.local_4, 2) - .param_2);
      .param_2 = .local_7;
    }
    .local_4 = ((.local_4 % .local_6) - (5 - .param_2));
  }
  .param_2 = .local_4;
  for (.local_4 = 0 to 10)
  {
    .param_2 = (9 + .param_2);
    .param_2 = (.param_2 + 3);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9) returns (int .ret_8)
{
  bool .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_10 = true;
  .local_11 = .param_9;
  for (.local_12 = 0 to (.param_9 % .local_11))
  {
    .local_13 = (.param_9 * -9);
    if (.local_10)
    {
      while ((! .local_10))
      {
        .param_9 = 16;
        .local_11 = .local_13;
      }
    }
    else
    {
      .local_14 = (bvand(.local_11, 2) - .param_9);
      .param_9 = .local_14;
    }
    .local_11 = ((.local_11 % .local_13) - (5 - .param_9));
  }
  .param_9 = .local_11;
  for (.local_11 = 0 to 10 step 2)
  {
    .param_9 = (9 + .param_9);
    .param_9 = (.param_9 + 3);
    if (((1 + .local_11) <= 9))
    {
      .param_9 = (9 + .param_9);
      .param_9 = (.param_9 + 3);
    }
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
ensures (.ret_1 == .ret_8);

