declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_4 = false;
  .local_7 = 1;
  .local_9 = .param_2;
  .local_5 = .param_2;
  .local_6 = ((.param_2 / bvxor(0, .param_2)) + 64);
  .param_3 = (bvxor(.local_7, 64) * .param_3);
  for (.local_7 = 0 to (.local_6 - .local_5))
  {
    .local_8 = bvxor(.local_6, (bvxor(1, .local_7) - .local_7));
    .local_6 = 2;
    for (.local_8 = 0 to bvand(.local_6, .param_2))
    {
      for (.local_9 = 0 to 64)
      {
        .param_2 = bvor(.param_2, (bvor(10, .local_8) + .local_9));
      }
    }
  }
  .param_2 = (.param_2 + .param_3);
  .ret_1 = .param_2;
}

procedure f1(int .param_11, int .param_12) returns (int .ret_10)
{
  bool .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_13 = false;
  .local_16 = 1;
  .local_18 = .param_11;
  .local_14 = .param_11;
  .local_15 = ((.param_11 / bvxor(0, .param_11)) + 64);
  .param_12 = (bvxor(.local_16, 64) * .param_12);
  for (.local_16 = 0 to (.local_15 - .local_14))
  {
    .local_17 = bvxor(.local_15, (bvxor(1, .local_16) - .local_16));
    .local_15 = 2;
    for (.local_17 = 0 to bvand(.local_15, .param_11))
    {
      for (.local_18 = 0 to 64 step 2)
      {
        .param_11 = bvor(.param_11, (bvor(10, .local_17) + .local_18));
        if (((1 + .local_18) <= 63))
        {
          .param_11 = bvor(.param_11, (bvor(10,
           .local_17) + (1 + .local_18)));
        }
      }
    }
  }
  .param_11 = (.param_11 + .param_12);
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
ensures (.ret_1 == .ret_10);

