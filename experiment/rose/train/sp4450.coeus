declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_6 = 0;
  .local_5 = true;
  .local_7 = ((- .local_6) - .local_6);
  for (.param_3 = 0 to -1)
  {
    .param_4 = bvxor((.param_3 % 256), ((0 / .local_6) + .param_4));
    .local_7 = (- bvor(.param_4, .param_3));
  }
  for (.param_2 = 0 to 5)
  {
    .local_6 = .param_2;
    .param_3 = (.local_6 - .param_4);
    .local_6 = (bvxor(bvxor(0, .param_3), -32) * bvand(.local_7, bvxor(2,
     .param_3)));
  }
  .ret_1 = .local_6;
}

procedure f1(int .param_9, int .param_10, int .param_11) returns (int .ret_8)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_13 = 0;
  .local_12 = true;
  .local_14 = ((- .local_13) - .local_13);
  for (.param_10 = 0 to -1 step 2)
  {
    .param_11 = bvxor((.param_10 % 256), ((0 / .local_13) + .param_11));
    .local_14 = (- bvor(.param_11, .param_10));
    if (((1 + .param_10) <= -2))
    {
      .param_11 = bvxor(((1 + .param_10) % 256),
       ((0 / .local_13) + .param_11));
      .local_14 = (- bvor(.param_11, (1 + .param_10)));
    }
  }
  for (.param_9 = 0 to 5 step 2)
  {
    .local_13 = .param_9;
    .param_10 = (.local_13 - .param_11);
    .local_13 = (bvxor(bvxor(0, .param_10), -32) * bvand(.local_14, bvxor(2,
     .param_10)));
    if (((1 + .param_9) <= 4))
    {
      .local_13 = (1 + .param_9);
      .param_10 = (.local_13 - .param_11);
      .local_13 = (bvxor(bvxor(0, .param_10), -32) * bvand(.local_14,
       bvxor(2, .param_10)));
    }
  }
  .ret_8 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

