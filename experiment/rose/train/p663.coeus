declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  .local_5 = 5;
  .local_6 = (- (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + (.local_5 + .local_5))))))))));
  .param_2 = (.param_2 == (.param_2 && .param_2));
  .param_4 = ((.param_4 % .local_5) % (.param_3 * .local_5));
  for (.local_6 = 0 to 7)
  {
    .local_7 = (- (.local_6 - .param_3));
    if (.param_2)
    {
      .local_5 = (bvxor((.local_6 - .local_7),
       (.local_6 - .local_7)) - .local_7);
    }
    else
    {
      .param_4 = 8;
      .param_3 = (- .param_3);
    }
    .local_5 = (bvxor((.local_5 % .param_3), .local_7) + (bvand(.param_4,
     .local_6) + 6));
    .local_5 = (- .local_5);
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_9, int .param_10, int .param_11) returns
 (int .ret_8)
{
  int .local_12;
  int .local_13;
  int .local_14;
  .local_12 = 5;
  .local_13 = (- (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12))))))))));
  .param_9 = (.param_9 == (.param_9 && .param_9));
  .param_11 = ((.param_11 % .local_12) % (.param_10 * .local_12));
  for (.local_13 = 0 to 7 step 2)
  {
    .local_14 = (- (.local_13 - .param_10));
    if (.param_9)
    {
      .local_12 = (bvxor((.local_13 - .local_14),
       (.local_13 - .local_14)) - .local_14);
    }
    else
    {
      .param_11 = 8;
      .param_10 = (- .param_10);
    }
    .local_12 = (bvxor((.local_12 % .param_10),
     .local_14) + (bvand(.param_11, .local_13) + 6));
    .local_12 = (- .local_12);
    if (((1 + .local_13) <= 6))
    {
      .local_14 = (- ((1 + .local_13) - .param_10));
      if (.param_9)
      {
        .local_12 = (bvxor(((1 + .local_13) - .local_14),
         ((1 + .local_13) - .local_14)) - .local_14);
      }
      else
      {
        .param_11 = 8;
        .param_10 = (- .param_10);
      }
      .local_12 = (bvxor((.local_12 % .param_10),
       .local_14) + (bvand(.param_11, (1 + .local_13)) + 6));
      .local_12 = (- .local_12);
    }
  }
  .ret_8 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

