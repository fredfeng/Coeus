declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_5 = 4;
  .local_4 = (- .param_2);
  for (.local_6 = 0 to (- .local_4))
  {
    .param_3 = (.param_3 && (.param_3 && .param_3));
    while (((.param_3 != .param_3) != (32 > .local_5)))
    {
      while (((.param_3 != .param_3) && (.param_3 && .param_3)))
      {
        .param_2 = (.local_5 * .local_4);
        .param_2 = bvor(.param_2, .local_5);
      }
    }
  }
  .local_4 = .local_5;
  for (.local_5 = 0 to 3)
  {
    .local_4 = (.local_5 - bvand(bvand(.param_2, .local_5),
     (.param_2 + .local_4)));
    .param_2 = ((.local_4 * .param_2) - .local_4);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_11 = 4;
  .local_10 = (- .param_8);
  for (.local_12 = 0 to (- .local_10))
  {
    .param_9 = (.param_9 && (.param_9 && .param_9));
    while (((.param_9 != .param_9) != (32 > .local_11)))
    {
      while (((.param_9 != .param_9) && (.param_9 && .param_9)))
      {
        .param_8 = (.local_11 * .local_10);
        .param_8 = bvor(.param_8, .local_11);
      }
    }
  }
  .local_10 = .local_11;
  for (.local_11 = 0 to 3 step 2)
  {
    .local_10 = (.local_11 - bvand(bvand(.param_8, .local_11),
     (.param_8 + .local_10)));
    .param_8 = ((.local_10 * .param_8) - .local_10);
    if (((1 + .local_11) <= 2))
    {
      .local_10 = ((1 + .local_11) - bvand(bvand(.param_8, (1 + .local_11)),
       (.param_8 + .local_10)));
      .param_8 = ((.local_10 * .param_8) - .local_10);
    }
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

