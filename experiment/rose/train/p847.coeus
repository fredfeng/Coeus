declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = 6;
  .local_4 = false;
  .local_7 = -66;
  .local_6 = 0;
  for (.local_7 = 4 to 9)
  {
    if (.local_4)
    {
      .local_8 = (- .local_6);
      .param_2 = (3 - .local_8);
    }
    else
    {
      if (.local_4)
      {
        .param_2 = (.param_3 - 9);
      }
      else
      {
        .local_5 = 65;
        .param_2 = bvand((- .local_7), bvor(64, .local_5));
      }
    }
    .local_5 = .local_5;
  }
  .local_5 = bvor((- (.local_6 % .param_2)), (7 + .local_5));
  .local_5 = ((64 % .local_5) % 32);
  .ret_1 = .local_5;
}

procedure f1(int .param_10, int .param_11) returns (int .ret_9)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = 6;
  .local_12 = false;
  .local_15 = -66;
  .local_14 = 0;
  for (.local_15 = 4 to 9 step 2)
  {
    if (.local_12)
    {
      .local_16 = (- .local_14);
      .param_10 = (3 - .local_16);
    }
    else
    {
      if (.local_12)
      {
        .param_10 = (.param_11 - 9);
      }
      else
      {
        .local_13 = 65;
        .param_10 = bvand((- .local_15), bvor(64, .local_13));
      }
    }
    .local_13 = .local_13;
    if (((1 + .local_15) <= 8))
    {
      if (.local_12)
      {
        .local_16 = (- .local_14);
        .param_10 = (3 - .local_16);
      }
      else
      {
        if (.local_12)
        {
          .param_10 = (.param_11 - 9);
        }
        else
        {
          .local_13 = 65;
          .param_10 = bvand((- (1 + .local_15)), bvor(64, .local_13));
        }
      }
      .local_13 = .local_13;
    }
  }
  .local_13 = bvor((- (.local_14 % .param_10)), (7 + .local_13));
  .local_13 = ((64 % .local_13) % 32);
  .ret_9 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

