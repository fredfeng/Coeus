declare int bvxor(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 1;
  .local_5 = 1;
  .local_4 = bvxor((.local_4 + (.local_4 + (.local_4 + (.local_4 + (.local_4 + (.local_4 + .local_4)))))),
   (.local_5 * .local_4));
  for (.local_6 = 3 to 7)
  {
    for (.local_7 = 0 to 32)
    {
      for (.local_8 = 0 to 0)
      {
        .param_3 = (.local_5 + (.local_5 % .param_3));
      }
    }
    .local_4 = (- .param_3);
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 1;
  .local_13 = 1;
  .local_12 = bvxor((.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + (.local_12 + .local_12)))))),
   (.local_13 * .local_12));
  for (.local_14 = 3 to 7)
  {
    for (.local_15 = 0 to 32)
    {
      for (.local_16 = 0 to 0 step 2)
      {
        .param_11 = (.local_13 + (.local_13 % .param_11));
        if (((1 + .local_16) <= -1))
        {
          .param_11 = (.local_13 + (.local_13 % .param_11));
        }
      }
    }
    .local_12 = (- .param_11);
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

