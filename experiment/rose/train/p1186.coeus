declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_3 = false;
  .local_4 = bvor(.param_2, 3);
  .local_6 = (((- .local_4) + ((- .local_4) + ((- .local_4) + ((- .local_4) + ((- .local_4) + ((- .local_4) + ((- .local_4) + ((- .local_4) + ((- .local_4) - .local_4))))))))) - bvand(bvor(.local_4,
   1), (.local_4 - 64)));
  for (.local_4 = 0 to bvor(.param_2, 1))
  {
    .local_5 = 3;
    while ((.local_4 == 64))
    {
      if ((.local_6 <= bvor(.local_4, .param_2)))
      {
        .param_2 = bvor(.local_4, .param_2);
      }
      else
      {
        .local_6 = bvxor(.local_5, (- .param_2));
        .local_5 = .local_6;
      }
    }
    for (.local_6 = 3 to 3)
    {
      .param_2 = .local_5;
    }
  }
  .param_2 = bvxor(bvand((64 * .param_2), (.param_2 + .param_2)), 1);
  .ret_1 = .param_2;
}

procedure f1(int .param_8) returns (int .ret_7)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  .local_9 = false;
  .local_10 = bvor(.param_8, 3);
  .local_12 = (((- .local_10) + ((- .local_10) + ((- .local_10) + ((- .local_10) + ((- .local_10) + ((- .local_10) + ((- .local_10) + ((- .local_10) + ((- .local_10) - .local_10))))))))) - bvand(bvor(.local_10,
   1), (.local_10 - 64)));
  for (.local_10 = 0 to bvor(.param_8, 1))
  {
    .local_11 = 3;
    while ((.local_10 == 64))
    {
      if ((.local_12 <= bvor(.local_10, .param_8)))
      {
        .param_8 = bvor(.local_10, .param_8);
      }
      else
      {
        .local_12 = bvxor(.local_11, (- .param_8));
        .local_11 = .local_12;
      }
    }
    for (.local_12 = 3 to 3 step 2)
    {
      .param_8 = .local_11;
      if (((1 + .local_12) <= 2))
      {
        .param_8 = .local_11;
      }
    }
  }
  .param_8 = bvxor(bvand((64 * .param_8), (.param_8 + .param_8)), 1);
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
ensures (.ret_1 == .ret_7);

