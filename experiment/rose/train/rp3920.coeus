declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  bool .local_5;
  int .local_6;
  bool .local_7;
  int .local_8;
  .local_4 = bvand(1, .param_2);
  .local_5 = true;
  while (.param_3)
  {
    .local_6 = (.param_2 - 32);
    .local_7 = (bvand(.param_2, .local_4) == (- .local_4));
    .param_3 = (! .local_5);
    .param_2 = (- bvxor((.param_2 + (.param_2 + (.param_2 + (.param_2 + (.param_2 + .param_2))))),
     (.local_4 / 32)));
    .local_8 = 0;
    while ((.local_8 < (- .param_2)))
    {
      .param_2 = (.local_6 + (5 + .local_4));
      .param_3 = ((! .local_5) && .local_7);
      .local_8 = (.local_8 + 1);
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11) returns (int .ret_9)
{
  int .local_12;
  bool .local_13;
  int .local_14;
  bool .local_15;
  int .local_16;
  .local_12 = bvand(1, .param_10);
  .local_13 = true;
  while (.param_11)
  {
    .local_14 = (.param_10 - 32);
    .local_15 = (bvand(.param_10, .local_12) == (- .local_12));
    .param_11 = (! .local_13);
    .param_10 = (- bvxor((.param_10 + (.param_10 + (.param_10 + (.param_10 + (.param_10 + .param_10))))),
     (.local_12 / 32)));
    .local_16 = 0;
    while ((.local_16 <= (-1 - .param_10)))
    {
      .param_10 = (.local_14 + (5 + .local_12));
      .local_16 = (.local_16 + 1);
    }
    .local_16 = 0;
    while ((.local_16 <= (-1 - .param_10)))
    {
      .param_11 = ((! .local_13) && .local_15);
      .local_16 = (.local_16 + 1);
    }
  }
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

