declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  .local_6 = bvand(0, (- .param_2));
  for (.param_4 = 0 to 6)
  {
    .local_7 = (bvand(.param_2, .param_4) / 2);
    .param_5 = ((.local_7 * .local_6) * .param_4);
    .local_6 = 2;
  }
  while (((.param_2 + 8) == bvand(.param_2, .param_5)))
  {
    .param_4 = .param_2;
    while (((- .param_4) == 17))
    {
      .param_4 = .local_6;
      .param_5 = .local_6;
    }
    .param_2 = bvand((- .local_6), .param_5);
  }
  .param_2 = .param_5;
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11, int .param_12)
 returns (int .ret_8)
{
  int .local_13;
  int .local_14;
  .local_13 = bvand(0, (- .param_9));
  for (.param_11 = 0 to 6 step 2)
  {
    .local_14 = (bvand(.param_9, .param_11) / 2);
    .param_12 = ((.local_14 * .local_13) * .param_11);
    .local_13 = 2;
    if (((1 + .param_11) <= 5))
    {
      .local_14 = (bvand(.param_9, (1 + .param_11)) / 2);
      .param_12 = ((.local_14 * .local_13) * (1 + .param_11));
      .local_13 = 2;
    }
  }
  while (((.param_9 + 8) == bvand(.param_9, .param_12)))
  {
    .param_11 = .param_9;
    while (((- .param_11) == 17))
    {
      .param_11 = .local_13;
      .param_12 = .local_13;
    }
    .param_9 = bvand((- .local_13), .param_12);
  }
  .param_9 = .param_12;
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
requires (.param_5 == .param_12);
ensures (.ret_1 == .ret_8);

