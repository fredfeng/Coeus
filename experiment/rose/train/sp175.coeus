declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = bvand(.param_2, .param_2);
  for (.local_4 = 3 downto 5)
  {
    .param_2 = (((- .param_2) + (.local_4 + (.local_4 + (.local_4 + .local_4)))) - 5);
  }
  if (.param_3)
  {
    .local_4 = 2;
    for (.local_5 = 0 to 48)
    {
      .local_6 = .param_2;
      if (.param_3)
      {
        .param_2 = -1;
      }
      else
      {
        .local_4 = 0;
      }
      .param_2 = bvand((.param_2 + .local_6), bvxor(.local_4, 4));
    }
  }
  else
  {
    .local_4 = ((.param_2 + 64) - (.param_2 % 16));
    while ((.param_2 == 32))
    {
      .local_5 = (32 % (bvand(.param_2, .param_2) + (.local_4 + .local_4)));
      .local_4 = bvand(.local_4, .local_5);
      if ((8 == .param_2))
      {
        .local_4 = bvor((- .local_4), (.local_5 - .param_2));
        .param_2 = 6;
      }
      else
      {
        .local_4 = 0;
        .param_2 = 5;
      }
    }
    .param_2 = (3 + .local_4);
  }
  .param_2 = bvxor(.param_2, (7 + .param_2));
  .param_2 = bvxor((.param_2 % .param_2), bvand(.param_2, .param_2));
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = bvand(.param_8, .param_8);
  for (.local_10 = 3 downto 5)
  {
    .param_8 = (((- .param_8) + (.local_10 + (.local_10 + (.local_10 + .local_10)))) - 5);
  }
  if (.param_9)
  {
    .local_10 = 2;
    for (.local_11 = 0 to 48 step 2)
    {
      .local_12 = .param_8;
      if (.param_9)
      {
        .param_8 = -1;
      }
      else
      {
        .local_10 = 0;
      }
      .param_8 = bvand((.param_8 + .local_12), bvxor(.local_10, 4));
      if (((1 + .local_11) <= 47))
      {
        .local_12 = .param_8;
        if (.param_9)
        {
          .param_8 = -1;
        }
        else
        {
          .local_10 = 0;
        }
        .param_8 = bvand((.param_8 + .local_12), bvxor(.local_10, 4));
      }
    }
  }
  else
  {
    .local_10 = ((.param_8 + 64) - (.param_8 % 16));
    while ((.param_8 == 32))
    {
      .local_11 = (32 % (bvand(.param_8,
       .param_8) + (.local_10 + .local_10)));
      .local_10 = bvand(.local_10, .local_11);
      if ((8 == .param_8))
      {
        .local_10 = bvor((- .local_10), (.local_11 - .param_8));
        .param_8 = 6;
      }
      else
      {
        .local_10 = 0;
        .param_8 = 5;
      }
    }
    .param_8 = (3 + .local_10);
  }
  .param_8 = bvxor(.param_8, (7 + .param_8));
  .param_8 = bvxor((.param_8 % .param_8), bvand(.param_8, .param_8));
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

