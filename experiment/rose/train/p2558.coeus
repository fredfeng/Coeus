declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_6 = (bvor(.param_2, 32) + .param_2);
  .local_5 = (bvor(2, .param_2) % bvand(64, .param_2));
  for (.local_4 = 0 to 10)
  {
    for (.local_6 = 0 to 3)
    {
      .param_2 = (- (32 * (64 * .local_5)));
      .local_5 = .local_6;
    }
    for (.local_5 = 6 downto 1)
    {
      while (.param_3)
      {
        .param_3 = (.param_3 && (.param_2 != 6));
        .param_2 = (8 + (bvor(.local_5, 7) + 8));
      }
    }
  }
  .param_2 = (- .param_2);
  .param_2 = (.param_2 * (.param_2 + 64));
  .ret_1 = .param_2;
}

procedure f1(int .param_8, bool .param_9) returns (int .ret_7)
{
  int .local_10;
  int .local_11;
  int .local_12;
  .local_12 = (bvor(.param_8, 32) + .param_8);
  .local_11 = (bvor(2, .param_8) % bvand(64, .param_8));
  for (.local_10 = 0 to 10)
  {
    for (.local_12 = 0 to 3 step 2)
    {
      .param_8 = (- (32 * (64 * .local_11)));
      .local_11 = .local_12;
      if (((1 + .local_12) <= 2))
      {
        .param_8 = (- (32 * (64 * .local_11)));
        .local_11 = (1 + .local_12);
      }
    }
    for (.local_11 = 6 downto 1)
    {
      while (.param_9)
      {
        .param_9 = (.param_9 && (.param_8 != 6));
        .param_8 = (8 + (bvor(.local_11, 7) + 8));
      }
    }
  }
  .param_8 = (- .param_8);
  .param_8 = (.param_8 * (.param_8 + 64));
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
requires (.param_3 == .param_9);
ensures (.ret_1 == .ret_7);

