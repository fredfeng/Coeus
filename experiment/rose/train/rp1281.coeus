declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  bool .local_6;
  int .local_7;
  int .local_8;
  .local_7 = 6;
  .local_6 = false;
  for (.local_8 = 0 to (.param_3 + .param_3))
  {
    .param_3 = (bvxor(3, .param_4) * 17);
    .param_2 = .local_7;
  }
  for (.param_2 = 9 downto 2)
  {
    .param_5 = ((- (.param_2 * .param_4)) - (.param_2 - .param_5));
    .local_7 = bvor((- .param_4), bvand((- .param_5), .param_3));
  }
  .ret_1 = .local_7;
}

procedure f1(int .param_10, int .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  bool .local_14;
  int .local_15;
  int .local_16;
  .local_15 = 6;
  .local_14 = false;
  for (.local_16 = 0 to ((-1 + (.param_11 + .param_11)) + 1))
  {
    .param_11 = (bvxor(3, .param_12) * 17);
  }
  for (.local_16 = 0 to ((-1 + (.param_11 + .param_11)) + 1))
  {
    .param_10 = .local_15;
  }
  for (.param_10 = 9 downto 2)
  {
    .param_13 = ((- (.param_10 * .param_12)) - (.param_10 - .param_13));
    .local_15 = bvor((- .param_12), bvand((- .param_13), .param_11));
  }
  .ret_9 = .local_15;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

