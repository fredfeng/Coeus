declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = 16;
  .local_3 = false;
  if (.local_3)
  {
    .local_5 = bvor(((- .local_4) - .param_2), (.local_4 % 90));
    .local_4 = bvor(.local_4,
     ((.param_2 % .local_5) + ((.param_2 % .local_5) + ((.param_2 % .local_5) + ((.param_2 % .local_5) + ((.param_2 % .local_5) + ((.param_2 % .local_5) + ((.param_2 % .local_5) + (.param_2 % .local_5)))))))));
  }
  else
  {
    while (.local_3)
    {
      for (.local_6 = 10 downto 3)
      {
        .param_2 = .local_4;
        .local_4 = .param_2;
      }
    }
    for (.local_5 = 1 to 64)
    {
      .local_6 = (- bvand(.local_4, 4));
      .local_4 = bvand(1, .local_6);
    }
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_8) returns (int .ret_7)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = 16;
  .local_9 = false;
  if (.local_9)
  {
    .local_11 = bvor(((- .local_10) - .param_8), (.local_10 % 90));
    .local_10 = bvor(.local_10,
     ((.param_8 % .local_11) + ((.param_8 % .local_11) + ((.param_8 % .local_11) + ((.param_8 % .local_11) + ((.param_8 % .local_11) + ((.param_8 % .local_11) + ((.param_8 % .local_11) + (.param_8 % .local_11)))))))));
  }
  else
  {
    while (.local_9)
    {
      for (.local_12 = 10 downto 3)
      {
        .param_8 = .local_10;
        .local_10 = .param_8;
      }
    }
    for (.local_11 = 1 to 64 step 2)
    {
      .local_12 = (- bvand(.local_10, 4));
      .local_10 = bvand(1, .local_12);
      if (((1 + .local_11) <= 63))
      {
        .local_12 = (- bvand(.local_10, 4));
        .local_10 = bvand(1, .local_12);
      }
    }
  }
  .ret_7 = .local_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
ensures (.ret_1 == .ret_7);

