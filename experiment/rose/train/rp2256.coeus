declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = bvand((.param_2 + .param_2), 1);
  .local_6 = (.param_2 * .param_2);
  .local_9 = 8;
  .param_4 = 0;
  while ((.param_4 < (.local_6 - .param_2)))
  {
    .local_7 = (- (.local_5 - 2));
    while ((.local_6 < .local_5))
    {
      .param_4 = (bvand(.param_2, .local_7) % (.local_5 % 9));
    }
    if ((.param_3 || .param_3))
    {
      .local_8 = .local_5;
      .local_6 = bvand(.param_2, (bvor(4, .local_8) + .param_2));
      .param_2 = bvand((.local_8 * .local_7), -64);
    }
    else
    {
      .param_4 = bvand(2, .param_2);
      .local_9 = 0;
      while ((.local_9 < (.param_4 / .param_2)))
      {
        .param_4 = .local_5;
        .param_2 = (-3 - .local_9);
        .local_9 = (.local_9 + 1);
      }
    }
    .param_2 = bvxor(.param_2, bvand(bvxor(.local_6, .param_4),
     (- .param_4)));
    .param_4 = (.param_4 + 1);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12, int .param_13) returns
 (int .ret_10)
{
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_14 = bvand((.param_11 + .param_11), 1);
  .local_15 = (.param_11 * .param_11);
  .local_18 = 8;
  .param_13 = 0;
  while ((.param_13 <= ((.local_15 - .param_11) - 1)))
  {
    .local_16 = (- (.local_14 - 2));
    while ((.local_15 < .local_14))
    {
      .param_13 = (bvand(.param_11, .local_16) % (.local_14 % 9));
    }
    if ((.param_12 || .param_12))
    {
      .local_17 = .local_14;
      .local_15 = bvand(.param_11, (bvor(4, .local_17) + .param_11));
      .param_11 = bvand((.local_17 * .local_16), -64);
    }
    else
    {
      .param_13 = bvand(2, .param_11);
      .local_18 = 0;
      while ((.local_18 <= (-1 + (.param_13 / .param_11))))
      {
        .param_13 = .local_14;
        .local_18 = (.local_18 + 1);
      }
      .local_18 = 0;
      while ((.local_18 <= (-1 + (.param_13 / .param_11))))
      {
        .param_11 = (-3 - .local_18);
        .local_18 = (.local_18 + 1);
      }
    }
    .param_11 = bvxor(.param_11, bvand(bvxor(.local_15, .param_13),
     (- .param_13)));
    .param_13 = (.param_13 + 1);
  }
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
ensures (.ret_1 == .ret_10);

