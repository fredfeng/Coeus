declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = false;
  .local_6 = (-1 - bvor(.param_2, .param_2));
  .local_5 = ((16 / .param_2) - bvxor(.param_2, .param_2));
  while ((.local_5 == .param_2))
  {
    .local_5 = 1;
  }
  for (.param_3 = 0 to .param_2)
  {
    .local_5 = ((.local_5 + 23) * ((3 - .local_6) / bvxor(.local_6,
     .param_2)));
    for (.local_6 = 64 to 32)
    {
      .local_7 = .local_6;
      .local_8 = 4;
      .param_2 = bvxor((1 % .param_2), bvxor(.local_8, .local_6));
      if ((.param_3 <= (.param_3 * .local_8)))
      {
        .local_8 = (- bvxor(0, (.local_7 + .local_8)));
      }
      else
      {
        .local_8 = (.local_7 + (bvxor(.param_2, 10) + (64 % .param_3)));
      }
      .local_8 = (((- .local_8) - 9) / -1);
      .local_5 = .local_8;
    }
    .param_2 = .local_5;
  }
  .param_2 = (- .param_2);
  .ret_1 = .param_2;
}

procedure f1(int .param_10, int .param_11) returns (int .ret_9)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = false;
  .local_14 = (-1 - bvor(.param_10, .param_10));
  .local_13 = ((16 / .param_10) - bvxor(.param_10, .param_10));
  while ((.local_13 == .param_10))
  {
    .local_13 = 1;
  }
  for (.param_11 = 0 to .param_10)
  {
    .local_13 = ((.local_13 + 23) * ((3 - .local_14) / bvxor(.local_14,
     .param_10)));
    for (.local_14 = 64 to 32 step 2)
    {
      .local_15 = .local_14;
      .local_16 = 4;
      .param_10 = bvxor((1 % .param_10), bvxor(.local_16, .local_14));
      if ((.param_11 <= (.param_11 * .local_16)))
      {
        .local_16 = (- bvxor(0, (.local_15 + .local_16)));
      }
      else
      {
        .local_16 = (.local_15 + (bvxor(.param_10, 10) + (64 % .param_11)));
      }
      .local_16 = (((- .local_16) - 9) / -1);
      .local_13 = .local_16;
      if (((1 + .local_14) <= 31))
      {
        .local_15 = (1 + .local_14);
        .local_16 = 4;
        .param_10 = bvxor((1 % .param_10), bvxor(.local_16,
         (1 + .local_14)));
        if ((.param_11 <= (.param_11 * .local_16)))
        {
          .local_16 = (- bvxor(0, (.local_15 + .local_16)));
        }
        else
        {
          .local_16 = (.local_15 + (bvxor(.param_10, 10) + (64 % .param_11)));
        }
        .local_16 = (((- .local_16) - 9) / -1);
        .local_13 = .local_16;
      }
    }
    .param_10 = .local_13;
  }
  .param_10 = (- .param_10);
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

