declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = .param_2;
  while ((64 <= (.param_4 + .param_5)))
  {
    while (((2 / .param_4) >= bvand(.param_5, 3)))
    {
      .local_7 = bvor(((.param_4 * .param_2) % .param_4),
       bvor(bvand(.param_5, 1), (.param_5 % .local_6)));
      .param_5 = ((- bvand(.local_6, .local_7)) - (.local_7 + .param_5));
      if ((.local_7 >= 0))
      {
        .param_5 = bvor(.param_5, .local_7);
      }
      else
      {
        .param_4 = 7;
      }
    }
  }
  for (.local_6 = 0 to .param_5)
  {
    .local_8 = .param_4;
    .param_5 = 4;
    .param_2 = (((- .local_8) + (6 + .local_8)) + (((- .local_8) + (6 + .local_8)) + (((- .local_8) + (6 + .local_8)) + (((- .local_8) + (6 + .local_8)) + (((- .local_8) + (6 + .local_8)) + (((- .local_8) + (6 + .local_8)) + ((- .local_8) + (6 + .local_8))))))));
  }
  .param_2 = bvand(.param_5, (.param_5 - 1));
  .ret_1 = .param_2;
}

procedure f1(int .param_10, bool .param_11, int .param_12, int .param_13)
 returns (int .ret_9)
{
  int .local_14;
  int .local_15;
  int .local_16;
  .local_14 = .param_10;
  while ((64 <= (.param_12 + .param_13)))
  {
    while (((2 / .param_12) >= bvand(.param_13, 3)))
    {
      .local_15 = bvor(((.param_12 * .param_10) % .param_12),
       bvor(bvand(.param_13, 1), (.param_13 % .local_14)));
      .param_13 = ((- bvand(.local_14,
       .local_15)) - (.local_15 + .param_13));
      if ((.local_15 >= 0))
      {
        .param_13 = bvor(.param_13, .local_15);
      }
      else
      {
        .param_12 = 7;
      }
    }
  }
  for (.local_14 = 0 to ((-1 + .param_13) + 1))
  {
    .local_16 = .param_12;
    .param_10 = (((- .local_16) + (6 + .local_16)) + (((- .local_16) + (6 + .local_16)) + (((- .local_16) + (6 + .local_16)) + (((- .local_16) + (6 + .local_16)) + (((- .local_16) + (6 + .local_16)) + (((- .local_16) + (6 + .local_16)) + ((- .local_16) + (6 + .local_16))))))));
  }
  for (.local_14 = 0 to ((-1 + .param_13) + 1))
  {
    .param_13 = 4;
  }
  .param_10 = bvand(.param_13, (.param_13 - 1));
  .ret_9 = .param_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
requires (.param_4 == .param_12);
requires (.param_5 == .param_13);
ensures (.ret_1 == .ret_9);

