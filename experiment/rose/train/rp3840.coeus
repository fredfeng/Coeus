declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_5 = true;
  for (.local_6 = 0 to bvxor(.param_3, .param_2))
  {
    for (.local_7 = 0 to (- .param_4))
    {
      .param_2 = .param_3;
      .param_3 = 10;
    }
    .param_4 = 4;
  }
  .param_2 = bvand((- (.param_3 + .param_2)), (38 * (7 + .param_4)));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10, int .param_11) returns (int .ret_8)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_12 = true;
  for (.local_13 = 0 to ((-1 + bvxor(.param_10, .param_9)) + 1))
  {
    for (.local_14 = 0 to ((-1 - .param_11) + 1))
    {
      .param_9 = .param_10;
      .param_10 = 10;
    }
  }
  for (.local_13 = 0 to ((-1 + bvxor(.param_10, .param_9)) + 1))
  {
    .param_11 = 4;
  }
  .param_9 = bvand((- (.param_10 + .param_9)), (38 * (7 + .param_11)));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

