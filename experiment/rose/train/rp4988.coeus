declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  bool .local_6;
  bool .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_5 = 16;
  .local_8 = (bvxor(.local_5, .local_5) - (.local_5 % 3));
  .local_6 = .param_2;
  .local_9 = 0;
  while ((.local_9 < (- .local_8)))
  {
    while ((.local_6 || .local_6))
    {
      .local_9 = .param_4;
      .local_10 = 0;
      while ((.local_10 < (.local_9 + .param_3)))
      {
        .param_3 = bvand(5, .param_4);
        .local_8 = .local_8;
        .local_10 = (.local_10 + 1);
      }
    }
    .local_9 = (.local_9 + 1);
  }
  .local_8 = 0;
  while ((.local_8 < (.local_5 * .param_4)))
  {
    .local_9 = .param_3;
    if ((! .local_6))
    {
      .local_7 = ((.local_8 < .param_3) == false);
      if (.local_7)
      {
        .param_4 = (- .param_4);
        .local_5 = (.param_4 + 7);
      }
      else
      {
        .local_8 = ((.local_5 / 5) / (- .local_8));
        .local_5 = (bvxor(.local_8, .local_9) * (1 / .local_8));
      }
    }
    else
    {
      if (.local_6)
      {
        .param_4 = .local_8;
      }
      else
      {
        .param_4 = .param_3;
      }
      .local_5 = bvxor((.param_4 * 64), -5);
    }
    .local_8 = (.local_8 + 1);
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_12, int .param_13, int .param_14) returns
 (int .ret_11)
{
  int .local_15;
  bool .local_16;
  bool .local_17;
  int .local_18;
  int .local_19;
  int .local_20;
  .local_15 = 16;
  .local_18 = (bvxor(.local_15, .local_15) - (.local_15 % 3));
  .local_16 = .param_12;
  .local_19 = 0;
  while ((.local_19 <= ((- .local_18) - 1)))
  {
    while ((.local_16 || .local_16))
    {
      .local_19 = .param_14;
      .local_20 = 0;
      while ((.local_20 <= ((.local_19 + .param_13) - 1)))
      {
        .param_13 = bvand(5, .param_14);
        .local_20 = (.local_20 + 1);
      }
      .local_20 = 0;
      while ((.local_20 <= ((.local_19 + .param_13) - 1)))
      {
        .local_18 = .local_18;
        .local_20 = (.local_20 + 1);
      }
    }
    .local_19 = (.local_19 + 1);
  }
  .local_18 = 0;
  while ((.local_18 <= (-1 + (.local_15 * .param_14))))
  {
    .local_19 = .param_13;
    if ((! .local_16))
    {
      .local_17 = ((.local_18 < .param_13) == false);
      if (.local_17)
      {
        .param_14 = (- .param_14);
        .local_15 = (.param_14 + 7);
      }
      else
      {
        .local_18 = ((.local_15 / 5) / (- .local_18));
        .local_15 = (bvxor(.local_18, .local_19) * (1 / .local_18));
      }
    }
    else
    {
      if (.local_16)
      {
        .param_14 = .local_18;
      }
      else
      {
        .param_14 = .param_13;
      }
      .local_15 = bvxor((.param_14 * 64), -5);
    }
    .local_18 = (.local_18 + 1);
  }
  .ret_11 = .local_15;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_12);
requires (.param_3 == .param_13);
requires (.param_4 == .param_14);
ensures (.ret_1 == .ret_11);

