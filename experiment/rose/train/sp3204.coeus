declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  for (.param_4 = 5 to 64)
  {
    .local_5 = 32;
    .param_2 = (2 - .param_4);
    .param_2 = bvor((.param_4 * .param_2), .local_5);
  }
  if ((0 > .param_2))
  {
    .param_2 = (- .param_2);
  }
  else
  {
    .param_4 = ((bvand(.param_2, .param_2) / bvor(.param_2,
     1)) + (.param_2 % -4));
    .param_2 = ((.param_4 % (.param_4 + 5)) + bvor((- .param_4), .param_4));
    .param_2 = ((- .param_2) / .param_2);
  }
  .param_2 = ((- .param_2) - 1);
  .param_2 = (- (.param_2 / (.param_2 + .param_2)));
  .ret_1 = .param_2;
}

procedure f1(int .param_7, bool .param_8, int .param_9) returns (int .ret_6)
{
  int .local_10;
  for (.param_9 = 5 to 64 step 2)
  {
    .local_10 = 32;
    .param_7 = (2 - .param_9);
    .param_7 = bvor((.param_9 * .param_7), .local_10);
    if (((1 + .param_9) <= 63))
    {
      .local_10 = 32;
      .param_7 = (2 - (1 + .param_9));
      .param_7 = bvor(((1 + .param_9) * .param_7), .local_10);
    }
  }
  if ((0 > .param_7))
  {
    .param_7 = (- .param_7);
  }
  else
  {
    .param_9 = ((bvand(.param_7, .param_7) / bvor(.param_7,
     1)) + (.param_7 % -4));
    .param_7 = ((.param_9 % (.param_9 + 5)) + bvor((- .param_9), .param_9));
    .param_7 = ((- .param_7) / .param_7);
  }
  .param_7 = ((- .param_7) - 1);
  .param_7 = (- (.param_7 / (.param_7 + .param_7)));
  .ret_6 = .param_7;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_7);
requires (.param_3 == .param_8);
requires (.param_4 == .param_9);
ensures (.ret_1 == .ret_6);

