declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(int .param_2, int .param_3) returns (int .ret_1)
{
  bool .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_5 = 9;
  .local_4 = false;
  .local_6 = (32 % (.param_2 - .param_3));
  for (.param_2 = 0 to .local_5)
  {
    .local_5 = (bvxor(.param_2, 1) - 16);
    .local_5 = (bvxor((.param_3 % .local_5), .local_6) * bvor((- .local_5),
     .local_6));
    .local_6 = .local_5;
    while ((9 < .local_6))
    {
      .local_7 = (.local_5 + 1);
      .local_8 = 0;
      while ((.local_8 < 2))
      {
        .local_6 = .local_7;
        .local_5 = 0;
        .local_8 = (.local_8 + 1);
      }
    }
  }
  .ret_1 = .local_5;
}

procedure f1(int .param_10, int .param_11) returns (int .ret_9)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_13 = 9;
  .local_12 = false;
  .local_14 = (32 % (.param_10 - .param_11));
  for (.param_10 = 0 to .local_13)
  {
    .local_13 = (bvxor(.param_10, 1) - 16);
    .local_13 = (bvxor((.param_11 % .local_13),
     .local_14) * bvor((- .local_13), .local_14));
    .local_14 = .local_13;
    while ((9 < .local_14))
    {
      .local_15 = (.local_13 + 1);
      .local_16 = 0;
      while ((.local_16 <= 1))
      {
        .local_14 = .local_15;
        .local_16 = (.local_16 + 1);
      }
      .local_16 = 0;
      while ((.local_16 <= 1))
      {
        .local_13 = 0;
        .local_16 = (.local_16 + 1);
      }
    }
  }
  .ret_9 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

