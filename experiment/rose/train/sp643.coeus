declare int bvxor(int, int);

procedure f0(int .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  bool .local_6;
  int .local_7;
  .local_5 = false;
  .local_6 = .local_5;
  for (.local_7 = 4 downto .param_4)
  {
    .param_2 = ((.param_4 / .param_2) - .param_3);
  }
  for (.param_3 = 0 to 48)
  {
    .param_4 = (- bvxor((.param_2 * 16), (.param_3 + .param_2)));
    .local_6 = (((.param_4 > 5) || .local_5) && ((.param_2 - 5) <= (- .param_2)));
  }
  while ((.param_4 == 0))
  {
    if ((.local_6 && .local_6))
    {
      .param_2 = (.param_2 + .param_4);
    }
    else
    {
      .param_2 = ((16 + .param_2) + ((16 + .param_2) + (16 + .param_2)));
      .param_4 = ((.param_2 + (.param_2 + (.param_2 + (.param_2 + .param_2)))) % .param_4);
    }
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_9, int .param_10, int .param_11) returns (int .ret_8)
{
  bool .local_12;
  bool .local_13;
  int .local_14;
  .local_12 = false;
  .local_13 = .local_12;
  for (.local_14 = 4 downto .param_11)
  {
    .param_9 = ((.param_11 / .param_9) - .param_10);
  }
  for (.param_10 = 0 to 48 step 2)
  {
    .param_11 = (- bvxor((.param_9 * 16), (.param_10 + .param_9)));
    .local_13 = (((.param_11 > 5) || .local_12) && ((.param_9 - 5) <= (- .param_9)));
    if (((1 + .param_10) <= 47))
    {
      .param_11 = (- bvxor((.param_9 * 16), ((1 + .param_10) + .param_9)));
      .local_13 = (((.param_11 > 5) || .local_12) && ((.param_9 - 5) <= (- .param_9)));
    }
  }
  while ((.param_11 == 0))
  {
    if ((.local_13 && .local_13))
    {
      .param_9 = (.param_9 + .param_11);
    }
    else
    {
      .param_9 = ((16 + .param_9) + ((16 + .param_9) + (16 + .param_9)));
      .param_11 = ((.param_9 + (.param_9 + (.param_9 + (.param_9 + .param_9)))) % .param_11);
    }
  }
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

