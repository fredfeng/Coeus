declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_4 = 64;
  .local_3 = false;
  .local_5 = 4;
  .local_6 = .param_2;
  while ((.local_3 && .local_3))
  {
    .local_5 = bvand(.local_4, ((- .param_2) + 25));
    .param_2 = 4;
    .local_6 = .param_2;
  }
  for (.param_2 = 0 to (.local_4 + (.local_4 + (.local_4 + (.local_4 + (.local_4 + .local_4))))))
  {
    for (.local_6 = 0 to .local_5)
    {
      .local_7 = .param_2;
      .local_4 = 4;
      for (.local_8 = 0 to .local_5)
      {
        .local_9 = 9;
        .local_5 = ((.local_6 + .local_9) * (.local_6 * .local_7));
        .local_4 = (- (.local_5 * .param_2));
      }
    }
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_11) returns (int .ret_10)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_13 = 64;
  .local_12 = false;
  .local_14 = 4;
  .local_15 = .param_11;
  while ((.local_12 && .local_12))
  {
    .local_14 = bvand(.local_13, ((- .param_11) + 25));
    .param_11 = 4;
    .local_15 = .param_11;
  }
  for (.param_11 = 0 to ((-1 + (.local_13 + (.local_13 + (.local_13 + (.local_13 + (.local_13 + .local_13)))))) + 1))
  {
    for (.local_15 = 0 to ((-1 + .local_14) + 1))
    {
      .local_16 = .param_11;
      .local_13 = 4;
      for (.local_17 = 0 to ((-1 + .local_14) + 1))
      {
        .local_18 = 9;
      }
      for (.local_17 = 0 to ((-1 + .local_14) + 1))
      {
        .local_14 = ((.local_15 + .local_18) * (.local_15 * .local_16));
      }
      for (.local_17 = 0 to ((-1 + .local_14) + 1))
      {
        .local_13 = (- (.local_14 * .param_11));
      }
    }
  }
  .ret_10 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
ensures (.ret_1 == .ret_10);

