declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4) returns (int .ret_1)
{
  bool .local_5;
  int .local_6;
  int .local_7;
  .local_7 = 6;
  .local_6 = .param_2;
  .param_4 = bvand(7, ((.param_4 + 2) % 3));
  if (.param_3)
  {
    .local_5 = .param_3;
    .local_6 = (bvxor(.param_2, .local_6) - 3);
    for (.local_7 = 0 to bvand(16, .local_6))
    {
      while ((! .local_5))
      {
        .param_2 = (.local_7 - 4);
        .local_6 = .local_7;
      }
      .param_4 = ((.local_6 + .param_2) + .local_6);
    }
  }
  else
  {
    .param_2 = ((.param_2 % (- .local_7)) * (- .param_4));
    .local_7 = (5 / .param_2);
    for (.local_7 = 32 to 64)
    {
      .param_2 = (0 - (.local_7 % .local_6));
    }
  }
  .param_2 = bvand(.param_2, (.param_4 * -10));
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11) returns
 (int .ret_8)
{
  bool .local_12;
  int .local_13;
  int .local_14;
  .local_14 = 6;
  .local_13 = .param_9;
  .param_11 = bvand(7, ((.param_11 + 2) % 3));
  if (.param_10)
  {
    .local_12 = .param_10;
    .local_13 = (bvxor(.param_9, .local_13) - 3);
    for (.local_14 = 0 to bvand(16, .local_13))
    {
      while ((! .local_12))
      {
        .param_9 = (.local_14 - 4);
        .local_13 = .local_14;
      }
      .param_11 = ((.local_13 + .param_9) + .local_13);
    }
  }
  else
  {
    .param_9 = ((.param_9 % (- .local_14)) * (- .param_11));
    .local_14 = (5 / .param_9);
    for (.local_14 = 32 to 64 step 2)
    {
      .param_9 = (0 - (.local_14 % .local_13));
      if (((1 + .local_14) <= 63))
      {
        .param_9 = (0 - ((1 + .local_14) % .local_13));
      }
    }
  }
  .param_9 = bvand(.param_9, (.param_11 * -10));
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
ensures (.ret_1 == .ret_8);

