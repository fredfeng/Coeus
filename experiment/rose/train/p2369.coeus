declare int bvxor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = 10;
  .local_3 = false;
  .local_5 = .local_4;
  while (.local_3)
  {
    .local_4 = (- ((.local_5 + .param_2) + .local_4));
    .local_5 = bvand(.local_4, (.local_4 - 3));
  }
  .local_4 = 5;
  for (.param_2 = 0 to 5)
  {
    for (.local_6 = 0 to 63)
    {
      .local_5 = (- bvxor((- .local_5), .local_4));
    }
    .local_4 = (- (16 / .local_5));
    .local_5 = (- .local_4);
    .local_4 = .local_5;
  }
  .ret_1 = .local_4;
}

procedure f1(int .param_8) returns (int .ret_7)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  .local_10 = 10;
  .local_9 = false;
  .local_11 = .local_10;
  while (.local_9)
  {
    .local_10 = (- ((.local_11 + .param_8) + .local_10));
    .local_11 = bvand(.local_10, (.local_10 - 3));
  }
  .local_10 = 5;
  for (.param_8 = 0 to 5)
  {
    for (.local_12 = 0 to 63 step 2)
    {
      .local_11 = (- bvxor((- .local_11), .local_10));
      if (((1 + .local_12) <= 62))
      {
        .local_11 = (- bvxor((- .local_11), .local_10));
      }
    }
    .local_10 = (- (16 / .local_11));
    .local_11 = (- .local_10);
    .local_10 = .local_11;
  }
  .ret_7 = .local_10;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
ensures (.ret_1 == .ret_7);

