declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, int .param_3, int .param_4, bool .param_5) returns
 (int .ret_1)
{
  bool .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_6 = true;
  .local_7 = bvand((.param_2 - 32), (.param_2 / 2));
  while (.param_5)
  {
    while (.param_5)
    {
      .param_3 = .param_3;
    }
    .param_3 = ((.local_7 / .param_3) + (5 % .param_2));
  }
  while ((.param_5 || .param_5))
  {
    .local_8 = (- .local_7);
    if (((.local_6 == .param_5) || (.param_3 < 2)))
    {
      .local_9 = (bvor(.param_4, bvor(9,
       .local_8)) / (- (.param_2 + .param_3)));
      if ((4 == .local_9))
      {
        .param_4 = (- (bvand(64, .local_7) + (bvand(64,
         .local_7) + (bvand(64, .local_7) + (bvand(64, .local_7) + (bvand(64,
         .local_7) + (bvand(64, .local_7) + bvand(64, .local_7))))))));
      }
      else
      {
        .param_4 = 0;
      }
    }
    else
    {
      .local_10 = bvand(.param_2, .param_3);
      while (.param_5)
      {
        .param_4 = bvxor(0, bvor(bvor(.local_10, 0), .local_7));
      }
    }
  }
  for (.local_7 = 0 to 32)
  {
    .local_8 = ((.param_4 + .param_2) - 32);
    .param_2 = (bvor(.local_8, 0) / bvor(7, .local_8));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_12, int .param_13, int .param_14, bool .param_15)
 returns (int .ret_11)
{
  bool .local_16;
  int .local_17;
  int .local_18;
  int .local_19;
  int .local_20;
  .local_16 = true;
  .local_17 = bvand((.param_12 - 32), (.param_12 / 2));
  while (.param_15)
  {
    while (.param_15)
    {
      .param_13 = .param_13;
    }
    .param_13 = ((.local_17 / .param_13) + (5 % .param_12));
  }
  while ((.param_15 || .param_15))
  {
    .local_18 = (- .local_17);
    if (((.local_16 == .param_15) || (.param_13 < 2)))
    {
      .local_19 = (bvor(.param_14, bvor(9,
       .local_18)) / (- (.param_12 + .param_13)));
      if ((4 == .local_19))
      {
        .param_14 = (- (bvand(64, .local_17) + (bvand(64,
         .local_17) + (bvand(64, .local_17) + (bvand(64,
         .local_17) + (bvand(64, .local_17) + (bvand(64,
         .local_17) + bvand(64, .local_17))))))));
      }
      else
      {
        .param_14 = 0;
      }
    }
    else
    {
      .local_20 = bvand(.param_12, .param_13);
      while (.param_15)
      {
        .param_14 = bvxor(0, bvor(bvor(.local_20, 0), .local_17));
      }
    }
  }
  for (.local_17 = 0 to 32 step 2)
  {
    .local_18 = ((.param_14 + .param_12) - 32);
    .param_12 = (bvor(.local_18, 0) / bvor(7, .local_18));
    if (((1 + .local_17) <= 31))
    {
      .local_18 = ((.param_14 + .param_12) - 32);
      .param_12 = (bvor(.local_18, 0) / bvor(7, .local_18));
    }
  }
  .ret_11 = .param_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_12);
requires (.param_3 == .param_13);
requires (.param_4 == .param_14);
requires (.param_5 == .param_15);
ensures (.ret_1 == .ret_11);

