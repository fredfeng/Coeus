declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_4 = 5;
  .local_7 = .local_4;
  .local_5 = bvand((.local_4 + 8), ((.local_4 / 3) + .local_4));
  .local_6 = (.local_4 % (.local_4 + .local_4));
  for (.local_8 = 0 to (.param_3 + .local_6))
  {
    while (.param_2)
    {
      .local_9 = bvxor(bvxor(.local_4, .local_6), (- .local_5));
      .param_2 = ((! .param_2) && (.local_9 <= bvor(32, .param_3)));
      .local_5 = 0;
    }
  }
  .local_4 = ((- .local_5) * -6);
  for (.local_7 = 3 to 9)
  {
    .local_9 = .local_7;
    .local_4 = (.local_9 / 6);
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_11, int .param_12) returns (int .ret_10)
{
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_13 = 5;
  .local_16 = .local_13;
  .local_14 = bvand((.local_13 + 8), ((.local_13 / 3) + .local_13));
  .local_15 = (.local_13 % (.local_13 + .local_13));
  for (.local_17 = 0 to (.param_12 + .local_15))
  {
    while (.param_11)
    {
      .local_18 = bvxor(bvxor(.local_13, .local_15), (- .local_14));
      .param_11 = ((! .param_11) && (.local_18 <= bvor(32, .param_12)));
      .local_14 = 0;
    }
  }
  .local_13 = ((- .local_14) * -6);
  for (.local_16 = 3 to 9 step 2)
  {
    .local_18 = .local_16;
    .local_13 = (.local_18 / 6);
    if (((1 + .local_16) <= 8))
    {
      .local_18 = (1 + .local_16);
      .local_13 = (.local_18 / 6);
    }
  }
  .ret_10 = .local_13;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
ensures (.ret_1 == .ret_10);

