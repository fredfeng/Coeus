declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(bool .param_2, int .param_3, int .param_4) returns (int .ret_1)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = 0;
  .local_8 = bvxor(bvor(.local_5, 2), (.local_5 * .local_5));
  .local_6 = (- bvor(.local_5, .local_5));
  .local_6 = ((.local_8 - 4) + bvxor(.local_6, 0));
  for (.local_8 = 5 to 16)
  {
    .local_9 = -1;
    .local_5 = ((.local_6 + (.local_6 + (.local_6 + (.local_6 + (.local_6 + .local_6))))) + .local_9);
    .param_3 = (bvxor(8, .local_5) % (- .param_4));
  }
  for (.local_7 = 0 to (.local_6 % .local_6))
  {
    for (.param_3 = 64 downto 32)
    {
      .local_5 = .param_3;
    }
  }
  .ret_1 = .local_5;
}

procedure f1(bool .param_11, int .param_12, int .param_13) returns
 (int .ret_10)
{
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_14 = 0;
  .local_17 = bvxor(bvor(.local_14, 2), (.local_14 * .local_14));
  .local_15 = (- bvor(.local_14, .local_14));
  .local_15 = ((.local_17 - 4) + bvxor(.local_15, 0));
  for (.local_17 = 5 to 16 step 2)
  {
    .local_18 = -1;
    .local_14 = ((.local_15 + (.local_15 + (.local_15 + (.local_15 + (.local_15 + .local_15))))) + .local_18);
    .param_12 = (bvxor(8, .local_14) % (- .param_13));
    if (((1 + .local_17) <= 15))
    {
      .local_18 = -1;
      .local_14 = ((.local_15 + (.local_15 + (.local_15 + (.local_15 + (.local_15 + .local_15))))) + .local_18);
      .param_12 = (bvxor(8, .local_14) % (- .param_13));
    }
  }
  for (.local_16 = 0 to (.local_15 % .local_15))
  {
    for (.param_12 = 64 downto 32)
    {
      .local_14 = .param_12;
    }
  }
  .ret_10 = .local_14;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
ensures (.ret_1 == .ret_10);

