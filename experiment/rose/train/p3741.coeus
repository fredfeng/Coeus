declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  while ((.param_2 > 1))
  {
    for (.local_7 = 0 to bvand(.param_2, .param_2))
    {
      .param_2 = 0;
      for (.param_4 = 7 to 2)
      {
        .local_6 = ((.param_4 + 32) + .param_2);
        .param_5 = .local_6;
      }
    }
    .param_2 = 4;
  }
  for (.param_5 = 0 to 0)
  {
    .param_2 = (9 - .param_2);
  }
  .param_2 = bvor((.param_2 % .param_2), 3);
  .ret_1 = .param_2;
}

procedure f1(int .param_9, bool .param_10, int .param_11, int .param_12)
 returns (int .ret_8)
{
  int .local_13;
  int .local_14;
  while ((.param_9 > 1))
  {
    for (.local_14 = 0 to bvand(.param_9, .param_9))
    {
      .param_9 = 0;
      for (.param_11 = 7 to 2 step 2)
      {
        .local_13 = ((.param_11 + 32) + .param_9);
        .param_12 = .local_13;
        if (((1 + .param_11) <= 1))
        {
          .local_13 = (((1 + .param_11) + 32) + .param_9);
          .param_12 = .local_13;
        }
      }
    }
    .param_9 = 4;
  }
  for (.param_12 = 0 to 0 step 2)
  {
    .param_9 = (9 - .param_9);
    if (((1 + .param_12) <= -1))
    {
      .param_9 = (9 - .param_9);
    }
  }
  .param_9 = bvor((.param_9 % .param_9), 3);
  .ret_8 = .param_9;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_9);
requires (.param_3 == .param_10);
requires (.param_4 == .param_11);
requires (.param_5 == .param_12);
ensures (.ret_1 == .ret_8);

