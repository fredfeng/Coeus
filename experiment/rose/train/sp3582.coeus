declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(bool .param_2, int .param_3) returns (int .ret_1)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 2;
  .local_7 = (- (.local_4 / 7));
  .local_5 = (48 - (.local_4 + .local_4));
  .local_5 = (bvxor(8, .local_5) * -32);
  for (.local_5 = 0 to 2)
  {
    .local_6 = bvxor((.local_4 + .local_5), 7);
    for (.local_7 = 0 to 10)
    {
      .local_8 = (bvxor(.local_6, .local_4) % 4);
      if (((- .local_7) >= -64))
      {
        .param_3 = (.local_5 * .local_4);
        .param_3 = (- (2 - bvxor(.param_3, 0)));
      }
      else
      {
        .param_3 = (.param_3 + bvor(.local_8, .local_8));
        .local_6 = ((- .local_4) - .local_5);
      }
    }
    .local_4 = bvxor(bvxor((.local_6 - .param_3), (- .local_6)),
     ((0 / .local_4) * bvand(32, .local_4)));
  }
  .ret_1 = .local_4;
}

procedure f1(bool .param_10, int .param_11) returns (int .ret_9)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  .local_12 = 2;
  .local_15 = (- (.local_12 / 7));
  .local_13 = (48 - (.local_12 + .local_12));
  .local_13 = (bvxor(8, .local_13) * -32);
  for (.local_13 = 0 to 2)
  {
    .local_14 = bvxor((.local_12 + .local_13), 7);
    for (.local_15 = 0 to 10 step 2)
    {
      .local_16 = (bvxor(.local_14, .local_12) % 4);
      if (((- .local_15) >= -64))
      {
        .param_11 = (.local_13 * .local_12);
        .param_11 = (- (2 - bvxor(.param_11, 0)));
      }
      else
      {
        .param_11 = (.param_11 + bvor(.local_16, .local_16));
        .local_14 = ((- .local_12) - .local_13);
      }
      if (((1 + .local_15) <= 9))
      {
        .local_16 = (bvxor(.local_14, .local_12) % 4);
        if (((- (1 + .local_15)) >= -64))
        {
          .param_11 = (.local_13 * .local_12);
          .param_11 = (- (2 - bvxor(.param_11, 0)));
        }
        else
        {
          .param_11 = (.param_11 + bvor(.local_16, .local_16));
          .local_14 = ((- .local_12) - .local_13);
        }
      }
    }
    .local_12 = bvxor(bvxor((.local_14 - .param_11), (- .local_14)),
     ((0 / .local_12) * bvand(32, .local_12)));
  }
  .ret_9 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_10);
requires (.param_3 == .param_11);
ensures (.ret_1 == .ret_9);

