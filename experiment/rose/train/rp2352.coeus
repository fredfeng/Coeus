declare int bvxor(int, int);
declare int bvor(int, int);
declare int bvand(int, int);

procedure f0(int .param_2, bool .param_3, int .param_4, int .param_5) returns
 (int .ret_1)
{
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_9 = (0 / (- .param_2));
  .local_7 = (- ((.param_2 % 64) + bvor(1, .param_2)));
  .local_6 = (.param_2 + (.param_2 + (.param_2 + (.param_2 + (.param_2 + .param_2)))));
  for (.param_4 = 0 to bvxor(.param_2, 1))
  {
    .local_8 = (.param_5 * bvand((.local_7 - .local_6), bvor(.param_2,
     .local_7)));
    while ((.local_6 != (.local_8 + .local_8)))
    {
      .local_6 = (- (4 + .param_4));
      .local_9 = 0;
      while ((.local_9 < (.local_6 / .param_5)))
      {
        .local_6 = (- (.local_9 - 7));
        .local_8 = 16;
        .local_9 = (.local_9 + 1);
      }
    }
    .param_2 = ((- .param_4) - (.param_2 * 64));
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_11, bool .param_12, int .param_13, int .param_14)
 returns (int .ret_10)
{
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_18 = (0 / (- .param_11));
  .local_16 = (- ((.param_11 % 64) + bvor(1, .param_11)));
  .local_15 = (.param_11 + (.param_11 + (.param_11 + (.param_11 + (.param_11 + .param_11)))));
  for (.param_13 = 0 to bvxor(.param_11, 1))
  {
    .local_17 = (.param_14 * bvand((.local_16 - .local_15), bvor(.param_11,
     .local_16)));
    while ((.local_15 != (.local_17 + .local_17)))
    {
      .local_15 = (- (4 + .param_13));
      .local_18 = 0;
      while ((.local_18 <= (-1 + (.local_15 / .param_14))))
      {
        .local_15 = (- (.local_18 - 7));
        .local_18 = (.local_18 + 1);
      }
      .local_18 = 0;
      while ((.local_18 <= (-1 + (.local_15 / .param_14))))
      {
        .local_17 = 16;
        .local_18 = (.local_18 + 1);
      }
    }
    .param_11 = ((- .param_13) - (.param_11 * 64));
  }
  .ret_10 = .param_11;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
requires (.param_3 == .param_12);
requires (.param_4 == .param_13);
requires (.param_5 == .param_14);
ensures (.ret_1 == .ret_10);

