declare int bvxor(int, int);
declare int bvor(int, int);

procedure f0(bool .param_2) returns (int .ret_1)
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_3 = 3;
  .local_7 = (.local_3 - (.local_3 * .local_3));
  .local_9 = 1;
  .local_5 = bvor(bvor(.local_3, 1), 16);
  for (.local_5 = 8 to 3)
  {
    .local_6 = .local_5;
    while ((.local_7 > -3))
    {
      .local_9 = 3;
      while ((.local_9 > 6))
      {
        .local_6 = (- .local_9);
        .local_9 = (.local_9 - 1);
      }
    }
    for (.local_7 = 0 to bvxor(.local_5, .local_3))
    {
      .local_4 = (- .local_5);
      if ((.local_3 <= .local_4))
      {
        .local_3 = .local_6;
      }
      else
      {
        .local_3 = (- (2 % .local_4));
      }
    }
  }
  for (.local_4 = 0 to 7)
  {
    .local_5 = .local_3;
    for (.local_6 = 0 to .local_5)
    {
      for (.local_8 = 4 to 2)
      {
        .local_3 = .local_5;
      }
    }
  }
  .local_3 = (.local_3 + .local_3);
  .local_3 = (.local_3 + 32);
  .ret_1 = .local_3;
}

procedure f1(bool .param_11) returns (int .ret_10)
{
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  int .local_16;
  int .local_17;
  int .local_18;
  .local_12 = 3;
  .local_16 = (.local_12 - (.local_12 * .local_12));
  .local_18 = 1;
  .local_14 = bvor(bvor(.local_12, 1), 16);
  for (.local_14 = 8 to 3)
  {
    .local_15 = .local_14;
    while ((.local_16 > -3))
    {
      .local_18 = 3;
      while ((.local_18 >= 7))
      {
        .local_15 = (- .local_18);
        .local_18 = (.local_18 - 1);
      }
    }
    for (.local_16 = 0 to ((-1 + bvxor(.local_14, .local_12)) + 1) step 2)
    {
      .local_13 = (- .local_14);
      if ((.local_12 <= .local_13))
      {
        .local_12 = .local_15;
      }
      else
      {
        .local_12 = (- (2 % .local_13));
      }
      if (((1 + .local_16) <= (-1 + bvxor(.local_14, .local_12))))
      {
        .local_13 = (- .local_14);
        if ((.local_12 <= .local_13))
        {
          .local_12 = .local_15;
        }
        else
        {
          .local_12 = (- (2 % .local_13));
        }
      }
    }
    if ((.local_16 <= (-1 + bvxor(.local_14, .local_12))))
    {
      .local_13 = (- .local_14);
      if ((.local_12 <= .local_13))
      {
        .local_12 = .local_15;
      }
      else
      {
        .local_12 = (- (2 % .local_13));
      }
      if (((1 + .local_16) <= (-1 + bvxor(.local_14, .local_12))))
      {
        .local_13 = (- .local_14);
        if ((.local_12 <= .local_13))
        {
          .local_12 = .local_15;
        }
        else
        {
          .local_12 = (- (2 % .local_13));
        }
      }
    }
  }
  for (.local_13 = 0 to 7)
  {
    .local_14 = .local_12;
    for (.local_15 = 0 to .local_14)
    {
      for (.local_17 = 4 to 2 step 2)
      {
        .local_12 = .local_14;
        if (((1 + .local_17) <= 1))
        {
          .local_12 = .local_14;
        }
      }
    }
  }
  .local_12 = (.local_12 + .local_12);
  .local_12 = (.local_12 + 32);
  .ret_10 = .local_12;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_11);
ensures (.ret_1 == .ret_10);

