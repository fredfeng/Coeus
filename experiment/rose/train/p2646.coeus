declare int bvand(int, int);

procedure f0(int .param_2) returns (int .ret_1)
{
  bool .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_3 = false;
  .local_5 = (- .param_2);
  .local_4 = bvand(7, (.local_5 + .local_5));
  .local_5 = (.local_4 / 6);
  for (.local_5 = 0 to (10 - .local_4))
  {
    for (.local_6 = 0 to 0)
    {
      .local_4 = bvand(.local_5, .local_5);
      .local_4 = (.local_5 * .local_4);
    }
    .param_2 = bvand(-1, .local_4);
  }
  .ret_1 = .param_2;
}

procedure f1(int .param_8) returns (int .ret_7)
{
  bool .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  .local_9 = false;
  .local_11 = (- .param_8);
  .local_10 = bvand(7, (.local_11 + .local_11));
  .local_11 = (.local_10 / 6);
  for (.local_11 = 0 to (10 - .local_10))
  {
    for (.local_12 = 0 to 0 step 2)
    {
      .local_10 = bvand(.local_11, .local_11);
      .local_10 = (.local_11 * .local_10);
      if (((1 + .local_12) <= -1))
      {
        .local_10 = bvand(.local_11, .local_11);
        .local_10 = (.local_11 * .local_10);
      }
    }
    .param_8 = bvand(-1, .local_10);
  }
  .ret_7 = .param_8;
}

$lentry f0;
$rentry f1;
requires (.param_2 == .param_8);
ensures (.ret_1 == .ret_7);

