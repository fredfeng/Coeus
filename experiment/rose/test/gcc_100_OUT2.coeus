declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func9(int .param_1, int[int, int] .param_2, int[int] .param_3)
 returns ()
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_7 = 0;
  while ((.local_7 < .param_1))
  {
    .local_4 = 1;
    .local_6 = 0;
    while ((.local_6 < .param_1))
    {
      .local_5 = 0;
      while ((.local_5 < .param_1))
      {
        .local_4 = (.local_4 * .param_2[.local_6, (.local_5 + .local_7)]);
        .local_5 = (.local_5 + 1);
      }
      .local_6 = (.local_6 + 1);
    }
    .param_3[.local_7] = .local_4;
    .local_7 = (.local_7 + 1);
  }
}

procedure RIGHT_func9(int .param_1, int[int, int] .param_2,
                      int[int] .param_3)
 returns ()
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_7 = 0;
  while ((.local_7 <= (.param_1 - 1)))
  {
    .local_4 = 1;
    .local_6 = 0;
    while ((.local_6 <= (.param_1 - 1)))
    {
      .local_5 = 0;
      while ((.local_5 <= (.param_1 - 1)))
      {
        .local_4 = (.local_4 * .param_2[.local_6, (.local_5 + .local_7)]);
        .local_5 = (.local_5 + 1);
      }
      .local_6 = (.local_6 + 1);
    }
    .param_3[.local_7] = .local_4;
    .local_7 = (.local_7 + 1);
  }
}

$lentry LEFT_func9;
$rentry RIGHT_func9;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
ensures ($L(.param_2) == $R(.param_2));
ensures ($L(.param_3) == $R(.param_3));

