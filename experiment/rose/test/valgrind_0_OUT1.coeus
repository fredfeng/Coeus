declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func10(int .param_1, int .param_2, int .param_3, int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_7 = 0;
  if ((.param_4 == 0))
  {
    .local_5 = 0;
    while ((.local_5 < 7))
    {
      .local_6 = ((8 - .local_5) * 4);
      .local_8 = bvor(bvand(bvshr(.param_2, .local_6), 15), .param_3);
      .local_7 = bvor(.local_7, bvshl(.local_8, ((7 - .local_5) * 8)));
      .local_5 = (.local_5 + 1);
    }
  }
  else
  {
    .local_8 = bvor(bvand(.param_1, 15), .param_3);
    .local_7 = bvor(.local_7, (.local_8 * 72057594037927936));
    .local_5 = 1;
    while ((.local_5 < 8))
    {
      .local_6 = ((16 - .local_5) * 4);
      .local_8 = bvor(bvand(bvshr(.param_2, .local_6), 15), .param_3);
      .local_7 = bvor(.local_7, bvshl(.local_8, ((7 - .local_5) * 8)));
      .local_5 = (.local_5 + 1);
    }
  }
  .ret_0 = .local_7;
}

procedure RIGHT_func10(int .param_1, int .param_2, int .param_3,
                       int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_7 = 0;
  if ((.param_4 == 0))
  {
    .local_5 = 0;
    while ((.local_5 <= (7 - 1)))
    {
      .local_6 = ((8 - .local_5) * 4);
      .local_8 = bvor(bvand(bvshr(.param_2, .local_6), 15), .param_3);
      .local_7 = bvor(.local_7, bvshl(.local_8, ((7 - .local_5) * 8)));
      .local_5 = (.local_5 + 1);
    }
  }
  else
  {
    .local_8 = bvor(bvand(.param_1, 15), .param_3);
    .local_7 = bvor(.local_7, (.local_8 * 72057594037927936));
    .local_5 = 1;
    while ((.local_5 <= (8 - 1)))
    {
      .local_6 = ((16 - .local_5) * 4);
      .local_8 = bvor(bvand(bvshr(.param_2, .local_6), 15), .param_3);
      .local_7 = bvor(.local_7, bvshl(.local_8, ((7 - .local_5) * 8)));
      .local_5 = (.local_5 + 1);
    }
  }
  .ret_0 = .local_7;
}

$lentry LEFT_func10;
$rentry RIGHT_func10;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
requires ($L(.param_4) == $R(.param_4));
ensures ($L(.ret_0) == $R(.ret_0));

