declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func8(int .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_5 = .param_2;
  if ((.param_1 != .param_2))
  {
    .param_2 = .param_1;
    .local_5 = 0;
    .local_4 = 1;
    .local_3 = 8388608;
    .local_6 = 0;
    while ((.local_6 < 24))
    {
      if ((bvand(.param_1, .local_4) != 0))
      {
        .local_5 = bvor(.local_5, .local_3);
      }
      .local_4 = (.local_4 * 2);
      .local_3 = (.local_3 / 2);
      .local_6 = (.local_6 + 1);
    }
  }
  .ret_0 = .local_5;
}

procedure RIGHT_func8(int .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  .local_5 = .param_2;
  if ((.param_1 != .param_2))
  {
    .param_2 = .param_1;
    .local_5 = 0;
    .local_4 = 1;
    .local_3 = 8388608;
    .local_6 = 0;
    while ((.local_6 <= (24 - 1)))
    {
      if ((bvand(.param_1, .local_4) != 0))
      {
        .local_5 = bvor(.local_5, .local_3);
      }
      .local_4 = (.local_4 * 2);
      .local_3 = (.local_3 / 2);
      .local_6 = (.local_6 + 1);
    }
  }
  .ret_0 = .local_5;
}

$lentry LEFT_func8;
$rentry RIGHT_func8;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
ensures ($L(.ret_0) == $R(.ret_0));

