declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func10(int .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_7 = 1;
  .local_4 = (1 + (.param_1 % 4));
  .param_1 = (.param_1 / 4);
  .local_5 = (.param_1 % 32);
  .local_6 = (if (.param_2 != 0) then 2 else 1);
  .local_3 = 1;
  while (((.local_3 < .local_4) && (.local_7 != 0)))
  {
    .param_1 = (.param_1 / 32);
    .local_8 = (.param_1 % 32);
    if ((.local_8 != ((.local_5 + .local_6) % 32)))
    {
      .local_7 = 0;
    }
    else
    {
      .local_5 = .local_8;
    }
    .local_3 = (.local_3 + 1);
  }
  .ret_0 = 1;
}

procedure RIGHT_func10(int .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_7 = 1;
  .local_4 = (1 + (.param_1 % 4));
  .param_1 = (.param_1 / 4);
  .local_5 = (.param_1 % 32);
  .local_6 = (if (.param_2 != 0) then 2 else 1);
  .local_3 = 1;
  while (((.local_3 < .local_4) && (.local_7 != 0)))
  {
    .param_1 = (.param_1 / 32);
    .local_8 = (.param_1 % 32);
    if ((.local_8 != ((.local_5 + .local_6) % 32)))
    {
      .local_7 = 0;
    }
    else
    {
      .local_5 = .local_8;
    }
    .local_3 = (.local_3 + 1);
  }
  .ret_0 = 1;
}

$lentry LEFT_func10;
$rentry RIGHT_func10;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
ensures ($L(.ret_0) == $R(.ret_0));

