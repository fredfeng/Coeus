declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func10(int[int] .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 0;
  .local_5 = .param_2;
  .local_6 = ((.local_4 + .local_5) / 2);
  if (((.param_3 < .param_1[0]) || (.param_3 > .param_1[(.local_5 - 1)])))
  {
    .ret_0 = (- 1);
  }
  else
  {
    .local_7 = (- 1);
    .local_8 = 1;
    while (((.local_4 <= .local_5) && (.local_8 != 0)))
    {
      if ((.param_3 < .param_1[.local_6]))
      {
        .local_5 = (.local_6 - 1);
      }
      else
      {
        if ((.param_3 == .param_1[.local_6]))
        {
          while (((.local_6 > 0) && (.param_1[(.local_6 - 1)] == .param_3)))
          {
            .local_6 = (.local_6 - 1);
          }
          .local_8 = 0;
          .local_7 = .local_6;
        }
        else
        {
          .local_4 = (.local_6 + 1);
        }
      }
      .local_6 = ((.local_4 + .local_5) / 2);
    }
    .ret_0 = .local_7;
  }
}

procedure RIGHT_func10(int[int] .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = 0;
  .local_5 = .param_2;
  .local_6 = ((.local_4 + .local_5) / 2);
  if (((.param_3 < .param_1[0]) || (.param_3 > .param_1[(.local_5 - 1)])))
  {
    .ret_0 = (- 1);
  }
  else
  {
    .local_7 = (- 1);
    .local_8 = 1;
    while (((.local_4 <= .local_5) && (.local_8 != 0)))
    {
      if ((.param_3 < .param_1[.local_6]))
      {
        .local_5 = (.local_6 - 1);
      }
      else
      {
        if ((.param_3 == .param_1[.local_6]))
        {
          while (((.local_6 > 0) && (.param_1[(.local_6 - 1)] == .param_3)))
          {
            .local_6 = (.local_6 - 1);
          }
          .local_8 = 0;
          .local_7 = .local_6;
        }
        else
        {
          .local_4 = (.local_6 + 1);
        }
      }
      .local_6 = ((.local_4 + .local_5) / 2);
    }
    .ret_0 = .local_7;
  }
}

$lentry LEFT_func10;
$rentry RIGHT_func10;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
ensures ($L(.param_1) == $R(.param_1));
ensures ($L(.ret_0) == $R(.ret_0));

