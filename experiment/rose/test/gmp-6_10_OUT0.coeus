declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func8(int .param_1, int .param_2, int[int] .param_3,
                     int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  .local_6 = (2 * .param_4);
  if ((.param_1 == 0))
  {
    .ret_0 = 0;
  }
  else
  {
    .param_1 = (.param_1 - 1);
    .local_5 = .param_3[.param_1];
    while ((.param_1 > 0))
    {
      .local_5 = ((.local_6 * .local_5) + .param_3[.param_1]);
      .param_1 = (.param_1 - 1);
    }
    if ((.param_2 < 0))
    {
      .local_5 = (- .local_5);
    }
    .ret_0 = .local_5;
  }
}

procedure RIGHT_func8(int .param_1, int .param_2, int[int] .param_3,
                      int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  .local_6 = (2 * .param_4);
  if ((.param_1 == 0))
  {
    .ret_0 = 0;
  }
  else
  {
    .param_1 = (.param_1 - 1);
    .local_5 = .param_3[.param_1];
    while ((.param_1 > 0))
    {
      .local_5 = ((.local_6 * .local_5) + .param_3[.param_1]);
      .param_1 = (.param_1 - 1);
    }
    if ((.param_2 < 0))
    {
      .local_5 = (- .local_5);
    }
    .ret_0 = .local_5;
  }
}

$lentry LEFT_func8;
$rentry RIGHT_func8;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
requires ($L(.param_4) == $R(.param_4));
ensures ($L(.param_3) == $R(.param_3));
ensures ($L(.ret_0) == $R(.ret_0));

