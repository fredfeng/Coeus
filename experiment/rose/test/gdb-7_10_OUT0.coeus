declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func7(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  .local_4 = 1;
  .local_5 = 1;
  if ((! (.param_1 != 0)))
  {
    .ret_0 = 1;
  }
  else
  {
    if ((! (.param_2 != 0)))
    {
      .param_3 = bvnot(.param_3);
    }
    while (((.param_3 != 0) && (.local_4 != 0)))
    {
      if ((! (bvand(.param_3, .param_2) != 0)))
      {
        .local_4 = 0;
        .local_5 = 0;
      }
      else
      {
        .param_3 = (.param_3 / 2);
      }
    }
    .ret_0 = .local_5;
  }
}

procedure RIGHT_func7(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  .local_4 = 1;
  .local_5 = 1;
  if ((! (.param_1 != 0)))
  {
    .ret_0 = 1;
  }
  else
  {
    if ((! (.param_2 != 0)))
    {
      .param_3 = bvnot(.param_3);
    }
    while (((.param_3 != 0) && (.local_4 != 0)))
    {
      if ((! (bvand(.param_3, .param_2) != 0)))
      {
        .local_4 = 0;
        .local_5 = 0;
      }
      else
      {
        .param_3 = (.param_3 / 2);
      }
    }
    .ret_0 = .local_5;
  }
}

$lentry LEFT_func7;
$rentry RIGHT_func7;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
ensures ($L(.ret_0) == $R(.ret_0));

