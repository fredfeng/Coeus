declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func6(int .param_1) returns (int .ret_0)
{
  int[int] .local_2;
  int .local_3;
  int .local_4;
  .local_2[0] = 1536;
  .local_2[1] = 1518;
  .local_2[2] = 1522;
  .local_2[3] = 1542;
  .local_2[4] = 9212;
  .local_2[5] = 10236;
  .local_2[6] = 1518;
  .local_2[7] = 1518;
  .local_4 = 5;
  .param_1 = (.param_1 + (14 + 4));
  if ((.param_1 > .local_2[.local_4]))
  {
    .ret_0 = (- 1);
  }
  else
  {
    .local_3 = 0;
    while ((.local_3 < 5))
    {
      if (((.local_2[.local_3] >= .param_1) && (.local_2[.local_3] < .local_2[.local_4])))
      {
        .local_4 = .local_3;
      }
      .local_3 = (.local_3 + 1);
    }
    .ret_0 = .local_4;
  }
}

procedure RIGHT_func6(int .param_1) returns (int .ret_0)
{
  int[int] .local_2;
  int .local_3;
  int .local_4;
  .local_2[0] = 1536;
  .local_2[1] = 1518;
  .local_2[2] = 1522;
  .local_2[3] = 1542;
  .local_2[4] = 9212;
  .local_2[5] = 10236;
  .local_2[6] = 1518;
  .local_2[7] = 1518;
  .local_4 = 5;
  .param_1 = (.param_1 + (14 + 4));
  if ((.param_1 > .local_2[.local_4]))
  {
    .ret_0 = (- 1);
  }
  else
  {
    .local_3 = 0;
    while ((.local_3 <= 4))
    {
      if (((.local_2[.local_3] >= .param_1) && (.local_2[.local_3] < .local_2[.local_4])))
      {
        .local_4 = .local_3;
      }
      if (((1 + .local_3) <= 4))
      {
        if (((.local_2[(1 + .local_3)] >= .param_1) && (.local_2[(1 + .local_3)] < .local_2[.local_4])))
        {
          .local_4 = (1 + .local_3);
        }
      }
      .local_3 = (.local_3 + 2);
    }
    .ret_0 = .local_4;
  }
}

$lentry LEFT_func6;
$rentry RIGHT_func6;
requires ($L(.param_1) == $R(.param_1));
ensures ($L(.ret_0) == $R(.ret_0));

