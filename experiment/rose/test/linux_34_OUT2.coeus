declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func8(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  int[int] .local_5;
  int .local_6;
  .local_5[0] = 255;
  .local_5[1] = 511;
  .local_5[2] = 1023;
  .local_5[3] = 2047;
  .local_5[4] = 4095;
  .local_5[5] = 8191;
  .local_5[6] = 16383;
  .local_5[7] = 32767;
  .local_6 = 1;
  .local_4 = .param_1;
  if ((.local_4 >= 0))
  {
    .local_2 = bvor(85, 128);
  }
  else
  {
    .local_2 = 85;
    .local_4 = (0 - .local_4);
  }
  .local_3 = 0;
  while (((.local_3 < 8) && (.local_6 != 0)))
  {
    if ((.local_4 <= .local_5[.local_3]))
    {
      .local_6 = 0;
    }
    .local_3 = (.local_3 + 1);
  }
  .ret_0 = bvxor(bvor((.local_3 * 16), bvand(bvshr(.local_4,
   (if (.local_3 != 0) then (.local_3 + 3) else 4)), 15)), .local_2);
}

procedure RIGHT_func8(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  int[int] .local_5;
  int .local_6;
  .local_5[0] = 255;
  .local_5[1] = 511;
  .local_5[2] = 1023;
  .local_5[3] = 2047;
  .local_5[4] = 4095;
  .local_5[5] = 8191;
  .local_5[6] = 16383;
  .local_5[7] = 32767;
  .local_6 = 1;
  .local_4 = .param_1;
  if ((.local_4 >= 0))
  {
    .local_2 = bvor(85, 128);
  }
  else
  {
    .local_2 = 85;
    .local_4 = (0 - .local_4);
  }
  .local_3 = 0;
  while (((.local_3 < 8) && (.local_6 != 0)))
  {
    if ((.local_4 <= .local_5[.local_3]))
    {
      .local_6 = 0;
    }
    .local_3 = (.local_3 + 1);
  }
  .ret_0 = bvxor(bvor((.local_3 * 16), bvand(bvshr(.local_4,
   (if (.local_3 != 0) then (.local_3 + 3) else 4)), 15)), .local_2);
}

$lentry LEFT_func8;
$rentry RIGHT_func8;
requires ($L(.param_1) == $R(.param_1));
ensures ($L(.ret_0) == $R(.ret_0));

