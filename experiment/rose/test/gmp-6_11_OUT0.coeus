declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func8(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  if ((.param_1 < 32))
  {
    .ret_0 = bvand(bvshr(2693408940, .param_1), 1);
  }
  else
  {
    if ((bvand(.param_1, 1) == 0))
    {
      .ret_0 = 0;
    }
    else
    {
      if (((.param_1 % 3) == 0))
      {
        .ret_0 = 0;
      }
      else
      {
        if (((.param_1 % 5) == 0))
        {
          .ret_0 = 0;
        }
        else
        {
          if (((.param_1 % 7) == 0))
          {
            .ret_0 = 0;
          }
          else
          {
            .local_4 = 11;
            .local_5 = 0;
            .local_6 = 1;
            while ((.local_6 != 0))
            {
              .local_2 = (.param_1 / .local_4);
              .local_3 = (.param_1 - (.local_2 * .local_4));
              if ((.local_2 < .local_4))
              {
                .local_5 = 1;
                .local_6 = 0;
              }
              else
              {
                if ((.local_3 == 0))
                {
                  .local_6 = 0;
                }
                else
                {
                  .local_4 = (.local_4 + 2);
                  .local_2 = (.param_1 / .local_4);
                  .local_3 = (.param_1 - (.local_2 * .local_4));
                  if ((.local_2 < .local_4))
                  {
                    .local_5 = 1;
                    .local_6 = 0;
                  }
                  else
                  {
                    if ((.local_3 == 0))
                    {
                      .local_6 = 0;
                    }
                    else
                    {
                      .local_4 = (.local_4 + 4);
                    }
                  }
                }
              }
            }
            .ret_0 = .local_5;
          }
        }
      }
    }
  }
}

procedure RIGHT_func8(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  if ((.param_1 < 32))
  {
    .ret_0 = bvand(bvshr(2693408940, .param_1), 1);
  }
  else
  {
    if ((bvand(.param_1, 1) == 0))
    {
      .ret_0 = 0;
    }
    else
    {
      if (((.param_1 % 3) == 0))
      {
        .ret_0 = 0;
      }
      else
      {
        if (((.param_1 % 5) == 0))
        {
          .ret_0 = 0;
        }
        else
        {
          if (((.param_1 % 7) == 0))
          {
            .ret_0 = 0;
          }
          else
          {
            .local_4 = 11;
            .local_5 = 0;
            .local_6 = 1;
            while ((.local_6 != 0))
            {
              .local_2 = (.param_1 / .local_4);
              .local_3 = (.param_1 - (.local_2 * .local_4));
              if ((.local_2 < .local_4))
              {
                .local_5 = 1;
                .local_6 = 0;
              }
              else
              {
                if ((.local_3 == 0))
                {
                  .local_6 = 0;
                }
                else
                {
                  .local_4 = (.local_4 + 2);
                  .local_2 = (.param_1 / .local_4);
                  .local_3 = (.param_1 - (.local_2 * .local_4));
                  if ((.local_2 < .local_4))
                  {
                    .local_5 = 1;
                    .local_6 = 0;
                  }
                  else
                  {
                    if ((.local_3 == 0))
                    {
                      .local_6 = 0;
                    }
                    else
                    {
                      .local_4 = (.local_4 + 4);
                    }
                  }
                }
              }
            }
            .ret_0 = .local_5;
          }
        }
      }
    }
  }
}

$lentry LEFT_func8;
$rentry RIGHT_func8;
requires ($L(.param_1) == $R(.param_1));
ensures ($L(.ret_0) == $R(.ret_0));

