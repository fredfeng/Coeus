declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func7(int .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  .local_3 = 0;
  .local_4 = 0;
  .local_5 = 0;
  .local_5 = ((.param_1 % .param_2) * 16);
  .local_4 = (.param_1 / .param_2);
  .local_3 = 0;
  while ((.local_3 < 7))
  {
    .local_4 = bvor((.local_4 * 16), (.local_5 / .param_2));
    .local_5 = ((.local_5 % .param_2) * 16);
    .local_3 = (.local_3 + 1);
  }
  if (((.local_5 / 8) >= .param_2))
  {
    .local_4 = (.local_4 + 1);
  }
  .ret_0 = .local_4;
}

procedure RIGHT_func7(int .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  .local_3 = 0;
  .local_4 = 0;
  .local_5 = 0;
  .local_5 = ((.param_1 % .param_2) * 16);
  .local_4 = (.param_1 / .param_2);
  .local_3 = 0;
  while ((.local_3 <= 6))
  {
    .local_4 = bvor((.local_4 * 16), (.local_5 / .param_2));
    .local_5 = ((.local_5 % .param_2) * 16);
    if (((1 + .local_3) <= 6))
    {
      .local_4 = bvor((.local_4 * 16), (.local_5 / .param_2));
      .local_5 = ((.local_5 % .param_2) * 16);
    }
    .local_3 = (.local_3 + 2);
  }
  if (((.local_5 / 8) >= .param_2))
  {
    .local_4 = (.local_4 + 1);
  }
  .ret_0 = .local_4;
}

$lentry LEFT_func7;
$rentry RIGHT_func7;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
ensures ($L(.ret_0) == $R(.ret_0));

