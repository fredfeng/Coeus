declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func12(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_5 = 8;
  .local_7 = 0;
  .local_8 = .param_3;
  if ((.param_1 == 1))
  {
    .local_6 = (.param_2 / 16);
    .local_5 = (.local_5 - 1);
  }
  else
  {
    .local_6 = .param_2;
  }
  .local_4 = 0;
  while ((.local_4 < .local_5))
  {
    .local_9 = bvand(.local_6, 15);
    .local_6 = (.local_6 / 16);
    .local_10 = (.local_9 + .local_8);
    if ((.local_10 > 10))
    {
      .local_8 = 1;
      .local_10 = (.local_10 - 10);
    }
    else
    {
      .local_8 = 0;
    }
    .local_7 = bvor(.local_7, bvshl(.local_10, (.local_4 * 4)));
    .local_4 = (.local_4 + 1);
  }
  if ((.param_1 == 1))
  {
    .local_7 = bvor(bvor((.local_8 * 4294967296), (.local_7 * 16)),
     bvand(.param_2, 15));
  }
  else
  {
    .local_7 = bvor((.local_8 * 4294967296), .local_7);
  }
  .ret_0 = .local_7;
}

procedure RIGHT_func12(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  int .local_15;
  .local_10 = 8;
  .local_8 = 0;
  .local_12 = .local_8;
  .local_13 = .param_3;
  .local_7 = 1;
  .local_6 = (if (.param_1 == .local_7) then 1 else 0);
  if ((.param_1 == .local_7))
  {
    .local_11 = (.param_2 / 16);
    .local_10 = (.local_10 - .local_7);
  }
  else
  {
    .local_11 = .param_2;
  }
  .local_9 = .local_8;
  .local_5 = (.local_10 - 1);
  while ((.local_9 <= .local_5))
  {
    .local_14 = bvand(.local_11, 15);
    .local_11 = (.local_11 / 16);
    .local_15 = (.local_14 + .local_13);
    .local_4 = 10;
    if ((.local_15 > .local_4))
    {
      .local_13 = .local_7;
      .local_15 = (.local_15 - .local_4);
    }
    else
    {
      .local_13 = .local_8;
    }
    .local_12 = bvor(.local_12, bvshl(.local_15, (.local_9 * 4)));
    .local_9 = (.local_9 + 1);
  }
  if ((.param_1 == .local_7))
  {
    .local_12 = bvor(bvor((.local_13 * 4294967296), (.local_12 * 16)),
     bvand(.param_2, 15));
  }
  else
  {
    .local_12 = bvor((.local_13 * 4294967296), .local_12);
  }
  .ret_0 = .local_12;
}

$lentry LEFT_func12;
$rentry RIGHT_func12;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
ensures ($L(.ret_0) == $R(.ret_0));

