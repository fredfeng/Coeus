declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func7(int .param_1, int[int] .param_2, int[int, int] .param_3)
 returns ()
{
  int .local_4;
  int .local_5;
  .local_4 = 0;
  .local_5 = 0;
  .local_4 = 0;
  while ((.local_4 < .param_1))
  {
    .param_2[.local_4] = ((.local_4 * 2) + .param_1);
    .local_4 = (.local_4 + 1);
  }
  .local_4 = 0;
  while ((.local_4 < .param_1))
  {
    .local_5 = 0;
    while ((.local_5 < .param_1))
    {
      .param_3[.local_5, .local_4] = ((.local_4 + .local_5) + .param_1);
      .local_5 = (.local_5 + 1);
    }
    .local_4 = (.local_4 + 1);
  }
}

procedure RIGHT_func7(int .param_1, int[int] .param_2, int[int,
                      int] .param_3)
 returns ()
{
  int .local_4;
  int .local_5;
  .local_4 = 0;
  .local_5 = 0;
  .local_4 = 0;
  while ((.local_4 <= ((- 1) + .param_1)))
  {
    .param_2[.local_4] = ((.local_4 * 2) + .param_1);
    .local_4 = (.local_4 + 1);
  }
  .local_4 = 0;
  while ((.local_4 <= ((- 1) + .param_1)))
  {
    .local_5 = 0;
    while ((.local_5 <= ((- 1) + .param_1)))
    {
      .param_3[.local_5, .local_4] = ((.local_4 + .local_5) + .param_1);
      .local_5 = (.local_5 + 1);
    }
    .local_4 = (.local_4 + 1);
  }
}

$lentry LEFT_func7;
$rentry RIGHT_func7;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
ensures ($L(.param_2) == $R(.param_2));
ensures ($L(.param_3) == $R(.param_3));

