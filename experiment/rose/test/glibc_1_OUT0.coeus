declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func12(int[int] .param_1, int[int] .param_2, int .param_3,
                      int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_7 = .param_4;
  .local_8 = (32 - .local_7);
  .local_9 = (.param_3 - 1);
  .local_6 = .param_2[.local_9];
  .local_10 = bvshr(.local_6, .local_8);
  .local_5 = .local_6;
  while (((.local_9 - 1) >= 0))
  {
    .local_9 = (.local_9 - 1);
    .local_6 = .param_2[.local_9];
    .param_1[.local_9] = bvor(bvshl(.local_5, .local_7), bvshr(.local_6,
     .local_8));
    .local_5 = .local_6;
  }
  .param_1[.local_9] = bvshl(.local_5, .local_7);
  .ret_0 = .local_10;
}

procedure RIGHT_func12(int[int] .param_1, int[int] .param_2, int .param_3,
                       int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_7 = .param_4;
  .local_8 = (32 - .local_7);
  .local_9 = (.param_3 - 1);
  .local_6 = .param_2[.local_9];
  .local_10 = bvshr(.local_6, .local_8);
  .local_5 = .local_6;
  while (((.local_9 - 1) >= 0))
  {
    .local_9 = (.local_9 - 1);
    .local_6 = .param_2[.local_9];
    .param_1[.local_9] = bvor(bvshl(.local_5, .local_7), bvshr(.local_6,
     .local_8));
    .local_5 = .local_6;
  }
  .param_1[.local_9] = bvshl(.local_5, .local_7);
  .ret_0 = .local_10;
}

$lentry LEFT_func12;
$rentry RIGHT_func12;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
requires ($L(.param_4) == $R(.param_4));
ensures ($L(.param_1) == $R(.param_1));
ensures ($L(.param_2) == $R(.param_2));
ensures ($L(.ret_0) == $R(.ret_0));

