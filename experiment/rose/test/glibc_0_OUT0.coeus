declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func11(int[int] .param_1, int[int] .param_2, int .param_3,
                      int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = 0;
  .local_6 = (- 1);
  .local_7 = 1;
  while (((.local_5 < .param_3) && (.local_7 != 0)))
  {
    .local_8 = .param_1[.local_5];
    .local_9 = (.local_8 + .param_2[.local_5]);
    if (((.param_4 >= .local_8) && (.param_4 < .local_9)))
    {
      .local_7 = 0;
      .local_6 = .local_5;
    }
    else
    {
      if ((.param_4 < .local_8))
      {
        .local_7 = 0;
      }
      else
      {
        .local_5 = (.local_5 + 1);
      }
    }
  }
  .ret_0 = .local_6;
}

procedure RIGHT_func11(int[int] .param_1, int[int] .param_2, int .param_3,
                       int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  .local_5 = 0;
  .local_6 = (- 1);
  .local_7 = 1;
  while (((.local_5 < .param_3) && (.local_7 != 0)))
  {
    .local_8 = .param_1[.local_5];
    .local_9 = (.local_8 + .param_2[.local_5]);
    if (((.param_4 >= .local_8) && (.param_4 < .local_9)))
    {
      .local_7 = 0;
      .local_6 = .local_5;
    }
    else
    {
      if ((.param_4 < .local_8))
      {
        .local_7 = 0;
      }
      else
      {
        .local_5 = (.local_5 + 1);
      }
    }
  }
  .ret_0 = .local_6;
}

$lentry LEFT_func11;
$rentry RIGHT_func11;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
requires ($L(.param_4) == $R(.param_4));
ensures ($L(.param_1) == $R(.param_1));
ensures ($L(.param_2) == $R(.param_2));
ensures ($L(.ret_0) == $R(.ret_0));

