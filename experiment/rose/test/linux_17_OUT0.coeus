declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func9(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = (.param_1 / .param_2);
  .local_5 = (.param_1 % .param_2);
  .local_7 = (.param_2 % 2);
  .local_6 = ((.param_2 / 2) + .local_7);
  while ((.param_3 > 0))
  {
    .param_3 = (.param_3 - 1);
    .local_4 = (.local_4 * 2);
    if ((.local_5 >= .local_6))
    {
      .local_4 = (.local_4 + 1);
      .local_5 = (((.local_5 - .local_6) * 2) + .local_7);
    }
    else
    {
      .local_5 = (.local_5 * 2);
    }
  }
  if ((.local_5 >= .local_6))
  {
    .local_4 = (.local_4 + 1);
  }
  .ret_0 = .local_4;
}

procedure RIGHT_func9(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  .local_4 = (.param_1 / .param_2);
  .local_5 = (.param_1 % .param_2);
  .local_7 = (.param_2 % 2);
  .local_6 = ((.param_2 / 2) + .local_7);
  while ((.param_3 > 0))
  {
    .param_3 = (.param_3 - 1);
    .local_4 = (.local_4 * 2);
    if ((.local_5 >= .local_6))
    {
      .local_4 = (.local_4 + 1);
      .local_5 = (((.local_5 - .local_6) * 2) + .local_7);
    }
    else
    {
      .local_5 = (.local_5 * 2);
    }
  }
  if ((.local_5 >= .local_6))
  {
    .local_4 = (.local_4 + 1);
  }
  .ret_0 = .local_4;
}

$lentry LEFT_func9;
$rentry RIGHT_func9;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
ensures ($L(.ret_0) == $R(.ret_0));

