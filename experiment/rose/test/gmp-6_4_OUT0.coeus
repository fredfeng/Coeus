declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func13(int .param_1, int[int] .param_2, int .param_3,
                      int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  .local_11 = 1;
  .local_7 = .param_1;
  .local_8 = (if (.local_7 >= 0) then .local_7 else (- .local_7));
  .local_5 = (.param_3 / .param_4);
  if ((.local_5 >= .local_8))
  {
    .ret_0 = (if (.local_7 < 0) then 1 else 0);
  }
  else
  {
    .local_6 = (.param_3 % .param_4);
    .local_9 = .param_2[.local_5];
    .local_10 = bvand(bvshr(.local_9, .local_6), 1);
    if ((.local_7 < 0))
    {
      if (((.local_6 > 0) && (bvshl(.local_9, (.param_4 - .local_6)) > 0)))
      {
        .local_10 = bvxor(.local_10, 1);
      }
      else
      {
        while ((((.local_5 - 1) >= 0) && (.local_11 != 0)))
        {
          .local_5 = (.local_5 - 1);
          if ((.param_2[.local_5] > 0))
          {
            .local_11 = 0;
            .local_10 = bvxor(.local_10, 1);
          }
        }
      }
    }
    .ret_0 = .local_10;
  }
}

procedure RIGHT_func13(int .param_1, int[int] .param_2, int .param_3,
                       int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  .local_11 = 1;
  .local_7 = .param_1;
  .local_8 = (if (.local_7 >= 0) then .local_7 else (- .local_7));
  .local_5 = (.param_3 / .param_4);
  if ((.local_5 >= .local_8))
  {
    .ret_0 = (if (.local_7 < 0) then 1 else 0);
  }
  else
  {
    .local_6 = (.param_3 % .param_4);
    .local_9 = .param_2[.local_5];
    .local_10 = bvand(bvshr(.local_9, .local_6), 1);
    if ((.local_7 < 0))
    {
      if (((.local_6 > 0) && (bvshl(.local_9, (.param_4 - .local_6)) > 0)))
      {
        .local_10 = bvxor(.local_10, 1);
      }
      else
      {
        while ((((.local_5 - 1) >= 0) && (.local_11 != 0)))
        {
          .local_5 = (.local_5 - 1);
          if ((.param_2[.local_5] > 0))
          {
            .local_11 = 0;
            .local_10 = bvxor(.local_10, 1);
          }
        }
      }
    }
    .ret_0 = .local_10;
  }
}

$lentry LEFT_func13;
$rentry RIGHT_func13;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
requires ($L(.param_4) == $R(.param_4));
ensures ($L(.param_2) == $R(.param_2));
ensures ($L(.ret_0) == $R(.ret_0));

