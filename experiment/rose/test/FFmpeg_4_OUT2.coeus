declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func16(int[int, int] .param_1, int[int, int] .param_2) returns
 ()
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_3 = .param_1[0, 0];
  .local_4 = .param_1[1, 0];
  .local_5 = .param_1[2, 0];
  .local_6 = .param_1[0, 1];
  .local_7 = .param_1[1, 1];
  .local_8 = .param_1[2, 1];
  .local_9 = .param_1[0, 2];
  .local_10 = .param_1[1, 2];
  .local_11 = .param_1[2, 2];
  .param_2[0, 0] = ((.local_7 * .local_11) - (.local_10 * .local_8));
  .param_2[1, 0] = (- ((.local_4 * .local_11) - (.local_10 * .local_5)));
  .param_2[2, 0] = ((.local_4 * .local_8) - (.local_7 * .local_5));
  .param_2[0, 1] = (- ((.local_6 * .local_11) - (.local_9 * .local_8)));
  .param_2[1, 1] = ((.local_3 * .local_11) - (.local_9 * .local_5));
  .param_2[2, 1] = (- ((.local_3 * .local_8) - (.local_6 * .local_5)));
  .param_2[0, 2] = ((.local_6 * .local_10) - (.local_9 * .local_7));
  .param_2[1, 2] = (- ((.local_3 * .local_10) - (.local_9 * .local_4)));
  .param_2[2, 2] = ((.local_3 * .local_7) - (.local_6 * .local_4));
  .local_14 = (((.local_3 * .param_2[0, 0]) + (.local_6 * .param_2[1,
   0])) + (.local_9 * .param_2[2, 0]));
  .local_14 = (1 / .local_14);
  .local_12 = 0;
  while ((.local_12 < 3))
  {
    .local_13 = 0;
    while ((.local_13 < 3))
    {
      .param_2[.local_13, .local_12] = (.param_2[.local_13,
       .local_12] * .local_14);
      .local_13 = (.local_13 + 1);
    }
    .local_12 = (.local_12 + 1);
  }
}

procedure RIGHT_func16(int[int, int] .param_1, int[int, int] .param_2)
 returns ()
{
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  int .local_11;
  int .local_12;
  int .local_13;
  int .local_14;
  .local_3 = .param_1[0, 0];
  .local_4 = .param_1[1, 0];
  .local_5 = .param_1[2, 0];
  .local_6 = .param_1[0, 1];
  .local_7 = .param_1[1, 1];
  .local_8 = .param_1[2, 1];
  .local_9 = .param_1[0, 2];
  .local_10 = .param_1[1, 2];
  .local_11 = .param_1[2, 2];
  .param_2[0, 0] = ((.local_7 * .local_11) - (.local_10 * .local_8));
  .param_2[1, 0] = (- ((.local_4 * .local_11) - (.local_10 * .local_5)));
  .param_2[2, 0] = ((.local_4 * .local_8) - (.local_7 * .local_5));
  .param_2[0, 1] = (- ((.local_6 * .local_11) - (.local_9 * .local_8)));
  .param_2[1, 1] = ((.local_3 * .local_11) - (.local_9 * .local_5));
  .param_2[2, 1] = (- ((.local_3 * .local_8) - (.local_6 * .local_5)));
  .param_2[0, 2] = ((.local_6 * .local_10) - (.local_9 * .local_7));
  .param_2[1, 2] = (- ((.local_3 * .local_10) - (.local_9 * .local_4)));
  .param_2[2, 2] = ((.local_3 * .local_7) - (.local_6 * .local_4));
  .local_14 = (((.local_3 * .param_2[0, 0]) + (.local_6 * .param_2[1,
   0])) + (.local_9 * .param_2[2, 0]));
  .local_14 = (1 / .local_14);
  .local_12 = 0;
  while ((.local_12 <= (3 - 1)))
  {
    .local_13 = 0;
    while ((.local_13 <= (3 - 1)))
    {
      .param_2[.local_13, .local_12] = (.param_2[.local_13,
       .local_12] * .local_14);
      .local_13 = (.local_13 + 1);
    }
    .local_12 = (.local_12 + 1);
  }
}

$lentry LEFT_func16;
$rentry RIGHT_func16;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
ensures ($L(.param_1) == $R(.param_1));
ensures ($L(.param_2) == $R(.param_2));

