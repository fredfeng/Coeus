declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func10(int .param_1, int .param_2, int .param_3, int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  if ((.param_1 == 0))
  {
    .local_5 = 0;
  }
  else
  {
    .local_5 = (((2 * .param_2) * .param_2) / .param_3);
    if ((.param_1 != 2))
    {
      .local_8 = ((.param_1 / 2) - 1);
      .local_7 = 0;
      while ((.local_7 < .local_8))
      {
        .local_5 = ((.param_2 * .param_2) / ((.param_3 - ((4 * (.local_7 + 1)) * (.local_7 + 1))) - .local_5));
        .local_7 = (.local_7 + 1);
      }
    }
  }
  .local_5 = (.local_5 + (.param_1 * .param_1));
  .local_6 = 0;
  .local_7 = 0;
  while ((.local_7 < .param_4))
  {
    .local_6 = ((.param_2 * .param_2) / ((.param_3 - ((.param_1 + (2 * (.param_4 - .local_7))) * (.param_1 + (2 * (.param_4 - .local_7))))) - .local_6));
    .local_7 = (.local_7 + 1);
  }
  if ((.param_1 == 0))
  {
    .local_6 = (.local_6 * 2);
  }
  .ret_0 = ((.local_5 + .local_6) - .param_3);
}

procedure RIGHT_func10(int .param_1, int .param_2, int .param_3,
                       int .param_4)
 returns (int .ret_0)
{
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  if ((.param_1 == 0))
  {
    .local_5 = 0;
  }
  else
  {
    .local_5 = (((2 * .param_2) * .param_2) / .param_3);
    if ((.param_1 != 2))
    {
      .local_8 = ((.param_1 / 2) - 1);
      .local_7 = 0;
      while ((.local_7 <= (.local_8 - 1)))
      {
        .local_5 = ((.param_2 * .param_2) / ((.param_3 - ((4 * (.local_7 + 1)) * (.local_7 + 1))) - .local_5));
        .local_7 = (.local_7 + 1);
      }
    }
  }
  .local_5 = (.local_5 + (.param_1 * .param_1));
  .local_6 = 0;
  .local_7 = 0;
  while ((.local_7 <= (.param_4 - 1)))
  {
    .local_6 = ((.param_2 * .param_2) / ((.param_3 - ((.param_1 + (2 * (.param_4 - .local_7))) * (.param_1 + (2 * (.param_4 - .local_7))))) - .local_6));
    .local_7 = (.local_7 + 1);
  }
  if ((.param_1 == 0))
  {
    .local_6 = (.local_6 * 2);
  }
  .ret_0 = ((.local_5 + .local_6) - .param_3);
}

$lentry LEFT_func10;
$rentry RIGHT_func10;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
requires ($L(.param_4) == $R(.param_4));
ensures ($L(.ret_0) == $R(.ret_0));

