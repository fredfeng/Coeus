declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func8(int[int] .param_1) returns ()
{
  int .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int[int] .local_6;
  .local_6[0] = 0;
  .local_6[1] = 1;
  .local_6[2] = 2;
  .local_6[3] = 4;
  .local_6[4] = 5;
  .local_6[5] = 7;
  .local_6[6] = 8;
  .local_6[7] = 10;
  .local_6[8] = 11;
  .local_6[9] = 12;
  .local_6[10] = 16;
  .local_6[11] = 22;
  .local_6[12] = 23;
  .local_6[13] = 26;
  .local_3 = 0;
  .local_4 = 0;
  while ((.local_4 < 14))
  {
    .local_3 = bvor(.local_3, bvshl(1, (31 - .local_6[.local_4])));
    .local_4 = (.local_4 + 1);
  }
  .param_1[0] = 0;
  .local_4 = 1;
  while ((.local_4 < 256))
  {
    .local_2 = 0;
    .local_5 = bvor(.local_4, 256);
    while ((.local_5 != 1))
    {
      .local_2 = (if (bvand(.local_2, 1) != 0) then bvxor((.local_2 / 2),
       .local_3) else (.local_2 / 2));
      if ((bvand(.local_5, 1) != 0))
      {
        .local_2 = bvxor(.local_2, .local_3);
      }
      .local_5 = (.local_5 / 2);
    }
    .param_1[.local_4] = .local_2;
    .local_4 = (.local_4 + 1);
  }
}

procedure RIGHT_func8(int[int] .param_1) returns ()
{
  int .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int[int] .local_9;
  .local_4 = 0;
  .local_3 = 1;
  .local_9[0] = .local_4;
  .local_9[1] = .local_3;
  .local_9[2] = 2;
  .local_9[3] = 4;
  .local_9[4] = 5;
  .local_9[5] = 7;
  .local_9[6] = 8;
  .local_9[7] = 10;
  .local_9[8] = 11;
  .local_9[9] = 12;
  .local_9[10] = 16;
  .local_9[11] = 22;
  .local_9[12] = 23;
  .local_9[13] = 26;
  .local_4 = 0;
  .local_6 = .local_4;
  .local_7 = 0;
  while ((.local_7 <= 13))
  {
    .local_6 = bvor(.local_6, bvshl(1, (31 - .local_9[.local_7])));
    .local_7 = (.local_7 + 1);
  }
  .param_1[0] = .local_4;
  .local_7 = 1;
  while ((.local_7 <= 255))
  {
    .local_5 = .local_4;
    .local_8 = bvor(.local_7, 256);
    while ((.local_8 != .local_3))
    {
      .local_2 = (.local_5 / 2);
      .local_5 = (if (bvand(.local_5, .local_3) != 0) then bvxor(.local_2,
       .local_6) else .local_2);
      if ((bvand(.local_8, .local_3) != 0))
      {
        .local_5 = bvxor(.local_5, .local_6);
      }
      .local_8 = (.local_8 / 2);
    }
    .param_1[.local_7] = .local_5;
    .local_7 = (.local_7 + 1);
  }
}

$lentry LEFT_func8;
$rentry RIGHT_func8;
requires ($L(.param_1) == $R(.param_1));
ensures ($L(.param_1) == $R(.param_1));

