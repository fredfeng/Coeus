declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func10(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  .local_4 = ((.param_1 / 128) % 2);
  .local_5 = ((.param_1 / 16) % 8);
  .local_6 = (.param_1 % 16);
  .local_2 = ((16 + .local_6) / 16);
  if ((.local_5 < 4))
  {
    .local_7 = .local_5;
    .local_3 = 0;
    while ((.local_3 <= .local_7))
    {
      .local_2 = (.local_2 * 2);
      .local_3 = (.local_3 + 1);
    }
  }
  else
  {
    .local_8 = (7 - .local_5);
    .local_3 = 0;
    while ((.local_3 < .local_8))
    {
      .local_2 = (.local_2 / 2);
      .local_3 = (.local_3 + 1);
    }
  }
  if ((.local_4 != 0))
  {
    .local_2 = (- .local_2);
  }
  .ret_0 = .local_2;
}

procedure RIGHT_func10(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  int .local_4;
  int .local_5;
  int .local_6;
  int .local_7;
  int .local_8;
  int .local_9;
  int .local_10;
  .local_6 = ((.param_1 / 128) % 2);
  .local_3 = 16;
  .local_7 = ((.param_1 / .local_3) % 8);
  .local_8 = (.param_1 % .local_3);
  .local_4 = ((.local_3 + .local_8) / .local_3);
  if ((.local_7 < 4))
  {
    .local_9 = .local_7;
    .local_5 = 0;
    while ((.local_5 <= .local_9))
    {
      .local_4 = (.local_4 * 2);
      .local_5 = (.local_5 + 1);
    }
  }
  else
  {
    .local_10 = (7 - .local_7);
    .local_5 = 0;
    .local_2 = (.local_10 - 1);
    while ((.local_5 <= .local_2))
    {
      .local_4 = (.local_4 / 2);
      .local_5 = (.local_5 + 1);
    }
  }
  if ((.local_6 != 0))
  {
    .local_4 = (- .local_4);
  }
  .ret_0 = .local_4;
}

$lentry LEFT_func10;
$rentry RIGHT_func10;
requires ($L(.param_1) == $R(.param_1));
ensures ($L(.ret_0) == $R(.ret_0));

