declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func5(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  if ((.param_1 == 0))
  {
    .ret_0 = 0;
  }
  else
  {
    .local_3 = 1;
    while ((.local_3 < .param_1))
    {
      .local_3 = (.local_3 * 2);
    }
    if ((.local_3 == .param_1))
    {
      .ret_0 = .param_1;
    }
    else
    {
      .local_2 = (.local_3 / 2);
      if (((.param_1 - .local_2) < (.local_3 - .param_1)))
      {
        .ret_0 = .local_2;
      }
      else
      {
        .ret_0 = .local_3;
      }
    }
  }
}

procedure RIGHT_func5(int .param_1) returns (int .ret_0)
{
  int .local_2;
  int .local_3;
  if ((.param_1 == 0))
  {
    .ret_0 = 0;
  }
  else
  {
    .local_3 = 1;
    while ((.local_3 <= (.param_1 - 1)))
    {
      .local_3 = (.local_3 * 2);
    }
    if ((.local_3 == .param_1))
    {
      .ret_0 = .param_1;
    }
    else
    {
      .local_2 = (.local_3 / 2);
      if (((.param_1 - .local_2) < (.local_3 - .param_1)))
      {
        .ret_0 = .local_2;
      }
      else
      {
        .ret_0 = .local_3;
      }
    }
  }
}

$lentry LEFT_func5;
$rentry RIGHT_func5;
requires ($L(.param_1) == $R(.param_1));
ensures ($L(.ret_0) == $R(.ret_0));

