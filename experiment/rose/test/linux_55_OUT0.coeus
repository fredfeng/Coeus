declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func10(int .param_1, int .param_2, int .param_3, int .param_4,
                      int .param_5)
 returns (int .ret_0)
{
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = (.param_3 + 2);
  if ((.local_6 == 2))
  {
    if (((.param_2 != (.param_1 + 1)) && (.param_2 != (.param_1 - 1))))
    {
      .local_6 = 1;
    }
  }
  else
  {
    .local_8 = 4;
    while ((.local_8 < .local_6))
    {
      .local_8 = (.local_8 * 2);
    }
    .local_6 = .local_8;
  }
  if ((.local_6 > .param_4))
  {
    .local_6 = .param_4;
  }
  .local_7 = (.param_5 / 2);
  if ((.local_6 < .local_7))
  {
    .local_6 = .local_7;
  }
  .ret_0 = .local_6;
}

procedure RIGHT_func10(int .param_1, int .param_2, int .param_3,
                       int .param_4, int .param_5)
 returns (int .ret_0)
{
  int .local_6;
  int .local_7;
  int .local_8;
  .local_6 = (.param_3 + 2);
  if ((.local_6 == 2))
  {
    if (((.param_2 != (.param_1 + 1)) && (.param_2 != (.param_1 - 1))))
    {
      .local_6 = 1;
    }
  }
  else
  {
    .local_8 = 4;
    while ((.local_8 < .local_6))
    {
      .local_8 = (.local_8 * 2);
    }
    .local_6 = .local_8;
  }
  if ((.local_6 > .param_4))
  {
    .local_6 = .param_4;
  }
  .local_7 = (.param_5 / 2);
  if ((.local_6 < .local_7))
  {
    .local_6 = .local_7;
  }
  .ret_0 = .local_6;
}

$lentry LEFT_func10;
$rentry RIGHT_func10;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
requires ($L(.param_4) == $R(.param_4));
requires ($L(.param_5) == $R(.param_5));
ensures ($L(.ret_0) == $R(.ret_0));

