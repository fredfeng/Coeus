declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func8(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = 1;
  .local_5 = 0;
  while ((((.param_3 < .param_2) && (.local_4 != 0)) && (! (bvand(.param_3,
   (1 * 2147483648)) != 0))))
  {
    .param_3 = (.param_3 * 2);
    .local_4 = (.local_4 * 2);
  }
  while ((.local_4 != 0))
  {
    if ((.param_2 >= .param_3))
    {
      .param_2 = (.param_2 - .param_3);
      .local_5 = bvor(.local_5, .local_4);
    }
    .local_4 = (.local_4 / 2);
    .param_3 = (.param_3 / 2);
  }
  if ((.param_1 != 0))
  {
    .ret_0 = .param_2;
  }
  else
  {
    .ret_0 = .local_5;
  }
}

procedure RIGHT_func8(int .param_1, int .param_2, int .param_3) returns
 (int .ret_0)
{
  int .local_4;
  int .local_5;
  int .local_6;
  .local_4 = 1;
  .local_5 = 0;
  while ((((.param_3 < .param_2) && (.local_4 != 0)) && (! (bvand(.param_3,
   (1 * 2147483648)) != 0))))
  {
    .param_3 = (.param_3 * 2);
    .local_4 = (.local_4 * 2);
  }
  while ((.local_4 != 0))
  {
    if ((.param_2 >= .param_3))
    {
      .param_2 = (.param_2 - .param_3);
      .local_5 = bvor(.local_5, .local_4);
    }
    .local_4 = (.local_4 / 2);
    .param_3 = (.param_3 / 2);
  }
  if ((.param_1 != 0))
  {
    .ret_0 = .param_2;
  }
  else
  {
    .ret_0 = .local_5;
  }
}

$lentry LEFT_func8;
$rentry RIGHT_func8;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
requires ($L(.param_3) == $R(.param_3));
ensures ($L(.ret_0) == $R(.ret_0));

