declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func6(int .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  .local_3 = ((.param_1 / .param_2) * 16777216);
  .param_1 = (.param_1 % .param_2);
  .param_1 = (.param_1 / 100);
  .param_2 = (.param_2 / 100);
  .local_4 = 31;
  while (((.local_4 >= 0) && (! (bvshr(.param_1, .local_4) != 0))))
  {
    .local_4 = (.local_4 - 1);
  }
  if ((.local_4 >= 0))
  {
    .param_1 = bvshl(.param_1, (31 - .local_4));
    .param_1 = (.param_1 / .param_2);
    .local_4 = (24 - (31 - .local_4));
    if ((.local_4 >= 0))
    {
      .param_1 = bvshl(.param_1, .local_4);
    }
    else
    {
      .param_1 = bvshr(.param_1, (- .local_4));
    }
    .local_3 = bvor(.local_3, .param_1);
  }
  .ret_0 = .local_3;
}

procedure RIGHT_func6(int .param_1, int .param_2) returns (int .ret_0)
{
  int .local_3;
  int .local_4;
  .local_3 = ((.param_1 / .param_2) * 16777216);
  .param_1 = (.param_1 % .param_2);
  .param_1 = (.param_1 / 100);
  .param_2 = (.param_2 / 100);
  .local_4 = 31;
  while (((.local_4 >= 0) && (! (bvshr(.param_1, .local_4) != 0))))
  {
    .local_4 = (.local_4 - 1);
  }
  if ((.local_4 >= 0))
  {
    .param_1 = bvshl(.param_1, (31 - .local_4));
    .param_1 = (.param_1 / .param_2);
    .local_4 = (24 - (31 - .local_4));
    if ((.local_4 >= 0))
    {
      .param_1 = bvshl(.param_1, .local_4);
    }
    else
    {
      .param_1 = bvshr(.param_1, (- .local_4));
    }
    .local_3 = bvor(.local_3, .param_1);
  }
  .ret_0 = .local_3;
}

$lentry LEFT_func6;
$rentry RIGHT_func6;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
ensures ($L(.ret_0) == $R(.ret_0));

