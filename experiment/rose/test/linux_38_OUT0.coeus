declare int bvand(int, int);
declare int bvor(int, int);
declare int bvxor(int, int);
declare int bvnot(int);
declare int bvshl(int, int);
declare int bvshr(int, int);

procedure LEFT_func7(int[int, int] .param_1, int .param_2) returns
 (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  .local_4 = 0;
  if ((.param_2 <= .param_1[0, (27 - 1)]))
  {
    .ret_0 = .param_1[1, (27 - 1)];
  }
  else
  {
    if ((.param_2 >= .param_1[0, 0]))
    {
      .ret_0 = .param_1[1, 0];
    }
    else
    {
      .local_3 = 0;
      while (((.local_3 < 26) && ((.param_2 <= .param_1[0,
       .local_3]) && (.param_2 >= .param_1[0, (.local_3 + 1)]))))
      {
        .local_3 = (.local_3 + 1);
      }
      if ((.local_3 < 26))
      {
        if ((.param_2 == .param_1[0, .local_3]))
        {
          .local_4 = .param_1[1, .local_3];
        }
        else
        {
          if ((.param_2 == .param_1[0, (.local_3 + 1)]))
          {
            .local_4 = .param_1[1, (.local_3 + 1)];
          }
          else
          {
            .local_5 = (((.param_2 - .param_1[0,
             .local_3]) * 1000) / (.param_1[0, (.local_3 + 1)] - .param_1[0,
             .local_3]));
            .local_4 = (.param_1[1, .local_3] + ((.local_5 * (.param_1[1,
             (.local_3 + 1)] - .param_1[1, .local_3])) / 1000));
          }
        }
      }
      .ret_0 = .local_4;
    }
  }
}

procedure RIGHT_func7(int[int, int] .param_1, int .param_2) returns
 (int .ret_0)
{
  int .local_3;
  int .local_4;
  int .local_5;
  .local_4 = 0;
  if ((.param_2 <= .param_1[0, 26]))
  {
    .ret_0 = .param_1[1, 26];
  }
  else
  {
    if ((.param_2 >= .param_1[0, 0]))
    {
      .ret_0 = .param_1[1, 0];
    }
    else
    {
      .local_3 = 0;
      while (((.local_3 < 26) && ((.param_2 <= .param_1[0,
       .local_3]) && (.param_2 >= .param_1[0, (.local_3 + 1)]))))
      {
        .local_3 = (.local_3 + 1);
      }
      if ((.local_3 < 26))
      {
        if ((.param_2 == .param_1[0, .local_3]))
        {
          .local_4 = .param_1[1, .local_3];
        }
        else
        {
          if ((.param_2 == .param_1[0, (.local_3 + 1)]))
          {
            .local_4 = .param_1[1, (.local_3 + 1)];
          }
          else
          {
            .local_5 = (((.param_2 - .param_1[0,
             .local_3]) * 1000) / (.param_1[0, (.local_3 + 1)] - .param_1[0,
             .local_3]));
            .local_4 = (.param_1[1, .local_3] + ((.local_5 * (.param_1[1,
             (.local_3 + 1)] - .param_1[1, .local_3])) / 1000));
          }
        }
      }
      .ret_0 = .local_4;
    }
  }
}

$lentry LEFT_func7;
$rentry RIGHT_func7;
requires ($L(.param_1) == $R(.param_1));
requires ($L(.param_2) == $R(.param_2));
ensures ($L(.param_1) == $R(.param_1));
ensures ($L(.ret_0) == $R(.ret_0));

